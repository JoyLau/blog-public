<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://blog.joylau.cn/2018/06/29/Ubuntu-SystemConfig/</url>
      <content type="html"><![CDATA[<hr>
<p>title: Ubuntu 自用配置记录<br>date: 2018-06-28 15:16:22<br>description: 安装完 Ubuntu 后自定义的一些配置记录<br>categories: [Ubuntu篇]<br>tags: [Ubuntu]</p>
<a id="more"></a>
<ol>
<li><p>关闭并禁用 swap 分区： sudo swapoff 并且 sudo vim /etc/fstab 注释掉 swap 那行</p>
</li>
<li><p>开启点击图标最小化： gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true</p>
</li>
<li><p>开机开启小键盘： sudo apt-get install numlockx 然后 sudo vim /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf 在最后添加：greeter-setup-script=/usr/bin/numlockx on</p>
</li>
<li><p>用久显示隐藏文件夹： Edit -&gt; Preferences -&gt; Views 勾选 Show hidden and backup files</p>
</li>
<li><p>禁用客人会话： <a href="https://blog.csdn.net/thuyx/article/details/78503870" target="_blank" rel="noopener">https://blog.csdn.net/thuyx/article/details/78503870</a></p>
</li>
<li><p>jdk 10 的配置？？<br> 分别下载 jdk10 和 jre 10 解压缩到 /usr/java目录下<br> 配置如下环境变量</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk-10</span><br><span class="line">JRE_HOME=/usr/java/jre-10</span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"></span><br><span class="line">MAVEN_HOME=/usr/maven/apache-maven-3.5.3</span><br><span class="line">NODE_HOME=/usr/nodejs/node-v8.11.2-linux-x64</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$&#123;NODE_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH MAVEN_HOME NODE_HOME PATH</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><p>安装中文字体文泉译：sudo apt-get install fonts-wqy-microhei</p>
</li>
<li><p>防火墙配置<br> sudo ufw enable</p>
<p> sudo ufw default deny</p>
<p> 运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常</p>
<p> sudo ufw disable 关闭防火墙</p>
</li>
<li><p>鼠标移动速度调整<br> xset m N<br> 其中，N是速度，估计取值为0-10<br> 恢复默认 xset m default</p>
</li>
</ol>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 自用配置记录]]></title>
      <url>http://blog.joylau.cn/2018/06/25/IntelliJIDEA-MyConfigs/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我自己在多个系统中都有使用 IDEA， IDEA登录账户的话是支持配置同步的。但是由于每个系统的环境变量配置（JAVA_HOME,MAVEN_HOME,GIT,NODE,…..），文件目录结构，字体，快捷键等等不同,导致一套配置并不能很好的通用，于是我在此记录下我平时的一些配置，忘了的话翻出来看看，马上就能达到我要的配置</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ol>
<li>UI 菜单字体</li>
<li>编辑器字体 注意：在 Ubuntu 系统下中文字体显得很难看，这时候设置支持中文的第二字体</li>
<li>控制台字体</li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件我使用的是 IDEA 的自动同步功能，在一台客户端下载过的插件都会自动同步，这个不需担心</p>
<h3 id="编辑器变量颜色"><a href="#编辑器变量颜色" class="headerlink" title="编辑器变量颜色"></a>编辑器变量颜色</h3><p>进入设置： File | Settings | Editor | Color Scheme | Language Defaults， 开启 Semantic highlighting 功能</p>
<h3 id="代码改动后目录颜色"><a href="#代码改动后目录颜色" class="headerlink" title="代码改动后目录颜色"></a>代码改动后目录颜色</h3><p>File | Settings | Version Control， 开启 show directoris with ….</p>
<h3 id="自动导包优化"><a href="#自动导包优化" class="headerlink" title="自动导包优化"></a>自动导包优化</h3><p>File | Settings | Editor | General | Auto Import， 勾选 fly</p>
<h3 id="设置-alt"><a href="#设置-alt" class="headerlink" title="设置 alt + /"></a>设置 alt + /</h3><p>File | Settings | Keymap | main menu | code | completion | basic 设为 alt + /<br>同时 取消 cyclic expand word 的 快捷键</p>
<h3 id="自动提示忽略大小写"><a href="#自动提示忽略大小写" class="headerlink" title="自动提示忽略大小写"></a>自动提示忽略大小写</h3><p>File | Settings | Editor | General | Code Completion，将 case sensitive completion 修改为NONE</p>
<h3 id="idea64-vmoptions-配置"><a href="#idea64-vmoptions-配置" class="headerlink" title="idea64.vmoptions 配置"></a>idea64.vmoptions 配置</h3><p>16G 以上的机器：<br>    -Xms512m<br>    -Xmx1500m<br>    -XX:ReservedCodeCacheSize=500m<br>    -XX:SoftRefLRUPolicyMSPerMB=100<br>添加编码 ：<br>    -Dfile.encoding=UTF-8</p>
<h3 id="idea-properties-配置"><a href="#idea-properties-配置" class="headerlink" title="idea.properties 配置"></a>idea.properties 配置</h3><p>控制台打印日志的行数：默认为 1024，不限制的话：<br>    idea.cycle.buffer.size=disabled</p>]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 安装 OpenOffice 服务小记]]></title>
      <url>http://blog.joylau.cn/2018/06/22/Linux-OpenOffice/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol>
<li><p>下载 rpm 包 ： 官网： <a href="https://www.openoffice.org/download/" target="_blank" rel="noopener">https://www.openoffice.org/download/</a></p>
</li>
<li><p>解压，进入 /zh-CN/RPMS/ ， 安装 rpm 包： <code>rpm -ivh *.rpm</code></p>
</li>
<li><p>安装完成后，生成 desktop-integration 目录，进入，因为我的系统是 centos 的 ，我选择安装 <code>rpm -ivh openoffice4.1.5-redhat-menus-4.1.5-9789.noarch.rpm</code></p>
</li>
<li><p>安装完成后，目录在 /opt/openoffice4 下<br> 启动： <code>/opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=0.0.0.0,port=8100;urp;&quot; -nofirststartwizard &amp;</code></p>
</li>
</ol>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li><p>libXext.so.6: cannot open shared object file: No such file or directory<br> 解决 ： <code>yum install libXext.x86_64</code></p>
</li>
<li><p>no suitable windowing system found, exiting.<br> 解决： <code>yum groupinstall &quot;X Window System&quot;</code></p>
</li>
</ol>
<p>之后再启动，查看监听端口 <code>netstat -lnp |grep 8100</code><br>已经可以了。</p>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> openoffice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch 文档文本内容搜索]]></title>
      <url>http://blog.joylau.cn/2018/06/21/Elasticsearch-ingest-attachment/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="http://image.joylau.cn/blog/attachment.gif" alt="IdiomsDictionary"></p>
<p><a href="https://github.com/JoyLau/es-doc-node" target="_blank" rel="noopener">https://github.com/JoyLau/es-doc-node</a></p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React 项目使用 IDEA 进行调试]]></title>
      <url>http://blog.joylau.cn/2018/06/20/React-DebugWithIDEA/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li><p>You would need to have WebStorm and JetBrains IDE Support Chrome extension installed.<br> 需要安装 JetBrains IDE Support 的 chrome 插件</p>
</li>
<li><p>In the WebStorm menu Run select Edit Configurations…. Then click + and select JavaScript Debug. Paste <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> into the URL field and save the configuration.<br> 在 Edit Configurations 选项里添加一个 JavaScript Debug 的项目，并且地址写上 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p>
</li>
</ol>
<blockquote>
<blockquote>
<p>Note: the URL may be different if you’ve made adjustments via the HOST or PORT environment variables.<br>    地址根据配置环境而异</p>
</blockquote>
</blockquote>
<ol start="3">
<li>Start your app by running npm start, then press ^D on macOS or F9 on Windows and Linux or click the green debug icon to start debugging in WebStorm.<br> 运行项目，点击 debug 按钮调试项目，注意在页面上开启插件的调试功能，此后就能像调式Java 一样调试 js 代码了。</li>
</ol>]]></content>
      
        <categories>
            
            <category> React篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS 修改 mac 地址]]></title>
      <url>http://blog.joylau.cn/2018/06/14/MacOS-ChangeMacAddr/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>公司的网络接入是需要 ip 地址和 mac 地址绑定在一起的，笔记接入的 WiFi 没绑定就无法上网，公司那么多电脑不用，就使用他们已经绑定好的 静态 IP 地址和 mac 地址来上网</p>
<ol>
<li>随机生成一个全新的MAC网卡地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>断开airport无线网卡连接</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改 mac 地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig en0 ether xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>
<p>xx:xx:xx:xx:xx:xx ＝输入你想要修改成的MAC地址来代替。</p>
<p>en0 ＝ 输入你想要修改成的网卡代替。一般 en0 就为无线网卡</p>
<ol start="4">
<li>重新打开网络</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networksetup -detectnewhardware</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MacOS篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch 分词插件的使用及 demo]]></title>
      <url>http://blog.joylau.cn/2018/06/12/Elasticsearch-Ik/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="http://image.joylau.cn/blog/idioms.gif" alt="IdiomsDictionary"></p>
<p><a href="https://github.com/JoyLau/es-doc-node" target="_blank" rel="noopener">https://github.com/JoyLau/es-doc-node</a></p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis 前后台时间传参格式化]]></title>
      <url>http://blog.joylau.cn/2018/05/23/MyBatis-DateFormat/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久不用 mybatis 了,今天突然遇到了一个时间参数的格式化问题…..<br>mysql 后台取出的时间格式的字段，传到前台变成了时间戳<br>一下就想到有一个注解进行格式化<br>可是半天想不到那个注解怎么写的了，于是一顿查</p>
<h2 id="记下来"><a href="#记下来" class="headerlink" title="记下来"></a>记下来</h2><p>以前经常使用的注解，现在都忘了，得记下来</p>
<ol>
<li>@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”,timezone=”GMT+8”) ： 后台 Date 类型转时间字符串，注意时区 （后台 -&gt; 前台）</li>
<li>@DateTimeFormat(pattern=”yyyy-MM-dd HH:mm:ss”) ：前台时间格式参数转为 javabean 的 Date 类型 （前台 -&gt; 后台）</li>
<li>@JSONField(name=”end_time”, format=”yyyy-MM-dd hh:mm:ss”) ： fastjson 专用，定义json 的 key，还有时间的格式化，也可以分别在 get set 方法上注解</li>
</ol>]]></content>
      
        <categories>
            
            <category> MyBatis篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch 集群安全控制]]></title>
      <url>http://blog.joylau.cn/2018/05/21/Elasticsearch-Security/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般我们搭建起来的 es 集群都可以通过默认的 9200 端口来进行 API 访问,这在局域网上没有什么大问题，如果说搭建的环境在公网上，这将埋下巨大的隐患，因为任何人都可以操作 API 来进行增删改查，这是多么的恐怖！！</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>集群环境： elasticsearch 5.3.0；centos 7.2</li>
<li>集群公网环境</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>elasticsearch 集群搭建完成后，通过制定的端口都可以访问，但是实际情况中，我们并不想这样。我们可能想只有固定的ip地址才能访问，或者需要用户名、密码才能访问<br>对于如何控制 Elasticsearch 的安全性，我详细查了下资料，现有如下解决方式</p>
<ol>
<li><p>官方的 x-pack 插件，收费的，一下子就觉得用不了了，截止现在（2018年5月21日16:23:19），有最新消息，在 ElasticON 2018 的开幕主题演讲中，x-pack 负责人在博客宣布将开放 X-Pack的代码，但是现在为止只是第一阶段完成，<br> 最后在博客中宣布在6.3版本，其中免费的X-Pack功能将包含在Elastic Stack的默认发行版中，所以说现在没戏</p>
</li>
<li><p>官方推荐的shield插件，再5.x的版本后已经集成到 x-pack里了，版本不适合，不用</p>
</li>
<li><p>elasticsearch-http-basic 插件， 已经不支持 5.x的版本了，没法用</p>
</li>
<li><p>ReadonlyREST : 官网地址： <a href="https://readonlyrest.com/download/" target="_blank" rel="noopener">https://readonlyrest.com/download/</a> elasticsearch 版的插件，是免费的， kibana 的插件是收费的，此法可用</p>
</li>
<li><p>使用 nginx 的 http-basic，可用</p>
</li>
</ol>
<h2 id="ReadonlyREST-插件的使用"><a href="#ReadonlyREST-插件的使用" class="headerlink" title="ReadonlyREST 插件的使用"></a>ReadonlyREST 插件的使用</h2><ol>
<li>官网选择 elasticsearch 的版本，填写邮箱地址，收到邮件后下载插件文件<br> 注意：只能通过官网填写邮箱的方式来进行下载，注意看的话，下载的地址后面有校验参数</li>
<li>运行 <code>bin/elasticsearch-plugin install file:///tmp/readonlyrest-1.16.19_es5.3.0.zip</code> 安装插件，注意是 file:// 再加上绝对路径<br> 卸载插件 <code>bin/elasticsearch-plugin remove readonlyrest</code></li>
<li>配置文件 readonlyrest.yml,这个比较坑，插件生成好之后，居然不生成 readonlyrest.yml，还需要我们自己配置，还不知道需要配置什么东西，没办法，只能去 github 上查看文档，<br>文档地址： <a href="https://github.com/beshu-tech/readonlyrest-docs/blob/master/elasticsearch.md" target="_blank" rel="noopener">https://github.com/beshu-tech/readonlyrest-docs/blob/master/elasticsearch.md</a> </li>
<li>文档说了很多，我找了半天才找到我需要的配置：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readonlyrest:</span></span><br><span class="line"><span class="attr">    prompt_for_basic_auth:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    access_control_rules:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">"::ADMIN::"</span></span><br><span class="line"><span class="attr">      auth_key:</span> <span class="attr">admin:12333</span></span><br></pre></td></tr></table></figure>
<p>此时启动 elasticsearch， 再次访问 localhost:9200 就会弹出输入用户名和密码的窗口，此时输入 admin/12333 即可看到接口信息，请求成功后，在日志里会看到 ALLOWED by { name: ‘::PERSONAL_GRP::’, p。。。 的日志信息。<br>想要屏蔽这样的日志信息，只需再 <code>auth_key</code> 下面加上配置 <code>verbosity: error</code> 即可。默认为 info</p>
<p>这里吐槽一下，ReadonlyREST 插件的文档是真的难读，可能是国外人和我们的思维方式不一样吧。</p>
<p>至此 ReadonlyREST 插件的使用就完毕了。</p>
<h2 id="nginx-http-basic-的使用"><a href="#nginx-http-basic-的使用" class="headerlink" title="nginx  http-basic 的使用"></a>nginx  http-basic 的使用</h2><p>利用 nginx 的反向代理，分配一个二级域名来进行使用</p>
<ol>
<li>一个二级域名，比如xxxx.joylau.cn</li>
<li>添加 nginx 的配置文件:/etc/nginx/conf.d/elasticsearch.conf, nginx 会默认读取 <code>/etc/nginx/conf.d/</code> 目录下的 *.conf的文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">upstream JoyElasticSearch &#123;</span><br><span class="line">        server localhost:port  weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xxxxx.joylau.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 提示信息</span></span><br><span class="line">        auth_basic <span class="string">"请输入账号密码"</span>;</span><br><span class="line">        <span class="comment"># 密码文件，最好写绝对路径</span></span><br><span class="line">        auth_basic_user_file /etc/nginx/conf.d/es-password;</span><br><span class="line">        autoindex on;</span><br><span class="line">        proxy_pass  http://JoyElasticSearch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里访问 xxxxx.joylau.cn 会被定向到 elasticsearch 的http端口<br><code>auth_basic_user_file</code> ：指的是密码文件，注意这里写绝对路径，防止出错</p>
<ol start="3">
<li>用户名，密码文件 es-password</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root:123</span></span><br><span class="line">root:Hx53TyjMWNmLo</span><br></pre></td></tr></table></figure>
<p>这里假设 用户名是root，密码是123（实际上不是123），该加密方式为 httpd 加密，怎么获取明文加密后的密文，这个在网上有很多的在线工具可以直接使用，这里不再赘述</p>
<ol start="4">
<li>保存并重新加载配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>访问 xxxxx.joylau.cn 就会提示输入用户名密码，输入正确即可。</p>
<p>至此，nginx  http-basic 就结束了</p>
<p>但是还有一个问题，就是直接访问 host + elasticsearch的端口也是可以访问的，解决这个问题，需要使用 iptables 来进行端口的限制访问。</p>
<h2 id="iptables-限制端口的访问"><a href="#iptables-限制端口的访问" class="headerlink" title="iptables 限制端口的访问"></a>iptables 限制端口的访问</h2><ol>
<li>禁用防火墙 <code>systemctl stop firewalld</code></li>
<li>禁用firewalld服务  <code>systemctl mask firewalld</code></li>
<li>安装iptables  <code>yum install -y iptables</code></li>
<li>开机自启 <code>systemctl enable iptables</code></li>
<li><p>启动 iptables <code>systemctl start iptables</code></p>
</li>
<li><p>查看现在的所有规则 <code>iptables -L -n</code></p>
</li>
<li>清空所有默认规则  <code>iptables -F</code></li>
<li>清空所有自定义规则  <code>iptables -X</code></li>
<li>添加限制规则 <code>iptables -A INPUT -p tcp --dport 9200 ! -s 127.0.0.1 -j DROP</code><br> 这句规则的意思是，除了本机，其他的地址都不允许 访问 9200 端口</li>
<li>保存：<code>service iptables save</code></li>
</ol>
<p>注： 后续想要删除这条规则的话<br>       直接修改 iptables.conf 文件后 <code>service iptables save</code><br>       或者 <code>iptables -L INPUT --line-numbers</code> 查看所有规则<br>       iptables -D INPUT 1 （注意，这个1是行号，num下面的数字）<br>       保存：<code>service iptables save</code></p>
<p>这样的话，其他机器就不能访问 elasticsearch 的http 服务的端口了，这能通过 配置好的二级域名来访问</p>
<p>至此配置结束</p>
<h2 id="集群环境下的配置"><a href="#集群环境下的配置" class="headerlink" title="集群环境下的配置"></a>集群环境下的配置</h2><p>在多个 elasticsearch 集群环境下，可配置一台机器作为负载均衡的机器，配置</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>即可，其他机器的配置 <code>http.enabled: false</code> ，即对外不提供 http 服务<br>访问的时候只需访问那台负载均衡的节点。</p>
<p>至此，文章结束。</p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- systemctl 托管自定义程序]]></title>
      <url>http://blog.joylau.cn/2018/05/18/Linux-Systemctl/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>系统 centos 7</li>
<li>能够开机启动</li>
<li>能够一键开启，关闭，重启</li>
</ol>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>注意文件编码的问题</p>
<ul>
<li>service 文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frp server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 可以包含的值为simple、forking、oneshot、dbus、notify、idel其中之一。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Type=forking</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 守护进程的PID文件，必须是绝对路径，强烈建议在Type=forking的情况下明确设置此选项</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># PIDFile=/project/frp_0.19.0_linux_amd64</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置启动服务是要执行的命令（命令+参数）</span></span></span><br><span class="line">ExecStart=/project/frp_0.19.0_linux_amd64/systemctl-frps start</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ExecStop=</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ExecReload=</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 当服务进程正常退出、异常退出、被杀死、超时的时候，是否重启系统该服务。进程通过正常操作被停止则不会被执行重启。可选值为：</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># no：默认值，表示任何时候都不会被重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># always：表示会被无条件重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># no-success：表示仅在服务进程正常退出时重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># on-failure：表示仅在服务进程异常退出时重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 所谓正常退出是指，退出码为“0”，或者到IGHUP, SIGINT, SIGTERM, SIGPIPE 信号之一，并且退出码符合 SuccessExitStatus= 的设置。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 所谓异常退出时指，退出码不为“0”，或者被强杀或者因为超时被杀死。</span></span></span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>文件放到 /usr/lib/systemd/system/ 下</p>
<p>Service 部分的启动、重启、停止命令全部要求使用绝对路径</p>
<p>如果单独运行的是命令，这个就已经足够了，但是如果运行一些守护进程的话或者更复杂的情况的话，需要单独写一个脚本来运行</p>
<p>关于 service 里面的详细配置可以参考： <a href="http://blog.51cto.com/littledevil/1912570" target="_blank" rel="noopener">http://blog.51cto.com/littledevil/1912570</a> </p>
<ul>
<li>脚本文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set service name</span></span><br><span class="line">SERVICE_NAME=frpServerService</span><br><span class="line">BIN_FILE_NAME=frps</span><br><span class="line"></span><br><span class="line"><span class="comment"># set basic executable environment, do not modify those lines</span></span><br><span class="line">BIN_HOME=$(dirname <span class="variable">$0</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;BIN_HOME&#125;</span>"</span> = <span class="string">"."</span> ]; <span class="keyword">then</span></span><br><span class="line">        BIN_HOME=$(<span class="built_in">pwd</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BIN_HOME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the service pid</span></span><br><span class="line">pid=`ps -ef|grep <span class="variable">$SERVICE_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"service <span class="variable">$&#123;SERVICE_NAME&#125;</span> already start with PID :<span class="variable">$pid</span>"</span></span><br><span class="line">     <span class="built_in">return</span> 0</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   nohup ./<span class="variable">$BIN_FILE_NAME</span> -c ./<span class="variable">$BIN_FILE_NAME</span>.ini &gt;/dev/null 2&gt;&amp;1 &amp; </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$SERVICE_NAME</span> : "</span></span><br><span class="line">   pid=`ps -ef|grep <span class="variable">$SERVICE_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"start <span class="variable">$&#123;SERVICE_NAME&#125;</span> successfully with PID: <span class="variable">$&#123;pid&#125;</span>"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"start <span class="variable">$&#123;SERIVCE_NAME&#125;</span> failed"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">debug</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ./<span class="variable">$&#123;BIN_FILE_NAME&#125;</span> -c ./<span class="variable">$&#123;BIN_FILE_NAME&#125;</span>.ini</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ -z <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> already stopped"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting down <span class="variable">$SERVICE_NAME</span> : "</span></span><br><span class="line">        check_pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">        <span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$&#123;check_pid&#125;</span>"</span> ]</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                check_pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">                <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;check_pid&#125;</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"stop <span class="variable">$&#123;SERVICE_NAME&#125;</span> with PID: <span class="variable">$&#123;pid&#125;</span>"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">   pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> (pid <span class="variable">$pid</span>) is running ..."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> is stopped"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  debug)</span><br><span class="line">        debug</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|debug&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>上面这个脚本是一个模板，包括了start，stop，status，restart，debug各个命令，是可以直接传参执行的<br>在一个文件上的 ExecStart= 就可以运行脚本文件 并传入 start 参数</p>
<p>注意： 如果运行的是守护进程的话，Type=forking 要配置上，意指 ExecStart 命令里面运行进程才是主进程</p>
<h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><ol>
<li>启动服务：systemctl start serviceName</li>
<li>停止服务：systemctl stop serviceName</li>
<li>服务状态：systemctl status serviceName</li>
<li>项目日志：journalctl -u serviceName</li>
<li>开机启动：systemctl enable serviceName</li>
<li>重新加载service文件：systemctl daemon-reload</li>
</ol>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- 闲置笔记本安装 Centos]]></title>
      <url>http://blog.joylau.cn/2018/05/17/Linux-NoteBookPC/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>以前的笔记本是 windows7 的操作系统</li>
<li>6GB 内存</li>
<li>还剩 96G 硬盘</li>
<li>打算安装 Centos 7.2</li>
</ol>
<h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ol>
<li>U 盘一个（&gt;= 8G）</li>
<li>centos 镜像文件</li>
<li>刻录软件 UltraISO （官网直接下载试用版的即可）</li>
</ol>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol>
<li>在 windows 系统下压缩出磁盘空间或者直接格式化一个盘出来用来装 centos ，注意盘的格式 要为fat32</li>
<li>UltraISO 烧录镜像到U盘，U盘会被磁盘格式会改变且会被格式化</li>
<li>重启系统，以U盘启动</li>
<li>指定U盘安装</li>
<li>安装配置</li>
<li>等待进入系统</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>在 U 盘启动的时候，在安装界面上会有三个选项，选择第一个 Install Centos，按tab键进行配置</li>
<li>找到U盘位置的方法： <code>vmlinuz initrd=initrd.img linux dd</code></li>
<li>这个时候很容易找到 U 的device，记下来(我当时U的device是 sdb4)，重启机器，在进入上一步的步骤</li>
<li>这时，将参数改为 ： <code>vmlinuz initrd=initrd.img inst.stage2=hd:/dev/sdb4</code> 接下来等待即可</li>
<li>选择安装位置，下方一定要选择自定义分区</li>
<li>分区策略就选默认的，创建新的分区，分区的大小就按照默认分配的就好，不需要改变</li>
</ol>
<h2 id="WiFi-问题"><a href="#WiFi-问题" class="headerlink" title="WiFi 问题"></a>WiFi 问题</h2><p>因为笔记本自带了 wifi 模块，想着不要用网线扯来扯去的，直接用wifi连接网络就好了啊<br>一切都没想象的那么简单….</p>
<p>因为我之前安装的时候选择了最小化安装，进去系统后什么都没有，一起都用通过命令行来解决<br>第一次我是根据这篇文章的步骤来的 <a href="http://www.jb51.net/article/100300.htm" target="_blank" rel="noopener">http://www.jb51.net/article/100300.htm</a><br>中间遇到了很多问题 network 服务不可用；systemctl restart network 也起不来，一直报错；ping 域名不通，ping ip 不通；ifconfig 命令不存在….总之一大堆问题<br>问题一个个解决，最后终于连上家里的wifi<br>后来重启了下，一切回到解放前<br>我去….<br>一顿惆怅<br>后来我装了个gnome图形界面，连上了wifi<br>在切换命令行使用，不使用图形界面，现在一切完好，而且内存占用空间大幅减少</p>
<h2 id="WiFi-连接命令"><a href="#WiFi-连接命令" class="headerlink" title="WiFi 连接命令"></a>WiFi 连接命令</h2><ol>
<li>设置NetworkManager自动启动<br> chkconfig NetworkManager on</li>
<li>安装NetworkManager-wifi<br> yum -y install NetworkManager-wifi</li>
<li>开启WiFi<br> nmcli r wifi on</li>
<li>测试（扫描信号）<br> nmcli dev wifi<br> 扫描不到可用 iw wlp8s0b1(网卡名称) scan | grep SSID 扫描一下</li>
<li>连接<br> nmcli dev wifi connect password</li>
</ol>
<p>注： 总结多次安装 centos 系统得出一个结论，如果在安装过程中选择打开 WiFi 并连接网络，系统安装完成后，会在 /etc/sysconfig/network-scripts/ 目录下生成一个 ifcfg-WiFi名称 文件和 keys-WiFi名称的密码文件，之后安装 NetworkManage-wifi 便可每次开机都能自动启动 WiFi，如果是装完系统在命令连接的话则每次重启后都需要自己手动连接 WiFi，这是扫描原因暂且不得而知</p>
<h2 id="切换命令行和图形界面"><a href="#切换命令行和图形界面" class="headerlink" title="切换命令行和图形界面"></a>切换命令行和图形界面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default multi-user.target  //设置成命令模式</span><br><span class="line">systemctl set-default graphical.target  //设置成图形模式</span><br></pre></td></tr></table></figure>
<h2 id="关闭盖子不睡眠"><a href="#关闭盖子不睡眠" class="headerlink" title="关闭盖子不睡眠"></a>关闭盖子不睡眠</h2><p>vim /etc/systemd/logind.conf  </p>
<p>HandlePowerKey　　　　  按下电源键后会触发的行为<br>HandleSleepKey　　 　　 按下挂起键后会触发的行为<br>HandleHibernateKey  　　按下休眠键后会触发的行为<br>HandleLidSwitch　　 　　关闭笔记本盖子后会触发的行为</p>
<p>只需要把HandleLidSwitch选项设置为 HandleLidSwitch=lock </p>
<p>设置完成保存后运行 systemctl restart systemd-logind 命令才生效</p>
<h2 id="恢复-Windows-启动项"><a href="#恢复-Windows-启动项" class="headerlink" title="恢复 Windows 启动项"></a>恢复 Windows 启动项</h2><p>windows 7、8/10 安装centos7双系统后，默认会将mbr改写成为grub2，而默认的centos7不识别windows 的ntfs分区，所以启动项没有windows。<br>可以用3条命令，即可将windows添加到grub2的启动项。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install ntfs-3g</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<p>重启</p>
<h2 id="最小化安装时配置静态-IP-地址"><a href="#最小化安装时配置静态-IP-地址" class="headerlink" title="最小化安装时配置静态 IP 地址"></a>最小化安装时配置静态 IP 地址</h2><ol>
<li><p>vim /etc/sysconfig/network-scripts/ifcfg-网络接口名称,默认第一个是网络接口名称</p>
</li>
<li><p>修改以下红色标注的配置</p>
<p> TYPE=Ethernet</p>
 <font color="red" size="3">BOOTPROTO=static</font>

<p> DEFROUTE=yes</p>
<p> IPV4_FAILURE_FATAL=no</p>
<p> IPV6INIT=yes</p>
<p> IPV6_AUTOCONF=yes</p>
<p> IPV6_DEFROUTE=yes</p>
<p> IPV6_FAILURE_FATAL=no</p>
<p> NAME=eno16777736</p>
<p> UUID=9e8d604f-d991-4aa2-88a3-4c679e6f139c</p>
<p> DEVICE=eno16777736</p>
<p> ONBOOT=yes</p>
<p> PEERDNS=yes</p>
<p> PEERROUTES=yes</p>
<p> IPV6_PEERDNS=yes</p>
<p> IPV6_PEERROUTES=yes</p>
<p> <font color="red" size="3">HWADDR=B8:70:F4:24:61:A7</font>  #MAC地址</p>
<p> <font color="red" size="3">IPADDR=192.168.10.29</font>     #静态IP</p>
<p> <font color="red" size="3">GATEWAY=192.168.10.1</font>     #默认网关</p>
<p> <font color="red" size="3">NETMASK=255.255.255.0</font>    #子网掩码</p>
<p> <font color="red" size="3">DNS1=61.132.163.68</font>       #DNS配置</p>
</li>
<li><p>重启网络服务 ：service network restart</p>
</li>
</ol>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lombok 注解小记]]></title>
      <url>http://blog.joylau.cn/2018/05/15/Lombok/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>val可以将变量申明是final类型。</li>
<li>@NonNull注解能够为方法或构造函数的参数提供非空检查。</li>
<li>@Cleanup注解能够自动释放资源。</li>
<li>@Getter/@Setter注解可以针对类的属性字段自动生成Get/Set方法。</li>
<li>@ToString注解，为使用该注解的类生成一个toString方法，默认的toString格式为：ClassName(fieldName= fieleValue ,fieldName1=fieleValue)。</li>
<li>@EqualsAndHashCode注解，为使用该注解的类自动生成equals和hashCode方法。</li>
<li>@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor,这几个注解分别为类自动生成了无参构造器、指定参数的构造器和包含所有参数的构造器。</li>
<li>@Data注解作用比较全，其包含注解的集合 @ToString， @EqualsAndHashCode，所有字段的 @Getter和所有非final字段的 @Setter, @RequiredArgsConstructor。</li>
<li>@Builder注解提供了一种比较推崇的构建值对象的方式。</li>
<li>@Synchronized注解类似Java中的Synchronized 关键字，但是可以隐藏同步锁</li>
</ul>
<p>官网地址： <a href="https://www.projectlombok.org/features/all" target="_blank" rel="noopener">https://www.projectlombok.org/features/all</a></p>]]></content>
      
        <categories>
            
            <category> 工具类篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Filebeat 实时收集 Nginx 日志]]></title>
      <url>http://blog.joylau.cn/2018/05/08/Filebeat-Nginx/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>Filebeat 版本为 5.3.0<br> 之所以使用 beats 家族的 Filebeat 来替代 Logstash 是因为 Logstash 实在太消耗资源了（服务器资源充足的土豪请无视）<br> 在官网下载 Logstash 有 89M，而 Filebeat 才8.4M，由此可见一斑<br> Logstash 可以配置 jvm 参数，经过我本身的调试，内存分配小了，启动很慢有时根本起不来，分配大了，其他服务就没有资源了<br> 所有说对于配置低的服务器，选择 Filebeat 是最好的选择了，而且现在 Filebeat 已经开始替代 Logstash 了</li>
<li>依然需要修改 nginx 的日志格式</li>
</ol>
<h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx.config"></a>nginx.config</h2><p>更改日志记录的格式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                         <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                         <span class="string">'"status": "$status", '</span></span><br><span class="line">                         <span class="string">'"host": "$host", '</span></span><br><span class="line">                         <span class="string">'"request": "$request", '</span></span><br><span class="line">                         <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                         <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                         <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                         <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure>
<h2 id="filebeat-yml"><a href="#filebeat-yml" class="headerlink" title="filebeat.yml"></a>filebeat.yml</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========================== Filebeat prospectors =============================</span></span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line"></span><br><span class="line">- input_type: <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Paths that should be crawled and fetched. Glob based paths.</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/*access*.<span class="built_in">log</span></span><br><span class="line">  json.keys_under_root: <span class="literal">true</span></span><br><span class="line">  json.overwrite_keys: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------- Elasticsearch output ------------------------------</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  hosts: [<span class="string">"ip:port"</span>,<span class="string">"ip:port"</span>]</span><br><span class="line">  index: <span class="string">"filebeat_server_nginx_%&#123;+YYYY-MM&#125;"</span></span><br></pre></td></tr></table></figure>
<p>这里面需要注意的是<br>json.keys_under_root： 默认这个值是FALSE的，也就是我们的json日志解析后会被放在json键上。设为TRUE，所有的keys就会被放到根节点<br>json.overwrite_keys: 是否要覆盖原有的key，这是关键配置，将keys_under_root设为TRUE后，再将overwrite_keys也设为TRUE，就能把filebeat默认的key值给覆盖了</p>
<p>还有其他的配置<br>json.add_error_key：添加json_error key键记录json解析失败错误<br>json.message_key：指定json日志解析后放到哪个key上，默认是json，你也可以指定为log等。</p>
<p>说白了，差别就是，未配置前elasticsearch的数据是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"_index"</span>: <span class="string">"filebeat_server_nginx_2018-05"</span>,</span><br><span class="line">	<span class="attr">"_type"</span>: <span class="string">"log"</span>,</span><br><span class="line">	<span class="attr">"_id"</span>: <span class="string">"AWM9sVOkCcRcg0IPg399"</span>,</span><br><span class="line">	<span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">"_source"</span>: &#123;</span><br><span class="line">		<span class="attr">"@timestamp"</span>: <span class="string">"2018-05-08T03:00:17.544Z"</span>,</span><br><span class="line">		<span class="attr">"beat"</span>: &#123;</span><br><span class="line">			<span class="attr">"hostname"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line">			<span class="attr">"version"</span>: <span class="string">"5.3.0"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"input_type"</span>: <span class="string">"log"</span>,</span><br><span class="line">		<span class="attr">"json"</span>: &#123;&#125;,</span><br><span class="line">		"message": "&#123; "@timestamp": "2018-05-08T11:00:11+08:00", "time": "2018-05-08T11:00:11+08:00", "remote_addr": "113.16.251.67", "remote_user": "-", "body_bytes_sent": "403", "request_time": "0.000", "status": "200", "host": "blog.joylau.cn", "request": "GET /img/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90.png HTTP/1.1", "request_method": "GET", "uri": "/img/\xE7\xBD\x91\xE6\x98\x93\xE4\xBA\x91\xE9\x9F\xB3\xE4\xB9\x90.png", "http_referrer": "http://blog.joylau.cn/css/style.css", "body_bytes_sent":"403", "http_x_forwarded_for": "-", "http_user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36" &#125;",</span><br><span class="line">		"offset": 7633,</span><br><span class="line">		"source": "/var/log/nginx/access.log",</span><br><span class="line">		"type": "log"</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置后，是这样的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"_index"</span>: <span class="string">"filebeat_server_nginx_2018-05"</span>,</span><br><span class="line">	<span class="attr">"_type"</span>: <span class="string">"log"</span>,</span><br><span class="line">	<span class="attr">"_id"</span>: <span class="string">"AWM9rjLd8mVZNgvhdnN9"</span>,</span><br><span class="line">	<span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">"_source"</span>: &#123;</span><br><span class="line">		<span class="attr">"@timestamp"</span>: <span class="string">"2018-05-08T02:56:50.000Z"</span>,</span><br><span class="line">		<span class="attr">"beat"</span>: &#123;</span><br><span class="line">			<span class="attr">"hostname"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line">			<span class="attr">"version"</span>: <span class="string">"5.3.0"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"body_bytes_sent"</span>: <span class="string">"12576"</span>,</span><br><span class="line">		<span class="attr">"host"</span>: <span class="string">"blog.joylau.cn"</span>,</span><br><span class="line">		<span class="attr">"http_referrer"</span>: <span class="string">"http://blog.joylau.cn/"</span>,</span><br><span class="line">		<span class="attr">"http_user_agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36"</span>,</span><br><span class="line">		<span class="attr">"http_x_forwarded_for"</span>: <span class="string">"-"</span>,</span><br><span class="line">		<span class="attr">"input_type"</span>: <span class="string">"log"</span>,</span><br><span class="line">		<span class="attr">"offset"</span>: <span class="number">3916</span>,</span><br><span class="line">		<span class="attr">"remote_addr"</span>: <span class="string">"60.166.12.138"</span>,</span><br><span class="line">		<span class="attr">"remote_user"</span>: <span class="string">"-"</span>,</span><br><span class="line">		<span class="attr">"request"</span>: <span class="string">"GET /2018/03/01/JDK8-Stream-Distinct/ HTTP/1.1"</span>,</span><br><span class="line">		<span class="attr">"request_method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">		<span class="attr">"request_time"</span>: <span class="string">"0.000"</span>,</span><br><span class="line">		<span class="attr">"source"</span>: <span class="string">"/var/log/nginx/access.log"</span>,</span><br><span class="line">		<span class="attr">"status"</span>: <span class="string">"200"</span>,</span><br><span class="line">		<span class="attr">"time"</span>: <span class="string">"2018-05-08T10:56:50+08:00"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"log"</span>,</span><br><span class="line">		<span class="attr">"uri"</span>: <span class="string">"/2018/03/01/JDK8-Stream-Distinct/index.html"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样看起来就很舒服了</p>
<h2 id="启动-FileBeat"><a href="#启动-FileBeat" class="headerlink" title="启动 FileBeat"></a>启动 FileBeat</h2><p>进入 Filebeat 目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sudo ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>nginx 的日志里含有中文的话，会将中文转为 Unicode 编码，如果不转的话，加入 <code>escape=json</code> 参数就可以了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json escape=json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                             <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                             <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                             <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                             <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                             <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                             <span class="string">'"status": "$status", '</span></span><br><span class="line">                             <span class="string">'"host": "$host", '</span></span><br><span class="line">                             <span class="string">'"request": "$request", '</span></span><br><span class="line">                             <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                             <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                             <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                             <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                             <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                             <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                        <span class="string">'&#125;'</span>;</span><br><span class="line">    </span><br><span class="line">        access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Filebeat </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Logstash 实时收集 Nginx 日志]]></title>
      <url>http://blog.joylau.cn/2018/05/08/Logstash-Nginx/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>logstash 需要和 nginx 部署到一台机器<br>需要修改 nginx 的日志格式</p>
<h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx.config"></a>nginx.config</h2><p>更改日志记录的格式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                         <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                         <span class="string">'"status": "$status", '</span></span><br><span class="line">                         <span class="string">'"host": "$host", '</span></span><br><span class="line">                         <span class="string">'"request": "$request", '</span></span><br><span class="line">                         <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                         <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                         <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                         <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure>
<h2 id="log-file-config"><a href="#log-file-config" class="headerlink" title="log-file.config"></a>log-file.config</h2><p>input 里添加 file 类型</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">        codec =&gt; <span class="string">"json"</span></span><br><span class="line">        start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"server_nginx"</span></span><br><span class="line">        tags =&gt; [<span class="string">"nginx"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Logstash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELK(Elasticsearch + Logstash + Kibana) 日志分析平台搭建及 SpringBoot 如何实时发送日志存储到 ELK 平台]]></title>
      <url>http://blog.joylau.cn/2018/05/07/Elasticsearch-ELK/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>Elasticsearch， Logstash，Kibana 版本都是5.3.0</li>
<li>SpringBoot 集成 ELK，实际上指的就是 SpringBoot 与 Logstash 的整合</li>
<li>Elasticsearch 负责数据的存储，Logstash 负责数据的接受和数据的发送，相当于一个中转站，Kibana 负责数据的展示，查询</li>
<li>SpringBoot 项目是我们产生日志并且需要存储和分析的项目</li>
<li>SpringBoot 我还是使用的默认的 logback 日志系统，当然也可以采用 log4j,不过我还是比较喜欢 logback，性能好，配置少，有颜色</li>
</ol>
<h2 id="Elasticsearch-集群搭建"><a href="#Elasticsearch-集群搭建" class="headerlink" title="Elasticsearch 集群搭建"></a>Elasticsearch 集群搭建</h2><p>略</p>
<h2 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h2><ol>
<li>官网下载 Logstash</li>
<li>解压</li>
<li>添加配置文件 log.config</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"dev"</span></span><br><span class="line">        tags =&gt; [<span class="string">"spring-boot"</span>]</span><br><span class="line">        port =&gt; 4560</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"server"</span></span><br><span class="line">        tags =&gt; [<span class="string">"spring-boot"</span>]</span><br><span class="line">        port =&gt; 4561</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"work_dev"</span></span><br><span class="line">        tags =&gt; [<span class="string">"boot"</span>]</span><br><span class="line">        port =&gt; 4568</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        <span class="keyword">if</span>[<span class="built_in">type</span>] == <span class="string">"work_dev"</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">                        hosts =&gt; [<span class="string">"ip:9268"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"logstash_%&#123;type&#125;_%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">                        hosts =&gt; [<span class="string">"http://192.168.10.232:9211"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"logstash_%&#123;type&#125;_%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>总的来说，配置文件里由 input，filter，output，这里我没有特别复杂的需求，filter就没有配置<br>我这里有三个input，但是都是 tcp 类型的<br>意思配置了三个input,分别监听192.168.10.78（就是安装logstash的机器）的4560，4561，和4568端口，有数据发送过来的话就进行output处理<br>这里我配置了3个type,这个type也就是elasticsearch里索引的type，并且该type可作为参数在output里判断进行不同的处理<br>codec 是的对日志数据进行处理的插件，这里是 json_lines<br>所以需要安装插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure>
<p>elasticsearch:hosts es的http地址和端口<br>index 是创建的索引名<br>如果要配置索引模板的话，可以添加以下配置<br>    manage_template =&gt; true<br>    template_name =&gt; “template_name”<br>    template_overwrite =&gt; true<br>    template =&gt; “/usr/local/path.json”</p>
<p>配置好了，我们检验下配置文件是否正确</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /app/logstash-5.3.0/bin/logstash -f /app/logstash-5.3.0/config/log.config -t</span><br></pre></td></tr></table></figure>
<p>没有问题的话就可启动了,后台启动的就用 nohup</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /app/logstash-5.3.0/bin/logstash -f /app/logstash-5.3.0/config/log.config</span><br></pre></td></tr></table></figure>
<p>启动成功的话，9600端口可以获取到 logstash 的相关信息</p>
<h2 id="SpringBoot-集成-Logstash"><a href="#SpringBoot-集成-Logstash" class="headerlink" title="SpringBoot 集成 Logstash"></a>SpringBoot 集成 Logstash</h2><ol>
<li>添加依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>添加配置 logstash 文件<br>在 resources 下直接添加 logback.xml 文件即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>ip:4568<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我是使用的是 SpringBoot 自带的 logback 日志<br>SpringBoot 默认会读取 resources 目录下的 logback.xml 作为配置文件，别问我怎么知道的（我特地查看了源码：org.springframework.boot.logging.logback.LogbackLoggingSystem，”logback-test.groovy”, “logback-test.xml”, “logback.groovy”, “logback.xml”这些文件检测到都会读取其中的配置的）<br>配置文件里我只配置了 一个Appender，就是net.logstash.logback.appender.LogstashTcpSocketAppender，用来输出日志到logstash的，并且级别是 INFO<br>destination 指的就是 logstash 的地址<br>encoder 就配置LogstashEncoder不要变<br>再把 SpringBoot默认的配置引入base.xml</p>
<p>好了，SpringBoot 集成 Logstash 完毕</p>
<p>注 ：后来我想用 javaConfig 去配置 SpringBoot和Logstash，不过没有成功，哪位大佬看到这个信息，可以给我留言下怎么配置<br>xml,也很方便，打包部署后可以作为配置文件修改</p>
<p>那么，这个时候启动项目，elasticsearch里面就会看到有新的索引数据了</p>
<h2 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h2><ol>
<li>其实 Kibana 非必须安装，只是用来统计数据和查询数据的，用来提供一个可视化的界面</li>
<li>下载 Kibana</li>
<li>修改配置文件 kibana.yml<br> server.port: 5668<br> server.host: “0.0.0.0”<br> elasticsearch.url: “<a href="http://localhost:9268&quot;" target="_blank" rel="noopener">http://localhost:9268&quot;</a></li>
<li>后台启动</li>
<li>访问kibana的地址即可</li>
</ol>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch 集群搭建]]></title>
      <url>http://blog.joylau.cn/2018/05/07/Elasticsearch-Cluster/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>机器三台</li>
<li>彼此间内网不同，公网可通（因为这个问题花费了很长时间,配置文件里有我的理解说明）</li>
<li>机器配置很低，需要调节jvm参数来优化</li>
<li>elasticsearch 版本为 5.3.0</li>
</ol>
<h2 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a>elasticsearch.yml</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: joylau-es</span><br><span class="line">node.name: joylau</span><br><span class="line"><span class="comment"># 有资格作为主节点</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 节点存储数据</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 绑定的ip地址</span></span><br><span class="line"><span class="comment"># 这里原来默认的是 network.host,如果配置了network.host，则一下2个配置的属性都为network.host的值</span></span><br><span class="line"><span class="comment"># 集群中各个节点内网不通，集群搭建不起来的原因就在这里，我也是查阅了大量资料，花费了好长时间，才搞明白</span></span><br><span class="line"><span class="comment"># 绑定地址，这里配置任何ip都能访问</span></span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line"><span class="comment"># 这里配置该节点的公网IP地址，在集群启动时就不会使用默认内网地址寻找策略，就会以配置的公网地址来寻找该节点</span></span><br><span class="line">network.publish_host: ip</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">http.port: 9268</span><br><span class="line">transport.tcp.port: 9368</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment"># 集群的各个节点配置</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"ip1:9368"</span>, <span class="string">"ip2:9368"</span>, <span class="string">"ip3:9368"</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Prevent the "split brain" by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):</span></span><br><span class="line"><span class="comment"># 上句话的意思是采取过半原则的策略配置节点数，为了防止“脑裂”情况，数量建议为 (节点总数/2) + 1</span></span><br><span class="line"><span class="comment"># 我的理解就是最少有多少个节点的时候开始选取主节点，这里我配置的1，比如说我现在有3个几点，其中一个节点的网络断了</span></span><br><span class="line"><span class="comment"># 如果配置的2 的话，那么有2个节点的会投票选取主节点，成为一个集群，剩下的那个节点无法选取主节点而挂了</span></span><br><span class="line"><span class="comment"># 如果配置的 1 的话，剩下的那个节点就会自己成为主节点而单独成为一个集群，这样就有2个集群了</span></span><br><span class="line"><span class="comment"># 说了这么多，大致的意思就是这样，我是这么理解的</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">discovery.zen.minimum_master_nodes: 1</span><br></pre></td></tr></table></figure>
<p>剩下没贴出配置的都是默认配置</p>
<p>依照改配置，在各个节点上修改节点名称及network.publish_host，要保证集群名称一样就可以了。</p>
<h2 id="jvm-options"><a href="#jvm-options" class="headerlink" title="jvm.options"></a>jvm.options</h2><p>主要配置<br>     -Xms1400m<br>     -Xmx1400m</p>
<p>我这里的机器是2G的运存，经过我的反复调试，能给出elasticsearch最大的内存空间就是1400m了，给多了跑步起来，给少了有不能完全发挥elasticsearch的性能优势<br>机器差，没办法<br>还有一点注意的是初始化内存大小个最大内存大小的配置数值要是一样的，否则会启动出错</p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS 垃圾清理]]></title>
      <url>http://blog.joylau.cn/2018/04/01/MacOS-CleanMac/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>GarageBand，这个是系统上的模拟乐器，一般都使用不到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /Library/Application\ Support/GarageBand</span><br><span class="line">rm -rf /Library/Application\ Support/Logic</span><br><span class="line">rm -rf /Library/Audio/Apple\ Loops</span><br></pre></td></tr></table></figure>
<p>但是有些系统文件显示占用的空间很大，该怎么看呢</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
<p>这个命令用来查看根目录下，所有文件的大小分布</p>
<p>比如，我的电脑 Library 文件路径最大</p>
<p>那就在进入 Library 文件路径，再执行 du -sh *</p>
<p>直至找到占用内存最大的文件,然后结合实际情况,进行删减</p>]]></content>
      
        <categories>
            
            <category> MacOS篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> MacBookPro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringSecurity Session并发过期后会重定向到 /login (入口点问题)问题的解决]]></title>
      <url>http://blog.joylau.cn/2018/03/30/SpringBoot-SpringSecurity-EntryPoint/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 SpringSecurity 中，我想配置一个关于session并发的控制，于是我是这样配置的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http</span><br><span class="line">               .sessionManagement()</span><br><span class="line">               .invalidSessionStrategy(<span class="keyword">new</span> InvalidSessionStrategyImpl())</span><br><span class="line">               .maximumSessions(-<span class="number">1</span>).expiredSessionStrategy(expiredSessionStrategy())<span class="comment">//配置并发登录，-1表示不限制</span></span><br><span class="line">               .sessionRegistry(sessionRegistry());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>上下文的配置我在此省略了</p>
<p>这里设置 maximumSessions 为 -1,表示不限制同一账号登录的客户端数</p>
<p>session过期后执行的逻辑是进入我自定义的类 expiredSessionStrategy() 中</p>
<p>因为我是构建的 rest 服务，所以我是返回的 http 状态码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpiredSessionStrategyImpl</span> <span class="keyword">implements</span> <span class="title">SessionInformationExpiredStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        event.getResponse().sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,</span><br><span class="line">                JSONObject.toJSONString(MessageBody.failure(<span class="number">405</span>,<span class="string">"not login or login has been expired"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，问题就来了</p>
<p>我测试的时候，把 -1 改成了 1，之后登录同一个用户，后面登录的用户会把前面一个已经登录的用户挤下线，就是说之前登录的那个用户的session 会过期</p>
<p>就是说他所在的页面再发送任何请求的话会收到我返回的 405 状态码</p>
<p>在这里是没问题的</p>
<p>问题就在发完一个请求后，在发一个请求，在浏览器的 network 上会看到发出的请求会被重定向的 /login 请求上</p>
<p>后续再发任何请求都会被重定向到 /login 上</p>
<h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p>为什么会出现这样的情况呢？</p>
<p>为什么会第一个请求会收到405的状态码，后续的请求会被重定向到 /login 呢？</p>
<p>通过 debug 断点，我定位到过滤器的前置执行方法 beforeInvocation() 上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> InterceptorStatusToken <span class="title">beforeInvocation</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">		Assert.notNull(object, <span class="string">"Object was null"</span>);</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!getSecureObjectClass().isAssignableFrom(object.getClass())) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">					<span class="string">"Security invocation attempted for object "</span></span><br><span class="line">							+ object.getClass().getName()</span><br><span class="line">							+ <span class="string">" but AbstractSecurityInterceptor only configured to support secure objects of type: "</span></span><br><span class="line">							+ getSecureObjectClass());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Collection&lt;ConfigAttribute&gt; attributes = <span class="keyword">this</span>.obtainSecurityMetadataSource()</span><br><span class="line">				.getAttributes(object);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (attributes == <span class="keyword">null</span> || attributes.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (rejectPublicInvocations) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">						<span class="string">"Secure object invocation "</span></span><br><span class="line">								+ object</span><br><span class="line">								+ <span class="string">" was denied as public invocations are not allowed via this interceptor. "</span></span><br><span class="line">								+ <span class="string">"This indicates a configuration error because the "</span></span><br><span class="line">								+ <span class="string">"rejectPublicInvocations property is set to 'true'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (debug) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Public object - authentication not attempted"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			publishEvent(<span class="keyword">new</span> PublicInvocationEvent(object));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// no further work post-invocation</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (debug) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Secure object: "</span> + object + <span class="string">"; Attributes: "</span> + attributes);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			credentialsNotFound(messages.getMessage(</span><br><span class="line">					<span class="string">"AbstractSecurityInterceptor.authenticationNotFound"</span>,</span><br><span class="line">					<span class="string">"An Authentication object was not found in the SecurityContext"</span>),</span><br><span class="line">					object, attributes);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Authentication authenticated = authenticateIfRequired();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Attempt authorization</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (AccessDeniedException accessDeniedException) &#123;</span><br><span class="line">			publishEvent(<span class="keyword">new</span> AuthorizationFailureEvent(object, attributes, authenticated,</span><br><span class="line">					accessDeniedException));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">throw</span> accessDeniedException;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (debug) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Authorization successful"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (publishAuthorizationSuccess) &#123;</span><br><span class="line">			publishEvent(<span class="keyword">new</span> AuthorizedEvent(object, attributes, authenticated));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Attempt to run as a different user</span></span><br><span class="line">		Authentication runAs = <span class="keyword">this</span>.runAsManager.buildRunAs(authenticated, object,</span><br><span class="line">				attributes);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (runAs == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (debug) &#123;</span><br><span class="line">				logger.debug(<span class="string">"RunAsManager did not change Authentication object"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// no further work post-invocation</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> InterceptorStatusToken(SecurityContextHolder.getContext(), <span class="keyword">false</span>,</span><br><span class="line">					attributes, object);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (debug) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Switching to RunAs Authentication: "</span> + runAs);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			SecurityContext origCtx = SecurityContextHolder.getContext();</span><br><span class="line">			SecurityContextHolder.setContext(SecurityContextHolder.createEmptyContext());</span><br><span class="line">			SecurityContextHolder.getContext().setAuthentication(runAs);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// need to revert to token.Authenticated post-invocation</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> InterceptorStatusToken(origCtx, <span class="keyword">true</span>, attributes, object);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>问题出在了 SecurityContextHolder.getContext().getAuthentication() == null</p>
<p>getAuthentication() 为 null，于是进入了credentialsNotFound(),抛出了 AuthenticationCredentialsNotFoundException 异常</p>
<p>确实，在控制台上也能看到抛出的异常信息</p>
<h2 id="问题深入"><a href="#问题深入" class="headerlink" title="问题深入"></a>问题深入</h2><p>AuthenticationCredentialsNotFoundException 是 AuthenticationException 异常的子类</p>
<p>不仅仅是 AuthenticationCredentialsNotFoundException 还有其他很多异常都是异常的子类</p>
<p>既然抛出了异常，猜测肯定是被某个处理器给处理了而且处理的默认机制是重定向到 /login </p>
<p>于是继续搜索 SpringSecurity 异常处理器</p>
<p>我找到的答案是 ExceptionTranslationFilter </p>
<p>ExceptionTranslationFilter 是Spring Security的核心filter之一，用来处理AuthenticationException和AccessDeniedException两种异常（由FilterSecurityInterceptor认证请求返回的异常）</p>
<p>ExceptionTranslationFilter 对异常的处理是通过这两个处理类实现的，处理规则很简单：</p>
<p>规则1. 如果异常是 AuthenticationException，使用 AuthenticationEntryPoint 处理<br>规则2. 如果异常是 AccessDeniedException 且用户是匿名用户，使用 AuthenticationEntryPoint 处理<br>规则3. 如果异常是 AccessDeniedException 且用户不是匿名用户，如果否则交给 AccessDeniedHandler 处理。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleSpringSecurityException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response, FilterChain chain, RuntimeException exception)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AuthenticationException) &#123;</span><br><span class="line">			logger.debug(</span><br><span class="line">					<span class="string">"Authentication exception occurred; redirecting to authentication entry point"</span>,</span><br><span class="line">					exception);</span><br><span class="line"></span><br><span class="line">			sendStartAuthentication(request, response, chain,</span><br><span class="line">					(AuthenticationException) exception);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span><br><span class="line">			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">			<span class="keyword">if</span> (authenticationTrustResolver.isAnonymous(authentication) || authenticationTrustResolver.isRememberMe(authentication)) &#123;</span><br><span class="line">				logger.debug(</span><br><span class="line">						<span class="string">"Access is denied (user is "</span> + (authenticationTrustResolver.isAnonymous(authentication) ? <span class="string">"anonymous"</span> : <span class="string">"not fully authenticated"</span>) + <span class="string">"); redirecting to authentication entry point"</span>,</span><br><span class="line">						exception);</span><br><span class="line"></span><br><span class="line">				sendStartAuthentication(</span><br><span class="line">						request,</span><br><span class="line">						response,</span><br><span class="line">						chain,</span><br><span class="line">						<span class="keyword">new</span> InsufficientAuthenticationException(</span><br><span class="line">								<span class="string">"Full authentication is required to access this resource"</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				logger.debug(</span><br><span class="line">						<span class="string">"Access is denied (user is not anonymous); delegating to AccessDeniedHandler"</span>,</span><br><span class="line">						exception);</span><br><span class="line"></span><br><span class="line">				accessDeniedHandler.handle(request, response,</span><br><span class="line">						(AccessDeniedException) exception);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>我们这里的异常是 AuthenticationException ，紧接着就找 sendStartAuthentication() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendStartAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response, FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">			AuthenticationException reason)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// SEC-112: Clear the SecurityContextHolder's Authentication, as the</span></span><br><span class="line">		<span class="comment">// existing Authentication is no longer considered valid</span></span><br><span class="line">		SecurityContextHolder.getContext().setAuthentication(<span class="keyword">null</span>);</span><br><span class="line">		requestCache.saveRequest(request, response);</span><br><span class="line">		logger.debug(<span class="string">"Calling Authentication entry point."</span>);</span><br><span class="line">		authenticationEntryPoint.commence(request, response, reason);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>上面的方法是先保存请求，之后执行 authenticationEntryPoint.commence(request, response, reason)， 再深入来看</p>
<p>默认实现 commence 接口的是 LoginUrlAuthenticationEntryPoint 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String redirectUrl = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (useForward) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (forceHttps &amp;&amp; <span class="string">"http"</span>.equals(request.getScheme())) &#123;</span><br><span class="line">				<span class="comment">// First redirect the current request to HTTPS.</span></span><br><span class="line">				<span class="comment">// When that request is received, the forward to the login page will be</span></span><br><span class="line">				<span class="comment">// used.</span></span><br><span class="line">				redirectUrl = buildHttpsRedirectUrlForRequest(request);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (redirectUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">				String loginForm = determineUrlToUseForThisRequest(request, response,</span><br><span class="line">						authException);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">"Server side forward to: "</span> + loginForm);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				RequestDispatcher dispatcher = request.getRequestDispatcher(loginForm);</span><br><span class="line"></span><br><span class="line">				dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// redirect to login page. Use https if forceHttps true</span></span><br><span class="line"></span><br><span class="line">			redirectUrl = buildRedirectUrlToLoginPage(request, response, authException);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		redirectStrategy.sendRedirect(request, response, redirectUrl);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>我们看到了 redirectUrl = buildRedirectUrlToLoginPage(request, response, authException)</p>
<p>这下总算是知道了为什么会重定向了 /login 请求了</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>知道问题的原因了，解决问题就很简单了，重新实现 commence 接口，返回http 状态码就可以了，于是加上这样的配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .invalidSessionStrategy(<span class="keyword">new</span> InvalidSessionStrategyImpl())</span><br><span class="line">                .maximumSessions(-<span class="number">1</span>).expiredSessionStrategy(expiredSessionStrategy())<span class="comment">//配置并发登录，-1表示不限制</span></span><br><span class="line">                .sessionRegistry(sessionRegistry())</span><br><span class="line">                .and()</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> UnauthenticatedEntryPoint())</span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> AuthorizationFailure());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnauthenticatedEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isCommitted()) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,<span class="string">"未认证的用户:"</span> + authException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次重试，发现会返回 405状态码了，不会在重定向到 /login 了</p>
<p>问题解决</p>]]></content>
      
        <categories>
            
            <category> SpringSecurity篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 整合使用 SpringSecurity]]></title>
      <url>http://blog.joylau.cn/2018/03/28/SpringBoot-SpringSecurity/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SpringSecurity-配置类"><a href="#SpringSecurity-配置类" class="headerlink" title="SpringSecurity 配置类"></a>SpringSecurity 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>, jsr250Enabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.security.ignore"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String[]&gt; marchers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .anonymous().disable()</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line"><span class="comment">//                .requestMatchers(CorsUtils::isPreFlightRequest).permitAll() //解决PreFlight请求问题</span></span><br><span class="line">                .anyRequest().authenticated()<span class="comment">//其他请求必须授权后访问</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line"><span class="comment">//                .loginPage("/login")</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .successHandler(authenticationSuccessHandler())</span><br><span class="line">                .failureHandler(authenticationFailureHandler())</span><br><span class="line">                .permitAll()<span class="comment">//登录请求可以直接访问</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">                .deleteCookies(<span class="string">"JSESSIONID"</span>)</span><br><span class="line">                .logoutSuccessHandler(<span class="keyword">new</span> LogoutSuccess())</span><br><span class="line">                .permitAll()<span class="comment">//注销请求可直接访问</span></span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .invalidSessionStrategy(<span class="keyword">new</span> InvalidSessionStrategyImpl())</span><br><span class="line">                .maximumSessions(-<span class="number">1</span>).expiredSessionStrategy(expiredSessionStrategy())<span class="comment">//配置并发登录，-1表示不限制</span></span><br><span class="line">                .sessionRegistry(sessionRegistry())</span><br><span class="line">                .and()</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> UnauthenticatedEntryPoint())</span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> AuthorizationFailure())</span><br><span class="line">                .and()</span><br><span class="line">                .addFilterBefore(<span class="keyword">new</span> AuthorizationFilter(<span class="keyword">new</span> AuthorizationMetadataSource(), <span class="keyword">new</span></span><br><span class="line">                AuthorizationAccessDecisionManager()), FilterSecurityInterceptor.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> </span>&#123;</span><br><span class="line">        auth.authenticationProvider(authenticationProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionRegistry <span class="title">sessionRegistry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionRegistryImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExpiredSessionStrategyImpl <span class="title">expiredSessionStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExpiredSessionStrategyImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityUtils.getPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String[] marcher : marchers) &#123;</span><br><span class="line">            web.ignoring().antMatchers(marcher);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DaoAuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaoAuthenticationProvider provider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">        <span class="comment">/*不将UserNotFoundExceptions转换为BadCredentialsException*/</span></span><br><span class="line">        provider.setHideUserNotFoundExceptions(<span class="keyword">false</span>);</span><br><span class="line">        provider.setUserDetailsService(userService());</span><br><span class="line">        provider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationSuccess <span class="title">authenticationSuccessHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationFailureHandler <span class="title">authenticationFailureHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationFailure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义-userService"><a href="#自定义-userService" class="headerlink" title="自定义 userService"></a>自定义 userService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSecurityConfig securityConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名不能为空!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SysUser user = <span class="keyword">new</span> SysUser();</span><br><span class="line">        user.setLoginName(username);</span><br><span class="line">        SysUser queryUser = userMapper.selectOne(user);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == queryUser) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户  "</span> + username + <span class="string">" 不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!queryUser.getPermissionIpList().contains(<span class="string">"0.0.0.0"</span>) &amp;&amp; !queryUser.getPermissionIpList().contains</span><br><span class="line">                (SecurityUtils.getRemoteAddress())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidIpAddrException(<span class="string">"登录 IP 地址不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecurityUser(queryUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reAuthorization</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SecurityUser user = SecurityUtils.currentUser();</span><br><span class="line">        <span class="keyword">assert</span> user != <span class="keyword">null</span>;</span><br><span class="line">        String username = user.getUsername();</span><br><span class="line">        user.setRoles(userMapper.findRolesByName(username));</span><br><span class="line">        user.setMenus(userMapper.findMenusByName(username));</span><br><span class="line">        user.setFunctions(userMapper.findFunctionsByName(username));</span><br><span class="line"></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Function function : user.getFunctions()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String url : function.getFunctionUrl().split(<span class="string">","</span>)) &#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(url));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        user.setAuthorities(authorities.stream().distinct().collect(Collectors.toList()));</span><br><span class="line">        <span class="comment">// 得到当前的认证信息</span></span><br><span class="line">        Authentication auth = SecurityUtils.getAuthentication();</span><br><span class="line">        <span class="comment">// 生成新的认证信息</span></span><br><span class="line">        Authentication newAuth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(auth.getPrincipal(), auth.getCredentials(), authorities);</span><br><span class="line">        <span class="comment">// 重置认证信息</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(newAuth);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名 将该用户登录的所有账户踢下线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userNames userNames</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kickOutUser</span><span class="params">(String... userNames)</span> </span>&#123;</span><br><span class="line">        SessionRegistry sessionRegistry = securityConfig.sessionRegistry();</span><br><span class="line">        <span class="keyword">for</span> (Object o : sessionRegistry.getAllPrincipals()) &#123;</span><br><span class="line">            SecurityUser user = (SecurityUser) o;</span><br><span class="line">            <span class="keyword">for</span> (String username : userNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (user.getLoginName().equals(username)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (SessionInformation sessionInformation : sessionRegistry.getAllSessions(user, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                        sessionInformation.expireNow();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用户实体类-SecurityUser"><a href="#用户实体类-SecurityUser" class="headerlink" title="用户实体类 SecurityUser"></a>用户实体类 SecurityUser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUser</span> <span class="keyword">extends</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*角色*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*菜单*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; menus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*功能权限*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Function&gt; functions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    SecurityUser(SysUser user) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setUserId(user.getUserId());</span><br><span class="line">        <span class="keyword">this</span>.setGlbm(user.getGlbm());</span><br><span class="line">        <span class="keyword">this</span>.setXh(user.getXh());</span><br><span class="line">        <span class="keyword">this</span>.setLoginName(user.getLoginName());</span><br><span class="line">        <span class="keyword">this</span>.setLoginPassword(user.getLoginPassword());</span><br><span class="line">        <span class="keyword">this</span>.setPermissionIpList(user.getPermissionIpList());</span><br><span class="line">        <span class="keyword">this</span>.setLatestLoginTime(user.getLatestLoginTime());</span><br><span class="line">        <span class="keyword">this</span>.setTotalLoginCounts(user.getTotalLoginCounts());</span><br><span class="line">        <span class="keyword">this</span>.setName(user.getName());</span><br><span class="line">        <span class="keyword">this</span>.setCreateTime(user.getCreateTime());</span><br><span class="line">        <span class="keyword">this</span>.setUpdateTime(user.getUpdateTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getLoginPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getLoginName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getLoginName().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj <span class="keyword">instanceof</span> SecurityUser &amp;&amp; ((SecurityUser) obj).getLoginName().equals(<span class="keyword">this</span>.getLoginName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="授权Filter"><a href="#授权Filter" class="headerlink" title="授权Filter"></a>授权Filter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthorizationMetadataSource metadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationFilter</span><span class="params">(AuthorizationMetadataSource metadataSource, AuthorizationAccessDecisionManager</span></span></span><br><span class="line"><span class="function"><span class="params">            accessDecisionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.metadataSource = metadataSource;</span><br><span class="line">        <span class="keyword">this</span>.setAccessDecisionManager(accessDecisionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(servletRequest, servletResponse, filterChain);</span><br><span class="line">        invoke(fi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getSecureObjectClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metadataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="授权访问决策器"><a href="#授权访问决策器" class="headerlink" title="授权访问决策器"></a>授权访问决策器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证用户是否具有权限访问该url地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">        HttpServletRequest request = ((FilterInvocation) object).getRequest();</span><br><span class="line">        String url = ((FilterInvocation) object).getRequestUrl();</span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authentication.getAuthorities()) &#123;</span><br><span class="line">            SimpleGrantedAuthority authority = (SimpleGrantedAuthority) grantedAuthority;</span><br><span class="line">            <span class="keyword">if</span> (matches(authority.getAuthority(), request)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"uri: "</span> + url + <span class="string">",无权限访问！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前AccessDecisionManager是否支持对应的ConfigAttribute</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前AccessDecisionManager是否支持对应的受保护对象类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String url, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        AntPathRequestMatcher matcher = <span class="keyword">new</span> AntPathRequestMatcher(url);</span><br><span class="line">        <span class="keyword">return</span> matcher.matches(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="授权元数据"><a href="#授权元数据" class="headerlink" title="授权元数据"></a>授权元数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationMetadataSource</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 请求的url资源所需的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        String url = ((FilterInvocation) object).getRequestUrl();</span><br><span class="line">        Collection&lt;ConfigAttribute&gt; configAttributes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        configAttributes.add(<span class="keyword">new</span> SecurityConfig(url));</span><br><span class="line">        <span class="keyword">return</span> configAttributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会在启动时加载所有 ConfigAttribute 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装一些-Security-工具类"><a href="#封装一些-Security-工具类" class="headerlink" title="封装一些 Security 工具类"></a>封装一些 Security 工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Authentication <span class="title">getAuthentication</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAuthentication() != <span class="keyword">null</span> || !(getAuthentication() <span class="keyword">instanceof</span> AnonymousAuthenticationToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecurityUser <span class="title">currentUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (SecurityUser) getAuthentication().getPrincipal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 webAuthenticationDetails</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> WebAuthenticationDetails <span class="title">webAuthenticationDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (WebAuthenticationDetails)getAuthentication().getDetails();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSessionId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> webAuthenticationDetails().getSessionId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取远程访问地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRemoteAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> webAuthenticationDetails().getRemoteAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密码编译器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCryptPasswordEncoder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BCryptPasswordEncoder <span class="title">getPasswordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据明文加密 返回密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createPassword</span><span class="params">(String rawPassword)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPasswordEncoder().encode(rawPassword.trim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入明文和密文 检查是否匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawPassword 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodedPassword 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatching</span><span class="params">(String rawPassword,String encodedPassword)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPasswordEncoder().matches(rawPassword,encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要的实现类都列举在内了，还有一些成功和失败的处理类，再次没有列举出来<br>因为该项目为构建纯restful风格的后台项目，这些成功或失败的处理类基本都是返回的http状态码</p>]]></content>
      
        <categories>
            
            <category> SpringSecurity篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Jdk 8 Stream Distinct 去重复使用记录]]></title>
      <url>http://blog.joylau.cn/2018/03/01/JDK8-Stream-Distinct/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>最近在 lamda 的 stream 进行 list 去重复的时候，发现没有生效<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;FollowAnalysisPojo&gt;&gt;&gt; maps = allList</span><br><span class="line">            .parallelStream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect(Collectors.groupingBy(FollowAnalysisPojo::getMainPlateNum,Collectors.groupingBy(FollowAnalysisPojo::getPlateNum)));</span><br></pre></td></tr></table></figure>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被跟车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String mainPlateNum;</span><br><span class="line">    <span class="comment">/*跟踪车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String plateNum;</span><br><span class="line">    <span class="keyword">private</span> String vehicleType;</span><br><span class="line">    <span class="keyword">private</span> String siteName;</span><br><span class="line">    <span class="keyword">private</span> String directionName;</span><br><span class="line">    <span class="comment">/*车主时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeMain;</span><br><span class="line">    <span class="comment">/*伴随时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeSub;</span><br><span class="line">    <span class="comment">/*跟踪次数*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer trackCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录被跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer mainRowSpan = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowSpan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key = UUID.randomUUID().toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码是想做 先对查询出来的数据进行去重复的操作，然后在按照被跟车牌和跟踪车牌进行分组操作<br>有点需要说明的是 <code>parallelStream()</code> 比我们常用的 <code>stream()</code> 是并行多管操作，速度上更快</p>
<p>然后发现的问题是并没有去重复，当时也在奇怪 distinct() 里并没有任何参数来指定如何使用规则来去重复</p>
<h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>重写List中实体类的 <code>equals()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当车主时间,伴随时间都相同时，则认为是一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> FollowAnalysisPojo))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        FollowAnalysisPojo followAnalysisPojo = (FollowAnalysisPojo)obj;</span><br><span class="line">        <span class="keyword">return</span> passTimeMain.equals(followAnalysisPojo.passTimeMain) &amp;&amp; passTimeSub.equals(followAnalysisPojo.passTimeSub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就按照我自定义的规则进行去重复了<br>运行了一下，发现还是不起作用<br>debug了一下，发现根本没有执行重写的 equals 方法<br>原来还需要重写 <code>hashCode()</code> 方法<br>在 <code>equals()</code> 方法 执行前会先执行 <code>hashCode()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重新 equals 方法必须重新 hashCode方法</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> result = passTimeMain.hashCode();</span><br><span class="line">            result = <span class="number">31</span> * result + passTimeMain.hashCode();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以了。</p>]]></content>
      
        <categories>
            
            <category> Java篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于通用 Mapper Example 使用记录]]></title>
      <url>http://blog.joylau.cn/2018/02/27/MyBatis-Example/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>项目整合 通用 mapper 和 pagehelper 插件，这部分以前有写过，略</li>
<li>需要集成 mybatis 的 generator 插件，方便自动生成 实体类和 mapper 类，还可以生成xml，不过一般我们都不用 xml</li>
<li>baseMapper 需要继承 ExampleMapper<t> 不过只需要继承 Mapper<t> 就可以了，因为 Mapper<t> 已经继承了 ExampleMapper<t></t></t></t></t></li>
</ul>
<h2 id="Example-的用法"><a href="#Example-的用法" class="headerlink" title="Example  的用法"></a>Example  的用法</h2><p>首先需要说明一点 ，和 Example 使用相同的还有 Condition 类 该类继承自 Example，使用方法和 Example 完全一样，只是为了避免语义有歧义重命名的一个类，这里我们都用 Example 来说明</p>
<ul>
<li>创建 Example : </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example example = <span class="keyword">new</span> Example(XXX.class);</span><br></pre></td></tr></table></figure>
<p>其中构造方法为生成的 model 实体类，还有 2 个构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带exists参数的构造方法，默认notNull为false，允许为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exists      - true时，如果字段不存在就抛出异常，false时，如果不存在就不使用该字段的条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(Class&lt;?&gt; entityClass, <span class="keyword">boolean</span> exists)</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带exists参数的构造方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exists      - true时，如果字段不存在就抛出异常，false时，如果不存在就不使用该字段的条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> notNull     - true时，如果值为空，就会抛出异常，false时，如果为空就不使用该字段的条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(Class&lt;?&gt; entityClass, <span class="keyword">boolean</span> exists, <span class="keyword">boolean</span> notNull)</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后可以对 example 的实体类的单表进行查询了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example example = <span class="keyword">new</span> Example(XXX.class);</span><br><span class="line">example.createCriteria().andGreaterThan(<span class="string">"id"</span>, <span class="number">100</span>).andLessThan(<span class="string">"id"</span>,<span class="number">151</span>);</span><br><span class="line">example.or().andLessThan(<span class="string">"id"</span>, <span class="number">41</span>);</span><br><span class="line">List&lt;XXX&gt; list = mapper.selectByExample(example);</span><br></pre></td></tr></table></figure>
<p>以上查询的条件是，查询 id 大于 100 并且小于 151 或者 id 小于 41 的记录</p>
<p>还可以写成 sql 的方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example example = <span class="keyword">new</span> Example(XXX.class);</span><br><span class="line">example.createCriteria().andCondition(<span class="string">"id &gt; 100 and id &lt;151 or id &lt; 41"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// andCondition() 方法可以叠加使用，像这样</span></span><br><span class="line">example.createCriteria().andCondition(<span class="string">"id &gt; 100 and id &lt;151"</span>).orCondition(<span class="string">"id &lt;41"</span>);</span><br></pre></td></tr></table></figure>
<p>andCondition() 有2中使用方法：<br>andCondition(String condition) ： 手写条件，例如 “length(name)&lt;5”<br>andCondition(String condition, Object value) : 手写左边条件，右边用value值,例如 “length(name)=” “5”<br>orCondition() 也是类似的</p>
<p>example 里有很多 mysql 常用的方法，使用方法和 elasticsearch 的 java api 很类似，这里列举几个</p>
<ul>
<li><code>Set&lt;String&gt; selectColumns</code> : 查询的字段</li>
<li><code>Set&lt;String&gt; excludeColumns</code> ： 排除的查询字段</li>
<li><code>Map&lt;String, EntityColumn&gt; propertyMap</code> ： 属性和列对应</li>
<li>andAllEqualTo ： 将此对象的所有字段参数作为相等查询条件，如果字段为 null，则为 is null</li>
<li>andGreaterThan ： and 条件 大于</li>
<li>andBetween : and 条件 between</li>
<li>andEqualTo : 将此对象的不为空的字段参数作为相等查询条件 还有一种有 value 参数的是 = 条件</li>
<li>andGreaterThanOrEqualTo ： and 条件 》=</li>
</ul>
<p>还有一些一看就知道意思的</p>
<ul>
<li>andIn</li>
<li>andIsNotNull</li>
<li>andIsNull</li>
<li>andLessThan</li>
<li>andLessThanOrEqualTo</li>
<li>andNotLike</li>
</ul>
<p>上面是以 and 条件举例 ，or的条件也是一样的</p>
<h2 id="集成分页功能"><a href="#集成分页功能" class="headerlink" title="集成分页功能"></a>集成分页功能</h2><p>我们知道 PageHelper.startPage(pageNum, pageSize); 可以对 后面的一个 select 进行分页<br>那么我们可以对 example 进行一个分页查询的封装</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在baseMapper 里封装一个接口</span></span><br><span class="line"><span class="function">PageInfo <span class="title">selectPageByExample</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, Object example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样实现上面的接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">selectPageByExample</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, Object example)</span> </span>&#123;</span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    List&lt;T&gt; list = selectByExample(example);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java 8 的lamda 用法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">selectPageByExample</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, Object example)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PageHelper.startPage(pageNum, pageSize).doSelectPageInfo(()-&gt;baseMapper.selectByExample(example));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MyBatis篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 自定义打包部署，暴露配置文件和静态资源文件]]></title>
      <url>http://blog.joylau.cn/2017/12/12/SpringBoot-Assembly-Package/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot 默认有2种打包方式，一种是直接打成 jar 包，直接使用 java -jar 跑起来，另一种是打成 war 包，移除掉 web starter 里的容器依赖，然后丢到外部容器跑起来。</p>
<p>第一种方式的缺点是整个项目作为一个 jar，部署到生产环境中一旦有配置文件需要修改，则过程比较麻烦<br>linux 下可以使用 vim jar 包，找到配置文件修改后再保存<br>window 下需要使用 解压缩软件打开 jar 再找到配置文件，修改后替换更新</p>
<p>第二种方式的缺点是需要依赖外部容器，这无非多引入了一部分，很多时候我们很不情愿这么做</p>
<blockquote>
<blockquote>
<p>spring boot 项目启动时 指定配置有2种方式：一种是启动时修改配置参数，像 java -jar xxxx.jar –server.port=8081 这样；另外一种是 指定外部配置文件加载，像 java -jar xxxx.jar -Dspring.config.location=applixxx.yml这样</p>
</blockquote>
</blockquote>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我们希望打包成 tomcat 或者 maven 那样的软件包结构，即</p>
<pre><code>--- bin
    --- start.sh
    --- stop.sh
    --- restart.sh
    --- start.bat
    --- stop.bat
    --- restart.bat
--- boot
    --- xxxx.jar
--- lib
--- conf
--- logs
--- README.md
--- LICENSE
</code></pre><p>就像这样<br><img src="http://image.joylau.cn/blog/Assembly-Package.png" alt="Assembly-Package"></p>
<ul>
<li><code>bin</code> 目录放一些我们程序的启动停止脚本</li>
<li><code>boot</code> 目录放我们自己的程序包</li>
<li><code>lib</code> 目录是我们程序的依赖包</li>
<li><code>conf</code> 目录是项目的配置文件</li>
<li><code>logs</code> 目录是程序运行时的日志文件</li>
<li><code>README.md</code> 使用说明</li>
<li><code>LICENSE</code> 许可说明</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>maven-jar-plugin ： 打包我们写的程序包和所需的依赖包，并指定入口类，依赖包路径和classpath路径，其实就是在MANIFEST.MF这个文件写入相应的配置</li>
<li>maven-assembly-plugin ： 自定义我们打包的文件目录的格式</li>
</ul>
<h2 id="pom-xml-配置"><a href="#pom-xml-配置" class="headerlink" title="pom.xml 配置"></a>pom.xml 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                &lt;fork&gt;true&lt;/fork&gt;</span></span><br><span class="line"><span class="comment">            &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugin&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.ahtsoft.AhtsoftBigdataWebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>../lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>../conf/resources/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>将 spring boot 默认的打包方式 spring-boot-maven-plugin 去掉，使用现在的打包方式</li>
<li>maven-jar-plugin 配置中，制定了入口类，addClasspath 配置将所需的依赖包单独打包，依赖包打的位置在lib目录底下，在MANIFEST.MF这个文件写入相应的配置</li>
<li>配置了 classpath 在 /conf/resources/ ,这个和后面的 assembly.xml 要相对应</li>
<li>我单独把spring boot 的配置文件 yml文件 和 静态资源目录 static 单独拎了出来，在我们的源码包中并没有打进去，而是交给 assembly.xml 来单独打到一个独立的文件 conf文件下</li>
<li>这也是照应了 前面为什么要设置 classpath 为 /conf/resources/</li>
</ol>
<p>下面重要的是 assembly.xml 配置文件了，这个文件才是把我们的程序打成标准的目录结构</p>
<h2 id="assembly-xml"><a href="#assembly-xml" class="headerlink" title="assembly.xml"></a>assembly.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">baseDirectory</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;/<span class="tag">&lt;/<span class="name">baseDirectory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>target/$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>boot/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">destName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class="tag">&lt;/<span class="name">destName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>./<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>./<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.txt<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.md<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>bin/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.cmd<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/static<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf/resources/static/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf/resources<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.conf<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>$&#123;groupId&#125;:$&#123;artifactId&#125;<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.springframework.boot:spring-boot-devtools<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将最终的程序包打成 tar.gz ,当然也可以打成其他的格式如zip,rar等，fileSets 里面指定我们源码里的文件和路径打成标准包相对应的目录</li>
<li>需要注意的是，在最终的依赖库 lib 下 去掉我们的程序和开发时spring boot的热部署依赖 spring-boot-devtools，否则的会出问题</li>
<li>代码里的启动和停止脚本要赋予权限，否则在执行的时候可能提示权限的问题</li>
</ul>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 最新版 SpringBoot 整合 Druid,MyBatis,通用 Mapper,PageHelper的脚手架]]></title>
      <url>http://blog.joylau.cn/2017/11/29/SpringBoot-Druid-MyBatis-Mapper-PageHelper/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>上次自己写这篇文章 已经是今年初了,一年过去了, Spring Boot 项目在不停的更新着,与此同时其他的 stater项目也在不停的更新着,今天就来重新整合下Druid,MyBatis,通用 Mapper,PageHelper,打算在企业级项目中使用</p>
<p>当前 SpringBoot 最新的发布版是 1.5.9.RELEASE<br>昨天还是 1.5.8,今天发现就是1.5.9.RELEASE了<br>本篇文章搭建的脚手架就是基于 1.5.9.RELEASE</p>
<p>年初我自己搭建这个脚手架使用的时候,那时 Druid,MyBatis,Mapper,PageHelper,这几个开源项目都没有集成 SpringBoot,我自己还是使用 JavaConfig 配置的<br>现在不一样了,一年过去了,这些项目的作者也开发了对 SpringBoot 支持的 starter 版本</p>
<p>本篇文章就来整合这些开源框架制作一个脚手架</p>
<p>另外是有打算将它应用到企业级项目中的</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>SpringBoot: 1.5.9.RELEASE<br>SpringBoot-mybatis : 1.3.1<br>mapper-spring-boot-starter : 1.1.5<br>pagehelper-spring-boot-starter: 1.2.3<br>druid-spring-boot-starter: 1.1.5</p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ahtsoft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ahtsoft-bigdata-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>ahtsoft-bigdata-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>ahtsoft bigData Web Project<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>LiuFa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">email</span>&gt;</span>liuf@ahtsoft.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">			&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">			&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">			&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">		&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明:<br>pom 中除了应用了必要的依赖,还引入了SpringSecurity, 打算做脚手架的安全认证<br>caffeine cache 打算做 restapi 的 cache 的</p>
<p>使用 devtools 开发时热部署<br>lombok 简化代码配置<br>websocket 全双工通信<br>集群的话 spring-session 做到 session 共享</p>
<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application,yml"></a>application,yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      url: jdbc:mysql://lfdevelopment.cn:3333/boot-security?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">      username: root</span><br><span class="line">      password: q1pE3gb8+1Q9DkE27wjl0Q1xhiYJJC0w5+TJIZXjEW9fKv9W2h4VOSWOajAVtNXRjaDhtXZlyWN8SAJPqzNFqg==</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      public-key: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK9HqNyD1g+vgwITT4x5EcaWKGJQ7/HCl1C0Uwc8AHPr2y7heJBLGdWtvIKtRKGsn4LCCkyKfVFs87nKKFpJbPECAwEAAQ==</span><br><span class="line">      connection-properties: config.decrypt=true;config.decrypt.key=$&#123;spring.datasource.druid.public-key&#125;</span><br><span class="line">      filter:</span><br><span class="line">        config:</span><br><span class="line">          enabled: true</span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-package: com.ahtsoft.**.model</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">mapper:</span><br><span class="line">  mappers[0]: com.ahtsoft.config.basemapper.BaseMapper</span><br><span class="line">  not-empty: false</span><br><span class="line">  identity: MYSQL</span><br><span class="line">pagehelper:</span><br><span class="line">  helper-dialect: mysql</span><br><span class="line">  reasonable: true</span><br><span class="line">  supportMethodsArguments: true</span><br><span class="line">  params: count=countSql</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      ahtsoft: debug</span><br></pre></td></tr></table></figure>
<p>正常配置了druid 的连接配置,其中使用 ConfigTool 的密码加密功能,提供加密后的密文个公钥,在连接数据库时会自动解密</p>
<p>mybatis 配置了各个 model 的位置,配置开启驼峰命名转换,SQL 语句的打印使用的 springboot 的日志功能,将实现的 StdOutImpl给注释了<br>配置的分页插件 pagehelper 参数</p>
<p>最后在@ SpringBoot 注解下加入<br><code>@MapperScan(basePackages = &quot;com.ahtsoft.**.mapper&quot;)</code><br>用来扫描 mapper自动注入为 bean</p>
<p>项目地址: <a href="https://github.com/JoyLau/ahtsoft-bigdata-web.git" target="_blank" rel="noopener">https://github.com/JoyLau/ahtsoft-bigdata-web.git</a></p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Druid </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Mapper </tag>
            
            <tag> PageHelper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 数组的一些常用的方法记录]]></title>
      <url>http://blog.joylau.cn/2017/11/24/JavaScript-Array-Method/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="push-添加最后一项"><a href="#push-添加最后一项" class="headerlink" title="push 添加最后一项"></a>push 添加最后一项</h3><p>在数组末尾添加一项，并返回数组的长度, 可以添加任意类型的值作为数组的一项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.push(<span class="number">6</span>)     <span class="comment">// arr: [1,2,6]</span></span><br><span class="line">arr.push(<span class="string">'aa'</span>)  <span class="comment">// arr: [1,2,6,"aa"]</span></span><br><span class="line">arr.push(<span class="literal">undefined</span>)  <span class="comment">// arr: [1,2,6,"aa",undefined]</span></span><br><span class="line">arr.push(&#123;<span class="attr">a</span>: <span class="string">"A"</span>, <span class="attr">b</span>: <span class="string">"B"</span>&#125;)  <span class="comment">// [1,2,6,"aa",undefined,&#123;a: "A", b: "B"&#125;]</span></span><br></pre></td></tr></table></figure>
<h3 id="unshift-在最前面添加一项"><a href="#unshift-在最前面添加一项" class="headerlink" title="unshift 在最前面添加一项"></a>unshift 在最前面添加一项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="number">9</span>)      <span class="comment">// [9, 1, 2]</span></span><br><span class="line">arr.unshift(<span class="string">'aa'</span>)   <span class="comment">// ['aa',9, 1, 2]</span></span><br></pre></td></tr></table></figure>
<h3 id="pop-删除最后一项"><a href="#pop-删除最后一项" class="headerlink" title="pop 删除最后一项"></a>pop 删除最后一项</h3><p>删除最后一项,并返回删除元素的值；如果数组为空则返回undefine。对数组本身操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.pop()       <span class="comment">// arr: [1, 2, 3, 4]</span></span><br><span class="line">arr.pop()       <span class="comment">// arr: [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h3 id="shift-删除最前面一项"><a href="#shift-删除最前面一项" class="headerlink" title="shift 删除最前面一项"></a>shift 删除最前面一项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.shift()     <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line">arr.shift()     <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="slice截取-切片-数组-得到截取的数组"><a href="#slice截取-切片-数组-得到截取的数组" class="headerlink" title="slice截取(切片)数组 得到截取的数组"></a>slice截取(切片)数组 得到截取的数组</h3><p>不改变原始数组，得到新的数组</p>
<p>slice(start,end)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">1</span>)        <span class="comment">// a: [2,3,4,5]</span></span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">1</span>,<span class="number">3</span>)      <span class="comment">// a: [2,3]</span></span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">3</span>,<span class="number">4</span>)      <span class="comment">// a: [5]</span></span><br></pre></td></tr></table></figure>
<h3 id="splice剪接数组"><a href="#splice剪接数组" class="headerlink" title="splice剪接数组"></a>splice剪接数组</h3><p>改变原数组，可以实现shift前删除，pop后删除,unshift前增加,同push后增加一样的效果。索引从0开始</p>
<p>splice(index,howmany,item1,…..,itemX)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">push: arr.splice(arr.length, <span class="number">0</span>, <span class="number">6</span>)  <span class="comment">//  [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">unshift: arr.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>)        <span class="comment">// [6, 1, 2, 3, 4, 5]</span></span><br><span class="line">pop: arr.splice(arr.length<span class="number">-1</span>, <span class="number">1</span>)    <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">shift: arr.splice(<span class="number">0</span>, <span class="number">1</span>)             <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>)   <span class="comment">// [1]</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment">// [1, 4, 5]</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'A'</span>)   <span class="comment">// [1, "A",2,3, 4, 5]</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'A'</span>, <span class="string">'B'</span>)   <span class="comment">// [1, "A", "B", 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="concat-数组合并"><a href="#concat-数组合并" class="headerlink" title="concat 数组合并"></a>concat 数组合并</h3><p>合并后得到新数组，原始数组不改变</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr = arr1.concat(arr2)     <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<h3 id="indexOf-数组元素索引"><a href="#indexOf-数组元素索引" class="headerlink" title="indexOf 数组元素索引"></a>indexOf 数组元素索引</h3><p>并返回元素索引，不存在返回-1,索引从0开始</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]; </span><br><span class="line">arr.indexOf(<span class="string">'a'</span>);       <span class="comment">//0</span></span><br><span class="line">arr.indexOf(a);         <span class="comment">//-1</span></span><br><span class="line">arr.indexOf(<span class="string">'f'</span>);       <span class="comment">//-1</span></span><br><span class="line">arr.indexOf(<span class="string">'e'</span>);       <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h3 id="join-数组转字符串"><a href="#join-数组转字符串" class="headerlink" title="join 数组转字符串"></a>join 数组转字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">b = a.join(<span class="string">"-"</span>);    <span class="comment">// 0-1-2-3-4</span></span><br></pre></td></tr></table></figure>
<h3 id="reverse-数组翻转"><a href="#reverse-数组翻转" class="headerlink" title="reverse 数组翻转"></a>reverse 数组翻转</h3><p>并返回翻转后的原数组，原数组翻转了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line">a.reverse()<span class="comment">//a：[5, 4, 3, 2, 1] 返回[5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
<h3 id="数组里面的对象去重复"><a href="#数组里面的对象去重复" class="headerlink" title="数组里面的对象去重复"></a>数组里面的对象去重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unique(arr)&#123;</span><br><span class="line">        <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">        arr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hash[next.name]) &#123;</span><br><span class="line">                item.push(next);</span><br><span class="line">                hash[next.name] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        &#125;, []);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>发现一个比较好的js组件，地址： <a href="https://lodash.com/docs/" target="_blank" rel="noopener">https://lodash.com/docs/</a>  里面有很多关于对数组的操作</p>]]></content>
      
        <categories>
            
            <category> JavaScript篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据之路 Spark 环境搭建]]></title>
      <url>http://blog.joylau.cn/2017/11/23/Spark-Integrate-Build/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>首先要说明的是,本篇文章用的  Spark 的版本都是目前最新版,直接在官网上下载就可以了,有注意的,下面详细说<br>有些命令可能已经不适应之前的旧版本了,以最新的版的为准<br>以下操作命令均是在服务的根目录下,使用的是相对目录</p>
<h3 id="当前版本说明"><a href="#当前版本说明" class="headerlink" title="当前版本说明"></a>当前版本说明</h3><ul>
<li>jdk 1.8.0</li>
<li>Hadoop 版本2.8.2</li>
<li>操作系统版本 centos 7.2</li>
<li>Spark 2.2.0</li>
</ul>
<h3 id="首先需要做的"><a href="#首先需要做的" class="headerlink" title="首先需要做的"></a>首先需要做的</h3><p>安装 jdk 环境,再此不做详细叙述了,需要注意的是 jdk 的环境变量的配置<br>安装 Hadoop 环境,必须安装 Hadoop 才能使用 Spark，但如果使用 Spark 过程中没用到 HDFS，不启动 Hadoop 也是可以的</p>
<h2 id="安装-Spark"><a href="#安装-Spark" class="headerlink" title="安装 Spark"></a>安装 Spark</h2><p>打开官网下载的地址: <a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">http://spark.apache.org/downloads.html</a><br>需要注意的是,在选择下载包类型 <code>Choose a package type</code> 这个需要根据安装的 Hadoop 的版本来定的,或者直接选择  <code>Pre-build with user-provided Apache Hadoop</code><br>这样我们可以自己配置 Hadoop 的版本</p>
<p>下载后,解压</p>
<p>进入 conf目录拷贝一份配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./conf/spark-env.sh.template ./conf/spark-env.sh</span><br></pre></td></tr></table></figure>
<p>加入环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_DIST_CLASSPATH=$(/home/hadoop-2.8.2/bin/hadoop classpath)</span><br></pre></td></tr></table></figure>
<p>我们运行 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./sbin/start-all.sh</span></span><br></pre></td></tr></table></figure>
<p>Spark 便会运行起来,查看地址 : <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>  可查看到集群情况</p>
<h2 id="运行-Spark-示例程序"><a href="#运行-Spark-示例程序" class="headerlink" title="运行 Spark 示例程序"></a>运行 Spark 示例程序</h2><p>正如前面的 Hadoop 一样, Spark 自带有很多示例程序,目录在 ./example 下面,有 Java 的 Python,Scala ,R 语言的,<br>这里我们选个最熟悉的 Java 版的来跑下</p>
<p>我们找到 Java 的目录里也能看到里面有很多程序,能看到我们熟悉的 wordcount</p>
<p>这里我们跑个 计算π的值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./bin/run-example SparkPi</span></span><br></pre></td></tr></table></figure>
<p>运行后控制台打印很多信息,但是能看到这么一行:</p>
<p><em><strong>Pi is roughly 3.1432557162785812</strong></em></p>
<p>这就可以了</p>
<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><blockquote>
<blockquote>
<p>RDD : Spark 的分布式的元素集合（distributed collection of items），称为RDD（Resilient Distributed Dataset，弹性分布式数据集），它可被分发到集群各个节点上，进行并行操作。RDDs 可以通过 Hadoop InputFormats 创建（如 HDFS），或者从其他 RDDs 转化而来</p>
</blockquote>
</blockquote>
<p>我就简单的理解为 类比 Hadoop 的 MapReduce</p>
<p>RDDs 支持两种类型的操作</p>
<ul>
<li>actions: 在数据集上运行计算后返回值</li>
<li>transformations: 转换, 从现有数据集创建一个新的数据集</li>
</ul>
<h2 id="Spark-Shell"><a href="#Spark-Shell" class="headerlink" title="Spark-Shell"></a>Spark-Shell</h2><p>Spark-shell 支持 Scala 和 Python 2中语言,这里我们就用 Scala 来做,关于 Scala 的使用和语法我打算新写一篇文章来记录下,<br>在之前我也写过 在 maven 中集成使用 Scala 来编程,这里我先用下</p>
<p>执行 shell </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./bin/spark-shell</span></span><br><span class="line"></span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">17/11/24 09:33:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">17/11/24 09:33:37 WARN util.Utils: Your hostname, JoyLinux resolves to a loopback address: 127.0.0.1; using 10.0.2.15 instead (on interface enp0s3)</span><br><span class="line">17/11/24 09:33:37 WARN util.Utils: Set SPARK_LOCAL_IP <span class="keyword">if</span> you need to <span class="built_in">bind</span> to another address</span><br><span class="line">Spark context Web UI available at http://10.0.2.15:4040</span><br><span class="line">Spark context available as <span class="string">'sc'</span> (master = <span class="built_in">local</span>[*], app id = <span class="built_in">local</span>-1511487218050).</span><br><span class="line">Spark session available as <span class="string">'spark'</span>.</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  <span class="string">'_/</span></span><br><span class="line"><span class="string">   /___/ .__/\_,_/_/ /_/\_\   version 2.2.0</span></span><br><span class="line"><span class="string">      /_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Using Scala version 2.11.8 (OpenJDK 64-Bit Server VM, Java 1.8.0_151)</span></span><br><span class="line"><span class="string">Type in expressions to have them evaluated.</span></span><br><span class="line"><span class="string">Type :help for more information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">scala&gt;</span></span><br></pre></td></tr></table></figure>
<p>来执行一个文本统计</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val textFile = sc.textFile(<span class="string">"file:///home/hadoop-2.8.2/input/test.txt"</span>).count()</span><br><span class="line"></span><br><span class="line">textFile: Long = 4</span><br></pre></td></tr></table></figure>
<p>默认读取的文件是 Hadoop HDFS 上的,上面的示例是从本地文件读取</p>
<p>来一个从 HDFS 上读取的,在这里我们之前在 HDFS 上传了个 tets.txt 的文档,在这里就可以直接使用了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val textFile = sc.textFile(<span class="string">"test2.txt"</span>);textFile.count()</span><br><span class="line"></span><br><span class="line">textFile: org.apache.spark.rdd.RDD[String] = test2.txt MapPartitionsRDD[19] at textFile at &lt;console&gt;:26</span><br><span class="line">res7: Long = 4</span><br></pre></td></tr></table></figure>
<p>可以看到结果是一样的</p>
<h2 id="Spark-SQL-和-DataFrames"><a href="#Spark-SQL-和-DataFrames" class="headerlink" title="Spark SQL 和 DataFrames"></a>Spark SQL 和 DataFrames</h2><p>Spark SQL 是 Spark 内嵌的模块，用于结构化数据。在 Spark 程序中可以使用 SQL 查询语句或 DataFrame API。DataFrames 和 SQL 提供了通用的方式来连接多种数据源，支持 Hive、Avro、Parquet、ORC、JSON、和 JDBC，并且可以在多种数据源之间执行 join 操作。</p>
<p>下面仍在 Spark shell 中演示一下 Spark SQL 的基本操作，该部分内容主要参考了 Spark SQL、DataFrames 和 Datasets 指南。</p>
<p>Spark SQL 的功能是通过 SQLContext 类来使用的，而创建 SQLContext 是通过 SparkContext 创建的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; var df = spark.read.json(<span class="string">"file:///home/spark-2.2.0-bin-without-hadoop/examples/src/main/resources/employees.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [name: string, salary: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show()</span><br><span class="line">+-------+------+</span><br><span class="line">|   name|salary|</span><br><span class="line">+-------+------+</span><br><span class="line">|Michael|  3000|</span><br><span class="line">|   Andy|  4500|</span><br><span class="line">| Justin|  3500|</span><br><span class="line">|  Berta|  4000|</span><br><span class="line">+-------+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure>
<p>再来执行2条查询语句<br><code>df.select(&quot;name&quot;).show()</code><br><code>df.filter(df(&quot;salary&quot;)&gt;=4000).show()</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(<span class="string">"name"</span>).show()</span><br><span class="line">+-------+</span><br><span class="line">|   name|</span><br><span class="line">+-------+</span><br><span class="line">|Michael|</span><br><span class="line">|   Andy|</span><br><span class="line">| Justin|</span><br><span class="line">|  Berta|</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; df.filter(df(<span class="string">"salary"</span>)&gt;=4000).show()</span><br><span class="line">+-----+------+</span><br><span class="line">| name|salary|</span><br><span class="line">+-----+------+</span><br><span class="line">| Andy|  4500|</span><br><span class="line">|Berta|  4000|</span><br><span class="line">+-----+------+</span><br></pre></td></tr></table></figure>
<p>执行一条 sql 语句试试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.registerTempTable(<span class="string">"employees"</span>)</span><br><span class="line">warning: there was one deprecation warning; re-run with -deprecation <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from employees"</span>).show()</span><br><span class="line">+-------+------+</span><br><span class="line">|   name|salary|</span><br><span class="line">+-------+------+</span><br><span class="line">|Michael|  3000|</span><br><span class="line">|   Andy|  4500|</span><br><span class="line">| Justin|  3500|</span><br><span class="line">|  Berta|  4000|</span><br><span class="line">+-------+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from employees where salary &gt;= 4000"</span>).show()</span><br><span class="line">+-----+------+</span><br><span class="line">| name|salary|</span><br><span class="line">+-----+------+</span><br><span class="line">| Andy|  4500|</span><br><span class="line">|Berta|  4000|</span><br><span class="line">+-----+------+</span><br></pre></td></tr></table></figure>
<p>其实还有很多功能呢, <a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame</a> ,这里先写2个试试,后续再细节学习</p>
<p>这篇文章暂时先写到这,还有后续的 Spark Streaming ,想先学学看流式计算Storm,之后对比下看看写一篇文章</p>
<p>接下来,熟悉 Scala 语法写一个 JavaScala 应用程序来通过 SparkAPI 单独部署一下试试</p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>这篇文章写下来等于将当时搭建 Spark 环境重复了一遍, 也是一遍敲命令,一遍记录下来,温故而知新,自己也学到不少东西,棒棒哒💯</p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据之路 Hadoop 环境搭建]]></title>
      <url>http://blog.joylau.cn/2017/11/22/Hadoop-Integrate-Build/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>首先要说明的是,本篇文章用的 Hadoop 的版本都是目前最新版,直接在官网上下载就可以了<br>有些命令可能已经不适应之前的旧版本了,以最新的版的为准<br>以下操作命令均是在服务的根目录下,使用的是相对目录</p>
<h3 id="当前版本说明"><a href="#当前版本说明" class="headerlink" title="当前版本说明"></a>当前版本说明</h3><ul>
<li>Hadoop 版本2.8.2</li>
<li>操作系统版本 centos 7.2</li>
</ul>
<h2 id="首先需要做的"><a href="#首先需要做的" class="headerlink" title="首先需要做的"></a>首先需要做的</h2><p>安装 jdk 环境,再此不做详细叙述了,需要注意的是 jdk 的环境变量的配置</p>
<p><code>yum install openjdk1.8xxxxx</code> 这个安装的是 jre环境,并不是 jdk,安装 jdk</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.7.0-openjdk java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>
<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>最后一行添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk</span><br></pre></td></tr></table></figure>
<p>紧接着,让环境变量生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc    <span class="comment"># 使变量设置生效</span></span><br></pre></td></tr></table></figure>
<p>设置好之后,再看下是否生效了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span>     <span class="comment"># 检验变量值</span></span><br><span class="line">java -version</span><br><span class="line"><span class="variable">$JAVA_HOME</span>/bin/java -version  <span class="comment"># 与直接执行 java -version 一样就没什么问题了</span></span><br></pre></td></tr></table></figure>
<h2 id="Hadoop-单机环境搭建及测试运行"><a href="#Hadoop-单机环境搭建及测试运行" class="headerlink" title="Hadoop 单机环境搭建及测试运行"></a>Hadoop 单机环境搭建及测试运行</h2><p>官网下载 Hadoop 包</p>
<p>上传到服务器上,解压 tar -zxf hadoop-2.8.2.tar.gz<br>解压完了,我们可以查看下版本信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop version</span><br><span class="line"></span><br><span class="line">Hadoop 2.8.2</span><br><span class="line">Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r 66c47f2a01ad9637879e95f80c41f798373828fb</span><br><span class="line">Compiled by jdu on 2017-10-19T20:39Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From <span class="built_in">source</span> with checksum dce55e5afe30c210816b39b631a53b1d</span><br><span class="line">This <span class="built_in">command</span> was run using /home/hadoop-2.8.2/share/hadoop/common/hadoop-common-2.8.2.jar</span><br></pre></td></tr></table></figure>
<p>出现上述信息就没有什么问题</p>
<p>接下来,就可以运行 Hadoop 自带的列子了,例子的目录在 /share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.2.jar</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 创建1个输入目录,输出目录不用创建,在命令中会自动创建,如果创建了,会提示目录已经存在,再次运行示例程序化,删除输出目录即可</span><br><span class="line">mkdir ./input</span><br><span class="line"></span><br><span class="line">// 看看都有哪些例子</span><br><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.2.jar</span><br><span class="line"></span><br><span class="line">An example program must be given as the first argument.</span><br><span class="line">Valid program names are:</span><br><span class="line">  aggregatewordcount: An Aggregate based map/reduce program that counts the words <span class="keyword">in</span> the input files.</span><br><span class="line">  aggregatewordhist: An Aggregate based map/reduce program that computes the histogram of the words <span class="keyword">in</span> the input files.</span><br><span class="line">  bbp: A map/reduce program that uses Bailey-Borwein-Plouffe to compute exact digits of Pi.</span><br><span class="line">  dbcount: An example job that count the pageview counts from a database.</span><br><span class="line">  distbbp: A map/reduce program that uses a BBP-type formula to compute exact bits of Pi.</span><br><span class="line">  grep: A map/reduce program that counts the matches of a regex <span class="keyword">in</span> the input.</span><br><span class="line">  join: A job that effects a join over sorted, equally partitioned datasets</span><br><span class="line">  multifilewc: A job that counts words from several files.</span><br><span class="line">  pentomino: A map/reduce tile laying program to find solutions to pentomino problems.</span><br><span class="line">  pi: A map/reduce program that estimates Pi using a quasi-Monte Carlo method.</span><br><span class="line">  randomtextwriter: A map/reduce program that writes 10GB of random textual data per node.</span><br><span class="line">  randomwriter: A map/reduce program that writes 10GB of random data per node.</span><br><span class="line">  secondarysort: An example defining a secondary sort to the reduce.</span><br><span class="line">  sort: A map/reduce program that sorts the data written by the random writer.</span><br><span class="line">  sudoku: A sudoku solver.</span><br><span class="line">  teragen: Generate data <span class="keyword">for</span> the terasort</span><br><span class="line">  terasort: Run the terasort</span><br><span class="line">  teravalidate: Checking results of terasort</span><br><span class="line">  wordcount: A map/reduce program that counts the words <span class="keyword">in</span> the input files.</span><br><span class="line">  wordmean: A map/reduce program that counts the average length of the words <span class="keyword">in</span> the input files.</span><br><span class="line">  wordmedian: A map/reduce program that counts the median length of the words <span class="keyword">in</span> the input files.</span><br><span class="line">  wordstandarddeviation: A map/reduce program that counts the standard deviation of the length of the words <span class="keyword">in</span> the input files.</span><br></pre></td></tr></table></figure>
<p>接下来,跑一个经典的 wordcount ,再次之前,我们创建一个文本以供程序统计</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat input/test.txt</span><br><span class="line">vi input/test.txt</span><br><span class="line"></span><br><span class="line">插入一些字符</span><br></pre></td></tr></table></figure>
<p>开始记录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.2.jar wordcount ./input/test.txt ./output/</span><br></pre></td></tr></table></figure>
<p>截取部分输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">17/11/22 11:30:08 INFO mapred.LocalJobRunner: reduce &gt; reduce</span><br><span class="line">17/11/22 11:30:08 INFO mapred.Task: Task &apos;attempt_local1247748922_0001_r_000000_0&apos; done.</span><br><span class="line">17/11/22 11:30:08 INFO mapred.LocalJobRunner: Finishing task: attempt_local1247748922_0001_r_000000_0</span><br><span class="line">17/11/22 11:30:08 INFO mapred.LocalJobRunner: reduce task executor complete.</span><br><span class="line">17/11/22 11:30:08 INFO mapreduce.Job: Job job_local1247748922_0001 running in uber mode : false</span><br><span class="line">17/11/22 11:30:08 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">17/11/22 11:30:08 INFO mapreduce.Job: Job job_local1247748922_0001 completed successfully</span><br><span class="line">17/11/22 11:30:08 INFO mapreduce.Job: Counters: 30</span><br><span class="line">	File System Counters</span><br><span class="line">		FILE: Number of bytes read=605002</span><br><span class="line">		FILE: Number of bytes written=1267054</span><br><span class="line">		FILE: Number of read operations=0</span><br><span class="line">		FILE: Number of large read operations=0</span><br><span class="line">		FILE: Number of write operations=0</span><br><span class="line">	Map-Reduce Framework</span><br><span class="line">		Map input records=38</span><br><span class="line">		Map output records=35</span><br><span class="line">		Map output bytes=277</span><br><span class="line">		Map output materialized bytes=251</span><br><span class="line">		Input split bytes=103</span><br><span class="line">		Combine input records=35</span><br><span class="line">		Combine output records=23</span><br><span class="line">		Reduce input groups=23</span><br><span class="line">		Reduce shuffle bytes=251</span><br><span class="line">		Reduce input records=23</span><br><span class="line">		Reduce output records=23</span><br><span class="line">		Spilled Records=46</span><br><span class="line">		Shuffled Maps =1</span><br><span class="line">		Failed Shuffles=0</span><br><span class="line">		Merged Map outputs=1</span><br><span class="line">		GC time elapsed (ms)=21</span><br><span class="line">		Total committed heap usage (bytes)=461250560</span><br><span class="line">	Shuffle Errors</span><br><span class="line">		BAD_ID=0</span><br><span class="line">		CONNECTION=0</span><br><span class="line">		IO_ERROR=0</span><br><span class="line">		WRONG_LENGTH=0</span><br><span class="line">		WRONG_MAP=0</span><br><span class="line">		WRONG_REDUCE=0</span><br><span class="line">	File Input Format Counters</span><br><span class="line">		Bytes Read=140</span><br><span class="line">	File Output Format Counters</span><br><span class="line">		Bytes Written=165</span><br></pre></td></tr></table></figure>
<p>看下输出情况</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cat output/*</span><br><span class="line">hello	1</span><br><span class="line">jjjjj	1</span><br><span class="line">joylau	2</span><br><span class="line">world	1</span><br></pre></td></tr></table></figure>
<p>可以看到每个单词出现的次数</p>
<h2 id="Hadoop-伪分布式环境搭建"><a href="#Hadoop-伪分布式环境搭建" class="headerlink" title="Hadoop 伪分布式环境搭建"></a>Hadoop 伪分布式环境搭建</h2><p>我们需要设置 HADOOP 环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop-2.8.2</span><br><span class="line"><span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/temp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/temp/hdfs/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/temp/hdfs/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置完成后，执行 NameNode 和 DataNode 的格式化:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br><span class="line">./bin/hdfs datanode -format</span><br></pre></td></tr></table></figure>
<p>现在启动 Hadoop 伪分布式服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-dfs.sh </span><br><span class="line">./sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>以前版本的命令是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure>
<p>jps查看启动是否成功启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"></span><br><span class="line">5360 Jps</span><br><span class="line">4935 ResourceManager</span><br><span class="line">5225 NodeManager</span><br><span class="line">4494 NameNode</span><br><span class="line">4782 SecondaryNameNode</span><br></pre></td></tr></table></figure>
<p>成功启动后，可以访问 Web 界面 <a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a> 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件<br>运行 stop-all.sh 来关闭所有进程</p>
<h2 id="伪分布式环境实例运行"><a href="#伪分布式环境实例运行" class="headerlink" title="伪分布式环境实例运行"></a>伪分布式环境实例运行</h2><p>上面实例的运行时单机版的,伪分布式的实例的运行的不同之处在于,读取文件是在 HDFS 上的</p>
<p>按照常规的尿性,我们先创建个用户目录 ,以后就可以以相对目录来进行文件的操作了</p>
<p>这里得说下 hdfs 的常用 shell</p>
<ul>
<li>创建目录 <code>./bin/hdfs dfs -mkdir -p /user/root</code></li>
<li>上传文档 <code>./bin/hdfs dfs -put ./input/test.txt input</code></li>
<li>删除文档 <code>./bin/hdfs dfs -rmr input</code></li>
<li>产看文档 <code>./bin/hdfs dfs -cat input/*</code></li>
<li>查看列表 <code>./bin/hdfs dfs -ls input</code></li>
<li>拉取文档 <code>./bin/hdfs dfs -get output/* ./output</code></li>
</ul>
<p>有了这些简单的命令,现在就可以运行实例</p>
<p>先创建用户目录 <code>./bin/hdfs dfs -mkdir -p /user/root</code><br>在新建一个目录 <code>./bin/hdfs dfs -mkdir input</code><br>将之前的文件上传 <code>./bin/hdfs dfs -put ./input/test.txt input</code><br>上传成功后还可以查看下时候有文件 <code>./bin/hdfs dfs -ls input</code><br>运行实例  <code>./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.2.jar wordcount input/ output/</code><br>查看运行结果 <code>./bin/hdfs dfs -cat output/*</code></p>
<p>其实这些命令都是类 linux 命令,熟悉 linux 命令,这些都很好操作</p>
<p>可以看到统计结果和单机版是一致的</p>
<p>将结果导出 <code>./bin/hdfs dfs -get output ./output</code></p>
<p>其实 在 <a href="http://host:50070/explorer.html#/user/root" target="_blank" rel="noopener">http://host:50070/explorer.html#/user/root</a> 可以看到上传和输出的文件目录</p>
<h3 id="YARN-启动"><a href="#YARN-启动" class="headerlink" title="YARN 启动"></a>YARN 启动</h3><p>伪分布式不启动 YARN 也可以，一般不会影响程序执行<br>YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性</p>
<p>首先修改配置文件 mapred-site.xml，这边需要先进行重命名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>
<p>增加配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置文件 yarn-site.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-yarn.sh      $ 启动YARN</span><br><span class="line">./sbin/mr-jobhistory-daemon.sh start historyserver  <span class="comment"># 开启历史服务器，才能在Web中查看任务运行情况</span></span><br></pre></td></tr></table></figure>
<p>启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。<br>观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，<br>启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。<br>启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：<a href="http://localhost:8088/cluster" target="_blank" rel="noopener">http://localhost:8088/cluster</a></p>
<h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><ul>
<li>内存不足:一开始虚拟机只开了2G 内存,出现了很多错误,后来将虚拟机内存开到8G, 就没有问题了</li>
<li>hosts 配置,一开始启动的时候会报不识别 localhost 的域名的错误,更改下 hosts文件即可,加一行</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost HostName</span><br></pre></td></tr></table></figure>
<ul>
<li>put 上传文档时报错:There are 0 datanode(s) running and no node(s) are excluded in this operation<br>这可能由于之前在目录下有操作,有一些其他的文档,只要清空指定的目录,然后再格式化 namenode 和 datanode 就可以了</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>《Hadoop 权威指南 : 第四版》 –Tom White 著</p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>这篇文章写下来等于将当时搭建 Hadoop 环境重复了一遍,花了不少功夫的,一遍敲命令,一遍记录下来,温故而知新,自己也学到不少东西,棒棒哒💯</p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据之路 Hadoop 的学习流程]]></title>
      <url>http://blog.joylau.cn/2017/11/17/Hadoop-Study-Way/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>首先记录,在这篇文章书写前,自己并不是刚刚上手 Hadoop, 其实学了有一段时间了<br>在这段时间内,由最开始的对 Hadoop 的懵懂无知到渐渐的熟悉 Hadoop 大致的开发流程<br>整个过程越来越清晰<br>于是就想着,把自己接下来在 Hadoop 上的学习计划记录下来</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>了解 Hadoop 背景,开发作用</li>
<li>然后搭建Hadoop集群，先让它在自己电脑上运行。</li>
<li>学习分布式文件系统HDFS。</li>
<li>学习分布式计算框架MapReduce</li>
<li>学习流式计算Storm</li>
<li>学习分布式协作服务Zookeeper</li>
<li>学习Hive—数据仓库工具</li>
<li>学习Hbase—分布式存储系统</li>
<li>学习Spark</li>
<li>学习Scala</li>
<li>学习Spark开发技术</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这些技术在工作中是远远不够的,但也不是工作中每项都有用到了<br>就自己现在公司的大数据环境来说,还有像 impala,zookeeper,spark,kafka…等等<br>等有新的学习计划再补充吧</p>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 使用 Elasticsearch 进行更复杂的查询]]></title>
      <url>http://blog.joylau.cn/2017/11/16/SpringBoot-Elasticsearch-Complex/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="首先要说"><a href="#首先要说" class="headerlink" title="首先要说"></a>首先要说</h2><p>java 操作 elasticsearch 有四种方式</p>
<ol>
<li>调用 elasticsearch 的 restapis 接口</li>
<li>调用 java elasticsearch client 的接口</li>
<li>整合 spring data 使用 ElasticsearchTemplate 封装的方法</li>
<li>继承 ElasticsearchRepository 接口调用方法</li>
</ol>
<h2 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h2><p>我们先来准备一些数据,写了一个之前的获取JoyMusic 的音乐数据的项目来说,项目的结构是这样的:<br><img src="http://image.joylau.cn/blog/elasticsearch-test-project.png" alt="elasticsearch-test-project"><br>获取数据的主要代码如下,只是为了增加数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = JoylauElasticsearchApplication.class,webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PlaylistDAO playlistDAO;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> SongDAO songDAO;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> CommentDAO commentDAO;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String personalizeds = restTemplate.getForObject(<span class="string">"http://localhost:3003/apis/v1"</span>+<span class="string">"/personalized"</span>,String.class);</span><br><span class="line">		JSONObject perJSON = JSONObject.parseObject(personalizeds);</span><br><span class="line">		JSONArray perArr = perJSON.getJSONArray(<span class="string">"result"</span>);</span><br><span class="line">		List&lt;Playlist&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;Integer&gt; playListIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Object o : perArr) &#123;</span><br><span class="line">			JSONObject playListJSON = JSONObject.parseObject(o.toString());</span><br><span class="line">			Playlist playlist = <span class="keyword">new</span> Playlist();</span><br><span class="line">			playlist.setId(playListJSON.getIntValue(<span class="string">"id"</span>));</span><br><span class="line">			playListIds.add(playlist.getId());</span><br><span class="line">			playlist.setName(playListJSON.getString(<span class="string">"name"</span>));</span><br><span class="line">			playlist.setPicURL(playListJSON.getString(<span class="string">"picUrl"</span>));</span><br><span class="line">			playlist.setPlayCount(playListJSON.getIntValue(<span class="string">"playCount"</span>));</span><br><span class="line">			playlist.setBookCount(playListJSON.getIntValue(<span class="string">"bookCount"</span>));</span><br><span class="line">			playlist.setTrackCount(playListJSON.getIntValue(<span class="string">"trackCount"</span>));</span><br><span class="line">			list.add(playlist);</span><br><span class="line">		&#125;</span><br><span class="line">		playlistDAO.saveAll(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*存储歌曲*/</span></span><br><span class="line">		List&lt;Integer&gt; songIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;Song&gt; songList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Integer playListId : playListIds) &#123;</span><br><span class="line">			String res = restTemplate.getForObject(<span class="string">"http://localhost:3003/apis/v1"</span>+<span class="string">"/playlist/detail?id="</span>+playListId,String.class);</span><br><span class="line">			JSONArray songJSONArr = JSONObject.parseObject(res).getJSONObject(<span class="string">"playlist"</span>).getJSONArray(<span class="string">"tracks"</span>);</span><br><span class="line">			<span class="keyword">for</span> (Object o : songJSONArr) &#123;</span><br><span class="line">				JSONObject songJSON = JSONObject.parseObject(o.toString());</span><br><span class="line">				Song song = <span class="keyword">new</span> Song();</span><br><span class="line">				song.setId(songJSON.getIntValue(<span class="string">"id"</span>));</span><br><span class="line">				songIds.add(song.getId());</span><br><span class="line">				song.setName(songJSON.getString(<span class="string">"name"</span>));</span><br><span class="line">				song.setAuthor(getSongAuthor(songJSON.getJSONArray(<span class="string">"ar"</span>)));</span><br><span class="line">				song.setTime(songJSON.getLong(<span class="string">"dt"</span>));</span><br><span class="line">				song.setPlaylistId(playListId);</span><br><span class="line">				song.setPicURL(songJSON.getJSONObject(<span class="string">"al"</span>).getString(<span class="string">"picUrl"</span>));</span><br><span class="line">				song.setAlbum(songJSON.getJSONObject(<span class="string">"al"</span>).getString(<span class="string">"name"</span>));</span><br><span class="line">				songList.add(song);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		songDAO.saveAll(songList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*存储评论*/</span></span><br><span class="line">		List&lt;Comment&gt; commentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Integer songId : songIds) &#123;</span><br><span class="line">			String res = restTemplate.getForObject(<span class="string">"http://localhost:3003/apis/v1"</span>+<span class="string">"/comment/music?id="</span>+songId+<span class="string">"&amp;offset="</span>+<span class="number">300</span>,String.class);</span><br><span class="line">			JSONArray commentArr = JSONObject.parseObject(res).getJSONArray(<span class="string">"comments"</span>);</span><br><span class="line">			<span class="keyword">for</span> (Object o : commentArr) &#123;</span><br><span class="line">				JSONObject commentJSON = JSONObject.parseObject(o.toString());</span><br><span class="line">				Comment comment = <span class="keyword">new</span> Comment();</span><br><span class="line">				comment.setId(commentJSON.getIntValue(<span class="string">"commentId"</span>));</span><br><span class="line">				comment.setSongId(songId);</span><br><span class="line">				comment.setContent(commentJSON.getString(<span class="string">"content"</span>));</span><br><span class="line">				comment.setAuthor(commentJSON.getJSONObject(<span class="string">"user"</span>).getString(<span class="string">"nickname"</span>));</span><br><span class="line">				comment.setPicUrl(commentJSON.getJSONObject(<span class="string">"user"</span>).getString(<span class="string">"avatarUrl"</span>));</span><br><span class="line">				comment.setTime(commentJSON.getLong(<span class="string">"time"</span>));</span><br><span class="line">				comment.setSupport(commentJSON.getIntValue(<span class="string">"likedCount"</span>));</span><br><span class="line">				commentList.add(comment);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		commentDAO.saveAll(commentList);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取歌曲作者名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> arr arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getSongAuthor</span><span class="params">(JSONArray arr)</span></span>&#123;</span><br><span class="line">		StringBuilder author = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="keyword">for</span> (Object o : arr) &#123;</span><br><span class="line">			JSONObject json = JSONObject.parseObject(o.toString());</span><br><span class="line">			author.append(json.getString(<span class="string">"name"</span>));</span><br><span class="line">			<span class="keyword">if</span> (arr.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">				author.append(<span class="string">","</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> author.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跑了起来之后, elasticsearch 增加的数据如下:<br><img src="http://image.joylau.cn/blog/elasticsearch-test-guide.png" alt="elasticsearch-test-guide"><br><img src="http://image.joylau.cn/blog/elasticsearch-test-data.png" alt="elasticsearch-test-data"></p>
<p>现在数据有了,接下来就是使用各种方法了</p>
<h2 id="ElasticSearchTemplate-和-ElasticsearchRepository-的关系"><a href="#ElasticSearchTemplate-和-ElasticsearchRepository-的关系" class="headerlink" title="ElasticSearchTemplate 和 ElasticsearchRepository 的关系"></a>ElasticSearchTemplate 和 ElasticsearchRepository 的关系</h2><p>ElasticSearchTemplate 是 spring date 对 elasticsearch 客户端 Java API 的封装,而 ElasticsearchRepository,是ElasticSearchTemplate更深层次的封装,可以使用注解,很类似以前 mybatis 的使用<br>ElasticSearchTemplate提供的方法更多,ElasticsearchRepository能用的方法其实全部都在而 ElasticSearchTemplate 都有实现<br>我们只要能熟悉调用的 ElasticSearchTemplate 里面的方法操作<br>ElasticsearchRepository都能够会操作</p>
<h2 id="ElasticSearchTemplate"><a href="#ElasticSearchTemplate" class="headerlink" title="ElasticSearchTemplate"></a>ElasticSearchTemplate</h2><p>一些很底层的方法，我们最常用的就是elasticsearchTemplate.queryForList(searchQuery, class);<br>而这里面最主要的就是构建searchQuery，一下总结几个最常用的searchQuery以备忘<br>searchQuery能构建好,其他的就很简单了</p>
<h3 id="queryStringQuery"><a href="#queryStringQuery" class="headerlink" title="queryStringQuery"></a>queryStringQuery</h3><p>单字符串全文查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单字符串模糊查询，默认排序。将从所有字段中查找包含传来的word分词后字符串的数据集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStringQuerySong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(queryStringQuery(<span class="string">"Time"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query_string&quot; : &#123;</span><br><span class="line">    &quot;query&quot; : &quot;Time&quot;,</span><br><span class="line">    &quot;fields&quot; : [ ],</span><br><span class="line">    &quot;use_dis_max&quot; : true,</span><br><span class="line">    &quot;tie_breaker&quot; : 0.0,</span><br><span class="line">    &quot;default_operator&quot; : &quot;or&quot;,</span><br><span class="line">    &quot;auto_generate_phrase_queries&quot; : false,</span><br><span class="line">    &quot;max_determinized_states&quot; : 10000,</span><br><span class="line">    &quot;enable_position_increments&quot; : true,</span><br><span class="line">    &quot;fuzziness&quot; : &quot;AUTO&quot;,</span><br><span class="line">    &quot;fuzzy_prefix_length&quot; : 0,</span><br><span class="line">    &quot;fuzzy_max_expansions&quot; : 50,</span><br><span class="line">    &quot;phrase_slop&quot; : 0,</span><br><span class="line">    &quot;escape&quot; : false,</span><br><span class="line">    &quot;split_on_whitespace&quot; : true,</span><br><span class="line">    &quot;boost&quot; : 1.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Time&quot;,&quot;author&quot;:&quot;Cat naps&quot;,&quot;id&quot;:459733590,&quot;name&quot;:&quot;Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/9DmApLeDwutb4HpuhD_E-Q==/18624627464667106.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:86465&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Go Time&quot;,&quot;author&quot;:&quot;Mark Petrie&quot;,&quot;id&quot;:29717271,&quot;name&quot;:&quot;Go Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/TJe468hZr_0ndQRfTAKdqA==/3233663697760186.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:136071&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Out of Time&quot;,&quot;author&quot;:&quot;R.E.M.&quot;,&quot;id&quot;:20282663,&quot;name&quot;:&quot;Losing My Religion&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/wYtpqN8Yu2jamQwdM6ugGg==/6638851209090428.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:269270&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Time Flies... 1994-2009&quot;,&quot;author&quot;:&quot;Oasis&quot;,&quot;id&quot;:17822660,&quot;name&quot;:&quot;Cigarettes &amp; Alcohol&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/qDgXElJRtSsuqNwsTzW8lw==/667403558069001.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:291853&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Electric Warrior&quot;,&quot;author&quot;:&quot;T. Rex&quot;,&quot;id&quot;:29848501,&quot;name&quot;:&quot;There Was A Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/dn1MwEBfBcL4l6isrnEwDw==/3246857839528733.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:60577&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Ride On Time&quot;,&quot;author&quot;:&quot;山下達郎&quot;,&quot;id&quot;:22693846,&quot;name&quot;:&quot;DAYDREAM&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/GaQVveQiyTIqecs7hhoYpA==/749866930165154.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:273476&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Blossom Chronicles&quot;,&quot;author&quot;:&quot;Philter&quot;,&quot;id&quot;:21375446,&quot;name&quot;:&quot;Adventure Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/YjMS5_kM3u9PCUU0lcRK8g==/6657542907248762.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:207412&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Decimus&quot;,&quot;author&quot;:&quot;Audio Machine&quot;,&quot;id&quot;:36586631,&quot;name&quot;:&quot;Ashes of Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/7InBepjNDGCzpzH8Feyw9A==/3395291908535260.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:190826&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;In Time: The Best Of R.E.M. 1988-2003&quot;,&quot;author&quot;:&quot;R.E.M.&quot;,&quot;id&quot;:20283068,&quot;name&quot;:&quot;Bad Day&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/aZXu5ulRJvH4dnoWPjxb3A==/18277181789089107.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:248111&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;It&apos;s a Poppin&apos; Time&quot;,&quot;author&quot;:&quot;山下達郎&quot;,&quot;id&quot;:22693864,&quot;name&quot;:&quot;HEY THERE LONELY GIRL&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/PGZlyXk20_-5d6E3pDEKpg==/815837627833461.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:325956&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Shire Music Annual Selection - Myth&quot;,&quot;author&quot;:&quot;Shire Music,Songs To Your Eyes,&quot;,&quot;id&quot;:34916751,&quot;name&quot;:&quot;Between Space And Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/CCqLd2ly2XuuSPz0IW0u-g==/3284241233077333.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:222456&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Double Live Doggie Style I&quot;,&quot;author&quot;:&quot;X-Ray Dog&quot;,&quot;id&quot;:26246058,&quot;name&quot;:&quot;Time Will Tell&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/oYEIMWnAvpuRDTk4g_l-lg==/2503587976473913.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:202133&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Ghost Of Tom Joad&quot;,&quot;author&quot;:&quot;Bruce Springsteen&quot;,&quot;id&quot;:16657852,&quot;name&quot;:&quot;Straight Time (Album Version)&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/yK0V-aD3Myh4xorvwUtCrw==/17889054184179160.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:210651&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Epic Action &amp; Adventure Vol. 6&quot;,&quot;author&quot;:&quot;Epic Score&quot;,&quot;id&quot;:4054121,&quot;name&quot;:&quot;Time Will Remember Us&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/uN8AYI3sQEgoECuSYmi9Eg==/658607465082090.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:165000&#125;</span><br></pre></td></tr></table></figure>
<p>我们修改一下排序方式，按照id从大到小排序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 单字符串模糊查询，单字段排序。 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStringQueryWeightSong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(queryStringQuery(<span class="string">"Time"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>,<span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"id"</span>))).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以使用注解,这么写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStringQueryWeightSong</span><span class="params">(@PageableDefault(sort = <span class="string">"id"</span>, direction = Sort.Direction.DESC)</span> Pageable pageable)</span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(queryStringQuery(<span class="string">"Time"</span>)).withPageable(pageable).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query_string&quot; : &#123;</span><br><span class="line">    &quot;query&quot; : &quot;Time&quot;,</span><br><span class="line">    &quot;fields&quot; : [ ],</span><br><span class="line">    &quot;use_dis_max&quot; : true,</span><br><span class="line">    &quot;tie_breaker&quot; : 0.0,</span><br><span class="line">    &quot;default_operator&quot; : &quot;or&quot;,</span><br><span class="line">    &quot;auto_generate_phrase_queries&quot; : false,</span><br><span class="line">    &quot;max_determinized_states&quot; : 10000,</span><br><span class="line">    &quot;enable_position_increments&quot; : true,</span><br><span class="line">    &quot;fuzziness&quot; : &quot;AUTO&quot;,</span><br><span class="line">    &quot;fuzzy_prefix_length&quot; : 0,</span><br><span class="line">    &quot;fuzzy_max_expansions&quot; : 50,</span><br><span class="line">    &quot;phrase_slop&quot; : 0,</span><br><span class="line">    &quot;escape&quot; : false,</span><br><span class="line">    &quot;split_on_whitespace&quot; : true,</span><br><span class="line">    &quot;boost&quot; : 1.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Time&quot;,&quot;author&quot;:&quot;Cat naps&quot;,&quot;id&quot;:459733590,&quot;name&quot;:&quot;Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/9DmApLeDwutb4HpuhD_E-Q==/18624627464667106.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:86465&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Decimus&quot;,&quot;author&quot;:&quot;Audio Machine&quot;,&quot;id&quot;:36586631,&quot;name&quot;:&quot;Ashes of Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/7InBepjNDGCzpzH8Feyw9A==/3395291908535260.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:190826&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Shire Music Annual Selection - Myth&quot;,&quot;author&quot;:&quot;Shire Music,Songs To Your Eyes,&quot;,&quot;id&quot;:34916751,&quot;name&quot;:&quot;Between Space And Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/CCqLd2ly2XuuSPz0IW0u-g==/3284241233077333.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:222456&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Electric Warrior&quot;,&quot;author&quot;:&quot;T. Rex&quot;,&quot;id&quot;:29848501,&quot;name&quot;:&quot;There Was A Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/dn1MwEBfBcL4l6isrnEwDw==/3246857839528733.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:60577&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Go Time&quot;,&quot;author&quot;:&quot;Mark Petrie&quot;,&quot;id&quot;:29717271,&quot;name&quot;:&quot;Go Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/TJe468hZr_0ndQRfTAKdqA==/3233663697760186.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:136071&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Double Live Doggie Style I&quot;,&quot;author&quot;:&quot;X-Ray Dog&quot;,&quot;id&quot;:26246058,&quot;name&quot;:&quot;Time Will Tell&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/oYEIMWnAvpuRDTk4g_l-lg==/2503587976473913.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:202133&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;It&apos;s a Poppin&apos; Time&quot;,&quot;author&quot;:&quot;山下達郎&quot;,&quot;id&quot;:22693864,&quot;name&quot;:&quot;HEY THERE LONELY GIRL&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/PGZlyXk20_-5d6E3pDEKpg==/815837627833461.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:325956&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Ride On Time&quot;,&quot;author&quot;:&quot;山下達郎&quot;,&quot;id&quot;:22693846,&quot;name&quot;:&quot;DAYDREAM&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/GaQVveQiyTIqecs7hhoYpA==/749866930165154.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:273476&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Blossom Chronicles&quot;,&quot;author&quot;:&quot;Philter&quot;,&quot;id&quot;:21375446,&quot;name&quot;:&quot;Adventure Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/YjMS5_kM3u9PCUU0lcRK8g==/6657542907248762.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:207412&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;In Time: The Best Of R.E.M. 1988-2003&quot;,&quot;author&quot;:&quot;R.E.M.&quot;,&quot;id&quot;:20283068,&quot;name&quot;:&quot;Bad Day&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/aZXu5ulRJvH4dnoWPjxb3A==/18277181789089107.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:248111&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Out of Time&quot;,&quot;author&quot;:&quot;R.E.M.&quot;,&quot;id&quot;:20282663,&quot;name&quot;:&quot;Losing My Religion&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/wYtpqN8Yu2jamQwdM6ugGg==/6638851209090428.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:269270&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Time Flies... 1994-2009&quot;,&quot;author&quot;:&quot;Oasis&quot;,&quot;id&quot;:17822660,&quot;name&quot;:&quot;Cigarettes &amp; Alcohol&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/qDgXElJRtSsuqNwsTzW8lw==/667403558069001.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:291853&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Ghost Of Tom Joad&quot;,&quot;author&quot;:&quot;Bruce Springsteen&quot;,&quot;id&quot;:16657852,&quot;name&quot;:&quot;Straight Time (Album Version)&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/yK0V-aD3Myh4xorvwUtCrw==/17889054184179160.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:210651&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Epic Action &amp; Adventure Vol. 6&quot;,&quot;author&quot;:&quot;Epic Score&quot;,&quot;id&quot;:4054121,&quot;name&quot;:&quot;Time Will Remember Us&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/uN8AYI3sQEgoECuSYmi9Eg==/658607465082090.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:165000&#125;</span><br></pre></td></tr></table></figure>
<h3 id="matchQuery"><a href="#matchQuery" class="headerlink" title="matchQuery"></a>matchQuery</h3><p>查询某个字段中模糊包含目标字符串，使用matchQuery</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 单字段对某字符串模糊查询 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQuerySong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(matchQuery(<span class="string">"name"</span>,<span class="string">"Time"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;match&quot; : &#123;</span><br><span class="line">    &quot;name&quot; : &#123;</span><br><span class="line">      &quot;query&quot; : &quot;Time&quot;,</span><br><span class="line">      &quot;operator&quot; : &quot;OR&quot;,</span><br><span class="line">      &quot;prefix_length&quot; : 0,</span><br><span class="line">      &quot;max_expansions&quot; : 50,</span><br><span class="line">      &quot;fuzzy_transpositions&quot; : true,</span><br><span class="line">      &quot;lenient&quot; : false,</span><br><span class="line">      &quot;zero_terms_query&quot; : &quot;NONE&quot;,</span><br><span class="line">      &quot;boost&quot; : 1.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Time&quot;,&quot;author&quot;:&quot;Cat naps&quot;,&quot;id&quot;:459733590,&quot;name&quot;:&quot;Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/9DmApLeDwutb4HpuhD_E-Q==/18624627464667106.jpg&quot;,&quot;playlistId&quot;:900228548,&quot;time&quot;:86465&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Go Time&quot;,&quot;author&quot;:&quot;Mark Petrie&quot;,&quot;id&quot;:29717271,&quot;name&quot;:&quot;Go Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/TJe468hZr_0ndQRfTAKdqA==/3233663697760186.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:136071&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Blossom Chronicles&quot;,&quot;author&quot;:&quot;Philter&quot;,&quot;id&quot;:21375446,&quot;name&quot;:&quot;Adventure Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/YjMS5_kM3u9PCUU0lcRK8g==/6657542907248762.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:207412&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Shire Music Annual Selection - Myth&quot;,&quot;author&quot;:&quot;Shire Music,Songs To Your Eyes,&quot;,&quot;id&quot;:34916751,&quot;name&quot;:&quot;Between Space And Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/CCqLd2ly2XuuSPz0IW0u-g==/3284241233077333.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:222456&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Electric Warrior&quot;,&quot;author&quot;:&quot;T. Rex&quot;,&quot;id&quot;:29848501,&quot;name&quot;:&quot;There Was A Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/dn1MwEBfBcL4l6isrnEwDw==/3246857839528733.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:60577&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Double Live Doggie Style I&quot;,&quot;author&quot;:&quot;X-Ray Dog&quot;,&quot;id&quot;:26246058,&quot;name&quot;:&quot;Time Will Tell&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/oYEIMWnAvpuRDTk4g_l-lg==/2503587976473913.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:202133&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Decimus&quot;,&quot;author&quot;:&quot;Audio Machine&quot;,&quot;id&quot;:36586631,&quot;name&quot;:&quot;Ashes of Time&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/7InBepjNDGCzpzH8Feyw9A==/3395291908535260.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:190826&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;The Ghost Of Tom Joad&quot;,&quot;author&quot;:&quot;Bruce Springsteen&quot;,&quot;id&quot;:16657852,&quot;name&quot;:&quot;Straight Time (Album Version)&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/yK0V-aD3Myh4xorvwUtCrw==/17889054184179160.jpg&quot;,&quot;playlistId&quot;:772430182,&quot;time&quot;:210651&#125;</span><br><span class="line">&#123;&quot;album&quot;:&quot;Epic Action &amp; Adventure Vol. 6&quot;,&quot;author&quot;:&quot;Epic Score&quot;,&quot;id&quot;:4054121,&quot;name&quot;:&quot;Time Will Remember Us&quot;,&quot;picURL&quot;:&quot;http://p1.music.126.net/uN8AYI3sQEgoECuSYmi9Eg==/658607465082090.jpg&quot;,&quot;playlistId&quot;:636015704,&quot;time&quot;:165000&#125;</span><br></pre></td></tr></table></figure>
<h3 id="matchPhraseQuery"><a href="#matchPhraseQuery" class="headerlink" title="matchPhraseQuery"></a>matchPhraseQuery</h3><p>PhraseMatch查询，短语匹配</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 单字段对某短语进行匹配查询，短语分词的顺序会影响结果 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">phraseMatchSong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(matchPhraseQuery(<span class="string">"name"</span>,<span class="string">"Time"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="termQuery"><a href="#termQuery" class="headerlink" title="termQuery"></a>termQuery</h3><p>这个是最严格的匹配，属于低级查询，不进行分词的，参考这篇文章 <a href="http://www.cnblogs.com/muniaofeiyu/p/5616316.html" target="_blank" rel="noopener">http://www.cnblogs.com/muniaofeiyu/p/5616316.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * term匹配，即不分词匹配，你传来什么值就会拿你传的值去做完全匹配 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuerySong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(termQuery(<span class="string">"name"</span>,<span class="string">"Time"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="multiMatchQuery"><a href="#multiMatchQuery" class="headerlink" title="multiMatchQuery"></a>multiMatchQuery</h3><p>多个字段匹配某字符串,如果我们希望name，author两个字段去匹配某个字符串，只要任何一个字段包括该字符串即可，就可以使用multiMatchQuery。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 多字段匹配 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiMatchQuerySong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(multiMatchQuery(<span class="string">"time"</span>,<span class="string">"name"</span>,<span class="string">"author"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完全包含查询"><a href="#完全包含查询" class="headerlink" title="完全包含查询"></a>完全包含查询</h3><p>之前的查询中，当我们输入“我天”时，ES会把分词后所有包含“我”和“天”的都查询出来，如果我们希望必须是包含了两个字的才能被查询出来，那么我们就需要设置一下Operator。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 单字段包含所有输入 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQueryOperatorSong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(matchQuery(<span class="string">"name"</span>,<span class="string">"真的"</span>).operator(Operator.AND)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无论是matchQuery，multiMatchQuery，queryStringQuery等，都可以设置operator。默认为Or，设置为And后，就会把符合包含所有输入的才查出来。<br>如果是and的话，譬如用户输入了5个词，但包含了4个，也是显示不出来的。我们可以通过设置精度来控制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 单字段包含所有输入(按比例包含) </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQueryOperatorWithMinimumShouldMatchSong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(matchQuery(<span class="string">"name"</span>,<span class="string">"time"</span>).operator(Operator.AND).minimumShouldMatch(<span class="string">"80%"</span>)).withPageable(of(<span class="number">0</span>,<span class="number">100</span>)).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>minimumShouldMatch可以用在match查询中，设置最少匹配了多少百分比的能查询出来。</p>
<h3 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h3><p>即boolQuery，可以设置多个条件的查询方式。它的作用是用来组合多个Query，有四种方式来组合，must，mustnot，filter，should。<br>must代表返回的文档必须满足must子句的条件，会参与计算分值；<br>filter代表返回的文档必须满足filter子句的条件，但不会参与计算分值；<br>should代表返回的文档可能满足should子句的条件，也可能不满足，有多个should时满足任何一个就可以，通过minimum_should_match设置至少满足几个。<br>mustnot代表必须不满足子句的条件。<br>譬如我想查询name包含“XXX”，且userId=“2345098”，且time最好小于165000的结果。那么就可以使用boolQuery来组合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 多字段合并查询 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boolQuerySong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder().withQuery(boolQuery().must(termQuery(<span class="string">"userId"</span>, <span class="string">"2345098"</span>))</span><br><span class="line">            .should(rangeQuery(<span class="string">"time"</span>).lt(<span class="number">165000</span>)).must(matchQuery(<span class="string">"name"</span>, <span class="string">"time"</span>))).build();</span><br><span class="line">    System.out.println(searchQuery.getQuery().toString());</span><br><span class="line">    List&lt;Song&gt; songList = songDAO.search(searchQuery).getContent();</span><br><span class="line">    <span class="keyword">for</span> (Song song : songList) &#123;</span><br><span class="line">        System.out.println(JSONObject.toJSONString(song));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细点的看这篇 <a href="http://blog.csdn.net/dm_vincent/article/details/41743955" target="_blank" rel="noopener">http://blog.csdn.net/dm_vincent/article/details/41743955</a><br>boolQuery使用场景非常广泛，应该是主要学习的知识之一。</p>
<h3 id="Query和Filter的区别"><a href="#Query和Filter的区别" class="headerlink" title="Query和Filter的区别"></a>Query和Filter的区别</h3><p>query和Filter都是QueryBuilder，也就是说在使用时，你把Filter的条件放到withQuery里也行，反过来也行。那么它们两个区别在哪？<br>查询在Query查询上下文和Filter过滤器上下文中，执行的操作是不一样的：</p>
<p>1、查询：是在使用query进行查询时的执行环境，比如使用search的时候。<br>在查询上下文中，查询会回答这个问题——“这个文档是否匹配这个查询，它的相关度高么？”<br>ES中索引的数据都会存储一个_score分值，分值越高就代表越匹配。即使lucene使用倒排索引，对于某个搜索的分值计算还是需要一定的时间消耗。</p>
<p>2、过滤器：在使用filter参数时候的执行环境，比如在bool查询中使用Must_not或者filter<br>在过滤器上下文中，查询会回答这个问题——“这个文档是否匹配？”<br>它不会去计算任何分值，也不会关心返回的排序问题，因此效率会高一点。<br>另外，经常使用过滤器，ES会自动的缓存过滤器的内容，这对于查询来说，会提高很多性能。</p>
<h2 id="ElasticsearchRepository"><a href="#ElasticsearchRepository" class="headerlink" title="ElasticsearchRepository"></a>ElasticsearchRepository</h2><p>ElasticsearchRepository接口的方法有</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">ElasticsearchCrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">index</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">search</span><span class="params">(QueryBuilder var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FacetedPage&lt;T&gt; <span class="title">search</span><span class="params">(QueryBuilder var1, Pageable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FacetedPage&lt;T&gt; <span class="title">search</span><span class="params">(SearchQuery var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">searchSimilar</span><span class="params">(T var1, String[] var2, Pageable var3)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行复杂查询最常用的就是 FacetedPage<t> search(SearchQuery var1); 这个方法了，需要的参数是 SearchQuery<br>主要是看QueryBuilder和SearchQuery两个参数，要完成一些特殊查询就主要看构建这两个参数。<br>我们先来看看它们之间的类关系<br><img src="http://img.blog.csdn.net/20170726163702583?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnlhbGVpeGlhb3d1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></t></p>
<p>实际使用中，我们的主要任务就是构建NativeSearchQuery来完成一些复杂的查询的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NativeSearchQuery</span><span class="params">(QueryBuilder query, QueryBuilder filter, List&lt;SortBuilder&gt; sorts, Field[] highlightFields)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.query = query;  </span><br><span class="line">        <span class="keyword">this</span>.filter = filter;  </span><br><span class="line">        <span class="keyword">this</span>.sorts = sorts;  </span><br><span class="line">        <span class="keyword">this</span>.highlightFields = highlightFields;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到要构建NativeSearchQuery，主要是需要几个构造参数</p>
<p>当然了，我们没必要实现所有的参数。<br>可以看出来，大概是需要QueryBuilder，filter，和排序的SortBuilder，和高亮的字段。<br>一般情况下，我们不是直接是new NativeSearchQuery，而是使用NativeSearchQueryBuilder。<br>通过NativeSearchQueryBuilder.withQuery(QueryBuilder1).withFilter(QueryBuilder2).withSort(SortBuilder1).withXXXX().build();这样的方式来完成NativeSearchQuery的构建。<br>从名字就能看出来，QueryBuilder主要用来构建查询条件、过滤条件，SortBuilder主要是构建排序。</p>
<p>很幸运的 ElasticsearchRepository 里的 SearchQuery 也就是上述描述的 temple 的 SearchQuery，2 者可以共用</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FastJSON 还有这样的用法 涨姿势了]]></title>
      <url>http://blog.joylau.cn/2017/11/15/FastJson-JSONPath/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JSONPath。这是一个很强大的功能，可以在java框架中当作对象查询语言（OQL）来使用</p>
<h3 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h3><table>
<thead>
<tr>
<th style="text-align:left">JSONPATH</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">根对象，例如$.name</td>
</tr>
<tr>
<td style="text-align:left">[num]</td>
<td style="text-align:left">数组访问，其中num是数字，可以是负数。例如$[0].leader.departments[-1].name</td>
</tr>
<tr>
<td style="text-align:left">[num0,num1,num2…]</td>
<td style="text-align:left">数组多个元素访问，其中num是数字，可以是负数，返回数组中的多个元素。例如$[0,3,-2,5]</td>
</tr>
<tr>
<td style="text-align:left">[start:end]</td>
<td style="text-align:left">数组范围访问，其中start和end是开始小表和结束下标，可以是负数，返回数组中的多个元素。例如$[0:5]</td>
</tr>
<tr>
<td style="text-align:left">[start:end :step]</td>
<td style="text-align:left">数组范围访问，其中start和end是开始小表和结束下标，可以是负数；step是步长，返回数组中的多个元素。例如$[0:5:2]</td>
</tr>
<tr>
<td style="text-align:left">[?(key)]</td>
<td style="text-align:left">对象属性非空过滤，例如$.departs[?(name)]</td>
</tr>
<tr>
<td style="text-align:left">[key &gt; 123]</td>
<td style="text-align:left">数值类型对象属性比较过滤，例如$.departs[id &gt;= 123]，比较操作符支持=,!=,&gt;,&gt;=,&lt;,&lt;=</td>
</tr>
<tr>
<td style="text-align:left">[key = ‘123’]</td>
<td style="text-align:left">字符串类型对象属性比较过滤，例如$.departs[name = ‘123’]，比较操作符支持=,!=,&gt;,&gt;=,&lt;,&lt;=</td>
</tr>
<tr>
<td style="text-align:left">[key like ‘aa%’]</td>
<td style="text-align:left">字符串类型like过滤，例如$.departs[name like ‘sz*’]，通配符只支持% 支持not like</td>
</tr>
<tr>
<td style="text-align:left">[key rlike ‘regexpr’]</td>
<td style="text-align:left">字符串类型正则匹配过滤，例如departs[name like ‘aa(.)*’]，正则语法为jdk的正则语法，支持not rlike</td>
</tr>
<tr>
<td style="text-align:left">[key in (‘v0’, ‘v1’)]</td>
<td style="text-align:left">IN过滤, 支持字符串和数值类型 例如: $.departs[name in (‘wenshao’,’Yako’)] $.departs[id not in (101,102)]</td>
</tr>
<tr>
<td style="text-align:left">[key between 234 and 456]</td>
<td style="text-align:left">BETWEEN过滤, 支持数值类型，支持not between 例如: $.departs[id between 101 and 201]$.departs[id not between 101 and 201]length() 或者 size()    数组长度。例如$.values.size() 支持类型java.util.Map和java.util.Collection和数组</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">属性访问，例如$.name</td>
</tr>
<tr>
<td style="text-align:left">..</td>
<td style="text-align:left">deepScan属性访问，例如$..name</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">对象的所有属性，例如$.leader.*</td>
</tr>
<tr>
<td style="text-align:left">[‘key’]</td>
<td style="text-align:left">属性访问。例如$[‘name’]</td>
</tr>
<tr>
<td style="text-align:left">[‘key0’,’key1’]</td>
<td style="text-align:left">多个属性访问。例如$[‘id’,’name’]</td>
</tr>
</tbody>
</table>
<h3 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h3><table>
<thead>
<tr>
<th style="text-align:left">JSONPath</th>
<th style="text-align:left">语义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">根对象</td>
</tr>
<tr>
<td style="text-align:left">$[-1]</td>
<td style="text-align:left">最后元素</td>
</tr>
<tr>
<td style="text-align:left">$[:-2]</td>
<td style="text-align:left">第1个至倒数第2个</td>
</tr>
<tr>
<td style="text-align:left">$[1:]</td>
<td style="text-align:left">第2个之后所有元素</td>
</tr>
<tr>
<td style="text-align:left">$[1,2,3]</td>
<td style="text-align:left">集合中1,2,3个元素</td>
</tr>
</tbody>
</table>
<h3 id="java-示例"><a href="#java-示例" class="headerlink" title="java 示例"></a>java 示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"store"</span>: &#123;</span><br><span class="line">    <span class="attr">"book"</span>: [ </span><br><span class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"reference"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"Nigel Rees"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Sayings of the Century"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">8.95</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"Evelyn Waugh"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Sword of Honour"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">12.99</span>,</span><br><span class="line">        <span class="attr">"isbn"</span>: <span class="string">"0-553-21311-3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"bicycle"</span>: &#123;</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">19.95</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jsonPathTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JSONObject json = jsonTest();<span class="comment">//调用自定义的jsonTest()方法获得json对象，生成上面的json</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出book[0]的author值</span></span><br><span class="line">    String author = JsonPath.read(json, <span class="string">"$.store.book[0].author"</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出全部author的值，使用Iterator迭代</span></span><br><span class="line">    List&lt;String&gt; authors = JsonPath.read(json, <span class="string">"$.store.book[*].author"</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出book[*]中category == 'reference'的book</span></span><br><span class="line">    List&lt;Object&gt; books = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference')]"</span>);               </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出book[*]中price&gt;10的book</span></span><br><span class="line">    List&lt;Object&gt; books = JsonPath.read(json, <span class="string">"$.store.book[?(@.price&gt;10)]"</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出book[*]中含有isbn元素的book</span></span><br><span class="line">    List&lt;Object&gt; books = JsonPath.read(json, <span class="string">"$.store.book[?(@.isbn)]"</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//输出该json中所有price的值</span></span><br><span class="line">    List&lt;Double&gt; prices = JsonPath.read(json, <span class="string">"$..price"</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//可以提前编辑一个路径，并多次使用它</span></span><br><span class="line">    JsonPath path = JsonPath.compile(<span class="string">"$.store.book[*]"</span>); </span><br><span class="line">    List&lt;Object&gt; books = path.read(json); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 工具类篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm install 居然出错了]]></title>
      <url>http://blog.joylau.cn/2017/11/07/Node-Install-Error/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>今天在安装完nodejs后执行 npm install 居然出错了</p>
<p>npm: relocation error: npm: symbol SSL_set_cert_cb, version libssl.so.10 not defined in file libssl.</p>
<p>npm: relocation error: npm: symbol SSL_set_cert_cb, version libssl.so.10 not defined in file libssl.so.10 with link time reference”, “rc”: 127, “stderr”: “npm: relocation error: npm: symbol SSL_set_cert_cb, version libssl.so.10 not defined in file libssl.so.10 with link time reference\n”, “stderr_lines”: [“npm: relocation error: npm: symbol SSL_set_cert_cb, version libssl.so.10 not defined in file libssl.so.10 with link time reference</p>
<p>解决办法：</p>
<p>  yum -y install openssl</p>
<p>  如果已经安装，就更新一下</p>
<p>  yum -y update openssl</p>]]></content>
      
        <categories>
            
            <category> Node篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 整合 Kafka 踩坑记录]]></title>
      <url>http://blog.joylau.cn/2017/11/02/SpringBoot-Kafka/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h3><p>SpringBoot 在1.5版本后就有了 starter， 但是在依赖列表中却没有找到相应的依赖，原因是名字不叫starter，傻傻的我还用JavaConfig 配置了一遍<br>现在看下整合 starter 之后的是怎么样的吧！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个依赖其实就是starter， 不需要些版本，SpringBoot会自己选择版本</p>
<p>yml配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 192.168.10.192:9092</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: secondary-identification</span><br><span class="line">    producer:</span><br><span class="line">      batch-size: 65536</span><br><span class="line">      buffer-memory: 524288</span><br></pre></td></tr></table></figure>
<p>默认只需要 bootstrap-servers 和 group-id 即可</p>
<p>接下来 生产者 和 消费者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">"index-vehicle"</span>,<span class="string">"key"</span>,<span class="string">"hello,kafka"</span>  + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = &#123;<span class="string">"index-vehicle"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h3><p>可以发消息，但是SpringBoot始终收不到，我用Kafka自带的工具却可以收到，很气愤，搞了好长时间都没有解决<br>后来遍访Google和官方文档，终于找到原因了，只要修改下配置文件的一个配置即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name://host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">listeners=PLAINTEXT://0.0.0.0:9092</span><br></pre></td></tr></table></figure>
<p>上面的额这个 listeners，因为我的程序是加了@KafkaListener 来监听消息的，需要开启一个这样的配置项</p>
<p>这项配置项的含义在此也备注下：</p>
<blockquote>
<blockquote>
<p>监听列表(以逗号分隔 不同的协议(如plaintext,trace,ssl、不同的IP和端口)),hostname如果设置为0.0.0.0则绑定所有的网卡地址；如果hostname为空则绑定默认的网卡。如果没有配置则默认为java.net.InetAddress.getCanonicalHostName()</p>
</blockquote>
</blockquote>
<p>这2个坑在此记录下</p>
<h2 id="一些常用命令在此记录下"><a href="#一些常用命令在此记录下" class="headerlink" title="一些常用命令在此记录下"></a>一些常用命令在此记录下</h2><p>zookeeper-server-start.bat ../../config/zookeeper.properties   : 开启自带的zookeeper<br>kafka-server-start.bat ../../config.properties   ： 开启kafka<br>kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic myTopic  –from-beginning : 控制台接受指定topic消息<br>kafka-console-producer.bat –broker-list localhost:9092 –topic myTopic  :   指定topic发送消息</p>
<p>注意的是用命令行创建的producer绑定的主题topic需要用命令行先创建topic，已经创建的就直接发送就好了</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA 中 SpringBoot 项目热部署]]></title>
      <url>http://blog.joylau.cn/2017/11/01/SpringBoot-IDEA-DevTools/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>本文转自：<a href="http://blog.csdn.net/jsshaojinjie/article/details/64125458" target="_blank" rel="noopener">http://blog.csdn.net/jsshaojinjie/article/details/64125458</a></p>
<p>maven dependencies增加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>project增加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--fork :  如果没有该项配置，devtools不会起作用，即应用不会restart --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>idea设置</p>
<p><img src="http://img.blog.csdn.net/20170320144352296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzaGFvamluamll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"></p>
<p>ctrl+shift+alt+/</p>
<p><img src="http://img.blog.csdn.net/20170320144426734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzaGFvamluamll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"><br><img src="http://img.blog.csdn.net/20170320144446687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzaGFvamluamll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"></p>
<p>重启项目即可。</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 读取 JSON 文件并转化为 JSON 对象]]></title>
      <url>http://blog.joylau.cn/2017/10/30/SpringBoot-ReadJSONFile/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="通过注解读取文件"><a href="#通过注解读取文件" class="headerlink" title="通过注解读取文件"></a>通过注解读取文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"classpath:static/json/addTask.json"</span>)</span><br><span class="line">Resource addTaskJson;</span><br></pre></td></tr></table></figure>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><table>
<thead>
<tr>
<th style="text-align:left">前缀</th>
<th style="text-align:left">例子</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">classpath:</td>
<td style="text-align:left">classpath:com/myapp/config.xml</td>
<td style="text-align:left">从classpath中加载</td>
</tr>
<tr>
<td style="text-align:left">file:</td>
<td style="text-align:left">file:/data/config.xml</td>
<td style="text-align:left">作为 URL 从文件系统中加载</td>
</tr>
<tr>
<td style="text-align:left">http:</td>
<td style="text-align:left"><a href="http://myserver/logo.png" target="_blank" rel="noopener">http://myserver/logo.png</a></td>
<td style="text-align:left">作为 URL 加载</td>
</tr>
<tr>
<td style="text-align:left">(none)</td>
<td style="text-align:left">/data/config.xml</td>
<td style="text-align:left">根据 ApplicationContext 进行判断</td>
</tr>
</tbody>
</table>
<p>摘自于Spring Framework参考手册</p>
<h3 id="转化为-字符串-转化为-JSON-对象"><a href="#转化为-字符串-转化为-JSON-对象" class="headerlink" title="转化为 字符串 转化为 JSON 对象"></a>转化为 字符串 转化为 JSON 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonStr = <span class="keyword">new</span> String(IOUtils.readFully(addTaskJson.getInputStream(), -<span class="number">1</span>,<span class="keyword">true</span>));</span><br><span class="line">JSONObject json = JSONObject.parseObject(jsonStr);</span><br></pre></td></tr></table></figure>
<p>注意： 该方法需要 jdk1.8的环境</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot 连接 Oracle 及 Navicat for Oracle 绿色版下载]]></title>
      <url>http://blog.joylau.cn/2017/10/26/SpringBoot-Oracle/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="SpringBoot-连接-Oracle"><a href="#SpringBoot-连接-Oracle" class="headerlink" title="SpringBoot 连接 Oracle"></a>SpringBoot 连接 Oracle</h2><h3 id="pom-文件配置"><a href="#pom-文件配置" class="headerlink" title="pom 文件配置"></a>pom 文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意： com.oracle.ojdbc6.12.1.0.2 在中央仓库没有，需要单独下载下来，再安装到本地仓库</p>
<h3 id="yml文件配置"><a href="#yml文件配置" class="headerlink" title="yml文件配置"></a>yml文件配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:oracle:thin:@192.168.10.240:1522:orcl12c</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">C##itmscz</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">itmscz</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>接下来的套路都一样了，写好model实体类，注册个接口，然后就可以直接增删改查了</p>
<p>model ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_samp_recog"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampRecog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String batch; <span class="comment">// 批次</span></span><br><span class="line">    <span class="keyword">private</span> String img_url; <span class="comment">// 图片路径</span></span><br><span class="line">    <span class="keyword">private</span> String plate_nbr; <span class="comment">// 车辆号牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> plate_nbr_right; <span class="comment">// 车辆号牌是否正确</span></span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> brand_right; <span class="comment">// 品牌是否正确</span></span><br><span class="line">    <span class="keyword">private</span> String veh_type; <span class="comment">// 车辆类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> veh_type_right; <span class="comment">// 车辆类型是否正确</span></span><br><span class="line">    <span class="keyword">private</span> String veh_color; <span class="comment">// 车身颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> veh_color_right; <span class="comment">// 车身颜色是否正确</span></span><br><span class="line">    <span class="keyword">private</span> String sticker_pos; <span class="comment">// 车标位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sticker_pos_right; <span class="comment">// 车标位置是否全部正确</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> is_right; <span class="comment">// 是否全部正确</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> check_status; <span class="comment">//核对状态 1.未核对，2，正在核对，3、已经核对</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dao :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampRecogDAO</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">SampRecog</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看来 SpringBoot 整合数据源的套路都一样，下次整合其他的猜都知道怎么做了</p>
<h2 id="Navicat-for-Oracle"><a href="#Navicat-for-Oracle" class="headerlink" title="Navicat for Oracle"></a>Navicat for Oracle</h2><p>以前一直用的 Navicat Premiun,里面虽然支持 Oracle ，但是支持 Oracle 版本都比较老啦，新一点的根本连接不上去，今天在网上找到个绿色版的 Navicat for Oracle，赶紧记下来，mark一下</p>
<h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>百度云盘：链接: <a href="https://pan.baidu.com/s/1mhPS9wW" target="_blank" rel="noopener">https://pan.baidu.com/s/1mhPS9wW</a> 密码: gtq4</p>
<p>7z的是我替换操作后的</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>下载 3个文件 ：<br>Navicat for Oracle.zip</p>
<p>instantclient-basic-nt-12.1.0.2.0.zip</p>
<p>instantclient-sqlplus-nt-12.1.0.2.0.zip </p>
<p>直接把 instantclient-basic-nt-12.1.0.2.0.zip 解压到 Navicat for Oracle 的解压目录的instantclient_10_2目录下</p>
<p>然后这个目录下多了instantclient_12_1 这个目录 </p>
<p>然后再把instantclient-sqlplus-nt-12.1.0.2.0.zip 解压到 instantclient_12_1下</p>
<p>完成</p>
<p>最后打开Navicat for Oracle 单击   工具-&gt;选项-&gt; OCI </p>
<p>2个路径分别选：</p>
<p>\instantclient_12_1.oci.dll</p>
<p>\instantclient_12_1.sqlplus.exe</p>
<p>然后就可以连接使用了</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch 配置说明 && 遇坑记录]]></title>
      <url>http://blog.joylau.cn/2017/10/25/Elasticsearch-Config/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><pre><code>配置Elasticsearch的集群名称，默认是elasticsearch，Elasticsearch会自动发现在同一网段下的Elasticsearch 节点，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。
cluster.name: elasticsearch

节点名，默认随机指定一个name列表中名字，不能重复。
node.name: &quot;node1&quot;

指定该节点是否有资格被选举成为node，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。
node.master: true

指定该节点是否存储索引数据，默认为true。
node.data: true

设置默认索引分片个数，默认为5片。
index.number_of_shards: 5

设置默认索引副本个数，默认为1个副本。
index.number_of_replicas: 1

设置配置文件的存储路径，默认是es根目录下的config文件夹。
path.conf: /path/to/conf

设置索引数据的存储路径，默认是es根目录下的data文件夹
path.data: /path/to/data

可以设置多个存储路径，用逗号（半角）隔开，如下面这种配置方式：
path.data: /path/to/data1,/path/to/data2

设置临时文件的存储路径，默认是es根目录下的work文件夹。
path.work: /path/to/work

设置日志文件的存储路径，默认是es根目录下的logs文件夹
path.logs: /path/to/logs

设置插件的存放路径，默认是es根目录下的plugins文件夹
path.plugins: /path/to/plugins

设置为true来锁住内存。因为当jvm开始swapping时es的效率会降低，所以要保证它不swap，可以把ES_MIN_MEM和ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。同时也要允许elasticsearch的进程可以锁住内存，linux下可以通过`ulimit -l unlimited`命令。
bootstrap.mlockall: true

设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。
network.bind_host: 192.168.0.1

设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。
network.publish_host: 192.168.0.1

这个参数是用来同时设置bind_host和publish_host上面两个参数。
network.host: 192.168.0.1

设置节点间交互的tcp端口，默认是9300，（集群的时候，注意端口区分）。
transport.tcp.port: 9300

设置是否压缩tcp传输时的数据，默认为false，不压缩。
transport.tcp.compress: true

设置对外服务的http端口，默认为9200（集群的时候，同台机器，注意端口区分）。
http.port: 9200

设置内容的最大容量，默认100mb
http.max_content_length: 100mb

是否使用http协议对外提供服务，默认为true，开启。
http.enabled: false

gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器。
gateway.type: local

设置集群中N个节点启动时进行数据恢复，默认为1。
gateway.recover_after_nodes: 1

设置初始化数据恢复进程的超时时间，默认是5分钟。
gateway.recover_after_time: 5m

设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。
gateway.expected_nodes: 2

初始化数据恢复时，并发恢复线程的个数，默认为4。
cluster.routing.allocation.node_initial_primaries_recoveries: 4

添加删除节点或负载均衡时并发恢复线程的个数，默认为4。
cluster.routing.allocation.node_concurrent_recoveries: 2

设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。
indices.recovery.max_size_per_sec: 0

设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。
indices.recovery.concurrent_streams: 5

设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）
discovery.zen.minimum_master_nodes: 1

设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。
discovery.zen.ping.timeout: 3s

设置是否打开多播发现节点，默认是true。
discovery.zen.ping.multicast.enabled: false

设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。
discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;, &quot;host3[portX-portY]&quot;]
</code></pre><p>低配置云服务器上安装遇到的坑：</p>
<ol>
<li><p>启动elasticsearch直接退出，并返回killed，这里一般是由于内存不足导致的<br>修改es_home/config/jvm.options<br>-Xms2g<br>-Xmx2g</p>
</li>
<li><p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]解决办法是手动修改/etc/sysctl.conf文件，最后面加上一行代码。<br>vm.max_map_count=655360<br>修改/etc/sysctl.conf，修改完成之后，参数可以使用sysctl -p命令来让参数生效</p>
</li>
<li><p>initial heap size [536870912] not equal to maximum heap size [1073741824]; this can cause resize pauses and prevents mlockall from locking the entire heap<br> vi config/jvm.options<br> -Xms 和 -Xmx需要配置的相等，不然无法启动成功</p>
</li>
</ol>
<p>【更新一下内容 2018年4月28日】</p>
<ol start="4">
<li><p>elasticsearch 5 版本以上不能以  root 用户启动，需要新建一个用户<br> useradd elasticsearch<br> passwd elasticsearch<br> chown elasticsearch path -R</p>
</li>
<li><p>elasticsearch 在 linux 下以后台启动的命令<br> sh elasticsearch -d<br> 确认日志没有报错，然后head插件可以连接的上就可以了</p>
</li>
</ol>
<h3 id="2018-06-21-更新"><a href="#2018-06-21-更新" class="headerlink" title="2018-06-21 更新"></a>2018-06-21 更新</h3><ol>
<li><p>ElasticSearch 允许跨域<br> http.cors.enabled: true #开启跨域访问支持，默认为false<br> http.cors.allow-origin: /.*/ #跨域访问允许的域名地址，(允许所有域名)以上使用正则</p>
</li>
<li><p>rpm 安装的 elasticsearch 可以自动以系统服务启动和以root用户启动</p>
</li>
</ol>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop 的第一天]]></title>
      <url>http://blog.joylau.cn/2017/10/25/Hadoop-FristDay/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一天学习 Hadoop 看了不少资料和文档，在这里想总结一下这一天的所学</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>以前一直以为 JavaWeb 和大数据这是2条路子，学了大数据之后就要放下 JavaWeb，就像在项目中使用 Struts2 和 SpringMVC，2者只能选一个使用，在看了一些资料之后，我发现我的认识错了，其实 JavaWeb 和大数据技术就像 SpringMVC 和Spring Boot<br>2者是并行不悖的。大数据技术囊括很多技术，JavaWeb只是其中的一部分，要学习大数据需要学习的技术还有很多。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="Hadoop是干什么的"><a href="#Hadoop是干什么的" class="headerlink" title="Hadoop是干什么的"></a>Hadoop是干什么的</h3><p>一句话概括：适合大数据的分布式存储与计算平台</p>
<h3 id="Hadoop的2个重要部分"><a href="#Hadoop的2个重要部分" class="headerlink" title="Hadoop的2个重要部分"></a>Hadoop的2个重要部分</h3><ul>
<li>HDFS ： 分布式文件系统</li>
<li>MapReduce ： 并行计算框架</li>
</ul>
<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p>主从结构：</p>
<pre><code>主节点： 只有一个 namedode

从节点： 多个 datanode
</code></pre><p>namenode:</p>
<pre><code>负责接收用户请求

维护文件系统的目录结构

管理文件与 block 之间的关系，block 与 datanode 之间的关系
</code></pre><p>datanode:</p>
<pre><code>存储文件

文件被分成若干 Block 存储在磁盘上

为保证数据安全，文件会被备份成多个副本
</code></pre><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>主从结构：</p>
<pre><code>主节点： 只有一个 JobTracker

从节点： 有多个 TaskTracker
</code></pre><p>JobTracker：</p>
<pre><code>接受用户提交的任务

把计算任务分配给 TaskTracker 执行

监控 TaskTracker 的执行情况
</code></pre><p>TaskTracker：</p>
<pre><code>执行 JobTracker 分配的任务
</code></pre>]]></content>
      
        <categories>
            
            <category> 大数据篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 整合使用 Elasticsearch]]></title>
      <url>http://blog.joylau.cn/2017/10/23/SpringBoot-Elasticsearch/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.java.dev.jna<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jna<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意的是：<br>    SpringBoot 的版本和 elasticsearch 的版本问题，在springboot 1.3.5 版本之前支持elasticsearch2.0 以下的版本，springboot1.3.5之后的版本支持elasticsearch5.0以下的版本<br>    net.java.dev.jna 这个依赖是因为启动后报类不存在，加个jna依赖加上后就好了</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="attr">localhost:9300</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意的是：<br>    elasticsearch对外提供的api的端口的是9200，提供各个集群间和客户端通信的是9300<br>    配置文件里 cluster-nodes 配置项如果不填写的话，springboot应用启动时会自动创建内部的 elasticsearch 客户端，你会发现即是本地没开 elasticsearch 服务也能跑起来<br>    配置多个集群的话 cluster-nodes 就配置多条信息，用逗号隔开</p>
<h3 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h3><ul>
<li>主要的一个接口<code>ElasticsearchRepository&lt;T,ID&gt;</code>,第一个是要存储的实体类,第二个参数是 ID 类型</li>
<li>还有个 <code>ElasticsearchCrudRepository</code>，顾名思义就是增删改查</li>
<li>自定义一个接口实现上述接口</li>
<li>定义实体类</li>
<li>自定义实现类可直接注入使用</li>
<li>默认的已经存在了增删改查的方法了,可以直接使用</li>
<li>想要更多的功能可以在接口中实现更多的自定义</li>
</ul>
<p>自定义一个 DAO :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SongDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Song</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义一个实体类 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"songdb"</span>,type = <span class="string">"song"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String commentKeyId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mp3URL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*歌曲封面地址*/</span></span><br><span class="line">    <span class="keyword">private</span> String picURL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*歌曲描述*/</span></span><br><span class="line">    <span class="keyword">private</span> String describe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*专辑*/</span></span><br><span class="line">    <span class="keyword">private</span> String album;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*歌词*/</span></span><br><span class="line">    <span class="keyword">private</span> String lyric;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*mvid*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mvId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<br>    @Document注解里面的几个属性，类比mysql的话是这样：<br>    index –&gt; DB<br>    type –&gt; Table<br>    Document –&gt; row<br>    @Id注解加上后，在Elasticsearch里相应于该列就是主键了，在查询时就可以直接用主键查询，后面一篇会讲到。其实和mysql非常类似，基本就是一个数据库<br>    indexName在上述注解中需要小写</p>
<p>使用的话 注入SongDAO ，之后就可以看到相应的方法了<br>使用起来就是如此简单,感觉使用起来很像MongoDB配置</p>
<h2 id="有一些注解的配置"><a href="#有一些注解的配置" class="headerlink" title="有一些注解的配置"></a>有一些注解的配置</h2><h3 id="有时候使用起来会有一些问题"><a href="#有时候使用起来会有一些问题" class="headerlink" title="有时候使用起来会有一些问题"></a>有时候使用起来会有一些问题</h3><ul>
<li>在默认策略下, Java 实体类叫什么名字,生成后的表名就叫什么,但我们可能并不想这样</li>
<li>同样的道理,有时属性名和字段也并不想一样的<h3 id="注解解决这些问题"><a href="#注解解决这些问题" class="headerlink" title="注解解决这些问题"></a>注解解决这些问题</h3></li>
<li><code>@Id</code> : 标明表的 ID , 自带索引,无需维护</li>
<li><code>@Document</code> : 解决第一个问题</li>
<li><code>@Field</code> : 解决第二个问题，默认不加@Field 有一写默认配置，一旦添加了@Filed注解，所有的默认值都不再生效。此外，如果添加了@Filed注解，那么type字段必须指定</li>
</ul>
<p>入门使用就写到这</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开源许可证]]></title>
      <url>http://blog.joylau.cn/2017/10/20/Open-Source-License/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<blockquote>
<p>本文转自 <a href="http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html" target="_blank" rel="noopener">阮一峰- 开源许可证教程</a></p>
</blockquote>
</blockquote>
<h2 id="开源许可证教程"><a href="#开源许可证教程" class="headerlink" title="开源许可证教程"></a>开源许可证教程</h2><p>作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。</p>
<p>许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （<a href="https://opensource.com/article/17/9/9-open-source-software-rules-startups" target="_blank" rel="noopener">1</a>，<a href="https://opensource.com/article/17/9/open-source-licensing" target="_blank" rel="noopener">2</a>）。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017101101.jpg" alt=""></p>
<h2 id="一、什么是开源许可证"><a href="#一、什么是开源许可证" class="headerlink" title="一、什么是开源许可证"></a>一、什么是开源许可证</h2><p>开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。</p>
<p>版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。</p>
<h2 id="二、开源许可证的种类"><a href="#二、开源许可证的种类" class="headerlink" title="二、开源许可证的种类"></a>二、开源许可证的种类</h2><p>目前，国际公认的开源许可证共有<a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="noopener">80多种</a>。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。</p>
<p>如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入“公共领域”（public domain）。</p>
<p>根据使用条件的不同，开源许可证分成两大类。</p>
<blockquote>
<ul>
<li>宽松式（permissive）许可证</li>
<li>Copyleft 许可证</li>
</ul>
</blockquote>
<h2 id="三、宽松式许可证"><a href="#三、宽松式许可证" class="headerlink" title="三、宽松式许可证"></a>三、宽松式许可证</h2><h3 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h3><p>宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。</p>
<p>它有三个基本特点。</p>
<p><strong>（1）没有使用限制</strong></p>
<p>用户可以使用代码，做任何想做的事情。</p>
<p><strong>（2）没有担保</strong></p>
<p>不保证代码质量，用户自担风险。</p>
<p><strong>（3）披露要求（notice requirement）</strong></p>
<p>用户必须披露原始作者。</p>
<h3 id="3-2-常见许可证"><a href="#3-2-常见许可证" class="headerlink" title="3.2 常见许可证"></a>3.2 常见许可证</h3><p>常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。</p>
<p><strong>（1）BSD（二条款版）</strong></p>
<p>分发软件时，必须保留原始的许可证声明。</p>
<p><strong>（2） BSD（三条款版）</strong></p>
<p>分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。</p>
<p><strong>（3）MIT</strong></p>
<p>分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。</p>
<p><strong>（4）Apache 2</strong></p>
<p>分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。</p>
<h2 id="四、Copyleft-许可证"><a href="#四、Copyleft-许可证" class="headerlink" title="四、Copyleft 许可证"></a>四、Copyleft 许可证</h2><h3 id="4-1-Copyleft-的含义"><a href="#4-1-Copyleft-的含义" class="headerlink" title="4.1 Copyleft 的含义"></a>4.1 Copyleft 的含义</h3><p>Copyleft 是<a href="http://www.ruanyifeng.com/blog/2005/03/post_112.html" target="_blank" rel="noopener">理查德·斯托曼</a>发明的一个词，作为 Copyright （版权）的反义词。</p>
<p>Copyright 直译是“复制权”，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。</p>
<p>但是，它带有前提条件，比宽松式许可证的限制要多。</p>
<blockquote>
<ul>
<li>如果分发二进制格式，必须提供源码</li>
<li>修改后的源码，必须与修改前保持许可证一致</li>
<li>不得在原始许可证以外，附加其他限制</li>
</ul>
</blockquote>
<p>上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。 </p>
<h3 id="4-2-常见许可证"><a href="#4-2-常见许可证" class="headerlink" title="4.2 常见许可证"></a>4.2 常见许可证</h3><p>常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。</p>
<p><strong>（1）Affero GPL (AGPL)</strong></p>
<p>如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。</p>
<p><strong>（2）GPL</strong></p>
<p>如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。</p>
<p><strong>（3）LGPL</strong></p>
<p>如果项目采用动态链接调用该许可证的库，项目可以不用开源。</p>
<p><strong>（4）Mozilla（MPL）</strong></p>
<p>只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。</p>
<h2 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h2><p>本节回答一些开源许可证的常见问题。</p>
<h3 id="5-1-什么叫分发（distribution）？"><a href="#5-1-什么叫分发（distribution）？" class="headerlink" title="5.1 什么叫分发（distribution）？"></a>5.1 什么叫分发（distribution）？</h3><p>除了 Affero GPL (AGPL) ，其他许可证都规定只有在“分发”时，才需要遵守许可证。换言之，如果不“分发”，就不需要遵守。</p>
<p>简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的“人”也指“法人”，因此如果使用方是公司，且只在公司内部使用，也不需要遵守许可证。</p>
<p>云服务（SaaS）是否构成“分发”呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。</p>
<h3 id="5-2-开源软件的专利如何处理？"><a href="#5-2-开源软件的专利如何处理？" class="headerlink" title="5.2 开源软件的专利如何处理？"></a>5.2 开源软件的专利如何处理？</h3><p>某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。</p>
<p>另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。</p>
<p>总得来说，除非有明确的“保留专利”的条款，使用开源软件都不会构成侵犯专利。</p>
<h3 id="5-3-什么是披露要求？"><a href="#5-3-什么是披露要求？" class="headerlink" title="5.3 什么是披露要求？"></a>5.3 什么是披露要求？</h3><p>所有的开源许可证都带有“披露要求”（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。</p>
<p>一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了“披露要求”。</p>
<h3 id="5-4-GPL-病毒是真的吗？"><a href="#5-4-GPL-病毒是真的吗？" class="headerlink" title="5.4  GPL 病毒是真的吗？"></a>5.4  GPL 病毒是真的吗？</h3><p>GPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成“GPL 病毒”。</p>
<p>很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。</p>
<p>但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做“停止侵害”），而不会强制要求你将源码开源，因为《版权法》里面没有相应的规定。</p>]]></content>
      
        <categories>
            
            <category> 开源篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> license </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven --- 一款打包压缩 js css html 的Maven插件]]></title>
      <url>http://blog.joylau.cn/2017/10/16/Maven-ResourceCompressor/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>pom 中引入插件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-compressor-plugins<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>resource-compressor<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>resource-compressor<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cssConfigs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cssConfig</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/static/css<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.min.css<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">cssConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">cssConfigs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jsConfigs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jsConfig</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/static/js<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.min.js<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">munge</span>&gt;</span>true<span class="tag">&lt;/<span class="name">munge</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">jsConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jsConfigs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">htmlConfigs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">htmlConfig</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/templates<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">removeIntertagSpaces</span>&gt;</span>true<span class="tag">&lt;/<span class="name">removeIntertagSpaces</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compressJavaScript</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compressJavaScript</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compressCss</span>&gt;</span>true<span class="tag">&lt;/<span class="name">compressCss</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">htmlConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">htmlConfigs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h2><ul>
<li><code>phase</code> : compile 表明该插件在 compile 时调用</li>
<li><code>goal</code> ： 固定为 resource-compressor 不需要改变</li>
<li><code>cssConfigs</code> , 可配置多个 cssConfig<ul>
<li>cssConfig <ul>
<li>dir： css文件目录</li>
<li>include：包含的css文件，支持通配符</li>
<li>exclude：排除的css文件，支持通配符</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>jsConfigs</code> , 可配置多个 jsConfig<ul>
<li>jsConfig <ul>
<li>dir： js文件目录</li>
<li>include：包含的js文件，支持通配符</li>
<li>exclude：排除的js文件，支持通配符</li>
<li>munge: 是否进行代码混淆，缺省值为 false</li>
<li>preserveAllSemiColons : 保留所有的分号，缺省值为 false</li>
<li>disableOptimizations : 禁用自带的所有优化措施，缺省值为 false</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>htmlConfigs</code> , 可配置多个 htmlConfig<ul>
<li>htmlConfig <ul>
<li>dir： js文件目录</li>
<li>include：包含的js文件，支持通配符</li>
<li>exclude：排除的js文件，支持通配符</li>
<li>removeComments: 是否移除注释，缺省值为 true</li>
<li>removeIntertagSpaces : 是否移除标签之间的空格，缺省值为 false</li>
<li>compressJavaScript : 是否对html里的js代码进行压缩，缺省值为 false</li>
<li>compressCss : 是否对html里的css代码进行压缩，缺省值为 false</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="压缩信息"><a href="#压缩信息" class="headerlink" title="压缩信息"></a>压缩信息</h2><p>当看到以下图片所示的信息后，则压缩成功</p>
<p><img src="http://image.joylau.cn/blog/resource-compressor.png" alt="joylau-compressor-plugins"></p>
<p>例如 ：[INFO] common.js(8.71KB==&gt;4.58KB,47.39%)</p>
<p>表示 ：common.js 源文件大小8.71KB，压缩后大小 4.58KB，压缩率47.39%</p>
<h2 id="GitHub-地址"><a href="#GitHub-地址" class="headerlink" title="GitHub 地址"></a>GitHub 地址</h2><p>源码已开源，地址 ： <a href="https://github.com/JoyLau/joylau-compressor-plugins" target="_blank" rel="noopener">https://github.com/JoyLau/joylau-compressor-plugins</a></p>]]></content>
      
        <categories>
            
            <category> Maven篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当鼠标移入图片上慢慢放大的效果]]></title>
      <url>http://blog.joylau.cn/2017/10/13/CSS3-Image-Scale/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li>今天在浏览网站时，<a href="http://ai.baidu.com/" target="_blank" rel="noopener">http://ai.baidu.com/</a> ，看到一个CSS3的效果:将鼠标放到图片上，图片会稍稍方大一点，当时很好奇是怎么做的</li>
<li>当即百度了一下，有人用js做的，有人用css做的，首先js做的肯定不够好，一看效果就是css3的效果</li>
<li>于是自己查看了下 这块 div 的效果</li>
<li>将压缩的css展开来</li>
<li>原来是这样的：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 鼠标移上去各浏览器的延时效果</span><br><span class="line"><span class="selector-class">.solution-img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-moz-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-ms-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: -webkit-transform .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: -webkit-transform .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: transform .<span class="number">2s</span>,-moz-transform .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>,-webkit-transform .<span class="number">2s</span>,-moz-transform .<span class="number">2s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 鼠标移上去各浏览器的放大倍数</span><br><span class="line"><span class="selector-class">.solution-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.solution-img</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.1);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.1);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.1);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CSS3篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 代码中使用 Scala]]></title>
      <url>http://blog.joylau.cn/2017/09/26/Java-Scala/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>将 Scala 依赖 scala-library 和插件 scala-maven-plugin 添加到 Maven 项目中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-compile-first<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更新完上面的内容之后，你需要等待Maven下载完所有的依赖。</p>
<p>安装IDEA插件 <code>Scala</code><br>现在可以在Java工程中使用Scala代码了<br>创建新的文件夹src/main/scala；<br>Scala Maven插件将会识别这些目录，并且编译其中的Scala文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">object BooksProcessor &#123;</span><br><span class="line">  <span class="function">def <span class="title">filterByAuthor</span><span class="params">(author: String)</span><span class="params">(implicit books: util.ArrayList[Book])</span> </span>= &#123;</span><br><span class="line">    books.filter(book =&gt; book.getAuthor == author)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Scala篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 推荐使用CaffeineCache]]></title>
      <url>http://blog.joylau.cn/2017/09/19/SpringBoot-CaffeineCache/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="今天没有图片"><a href="#今天没有图片" class="headerlink" title="今天没有图片"></a>今天没有图片</h2><p>在做单系统的情况下，我还是比较喜欢使用Google 的 Guava 来做缓存的，结合 SpringBoot 使用非常简单 ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再配置 yml ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spirng:</span><br><span class="line">    cache:</span><br><span class="line">        type: guava</span><br><span class="line">        cache-names: api_cache</span><br><span class="line">        guava:</span><br><span class="line">          spec: maximumSize=300,expireAfterWrite=2m</span><br></pre></td></tr></table></figure>
<p>上述配置了一个 缓存名为 api_cache 的缓存 ，最大数量为300，超时时间为2分钟</p>
<p>接下来，在类中使用注解 @CacheConfig(cacheNames = “api_cache”) 来配置整个类的配置<br>@Cacheable() 注解在方法上来 开启方法的注解</p>
<p>使用很透明</p>
<p>今天再次使用时发现guava.spec提示过期了，查了下文档,文档原话是这样说的：</p>
<blockquote>
<blockquote>
<p>@Deprecated<br>           @DeprecatedConfigurationProperty(<br>               reason = “Caffeine will supersede the Guava support in Spring Boot 2.0”,<br>               replacement = “spring.cache.caffeine.spec”<br>           )</p>
</blockquote>
</blockquote>
<p>原来，在SpringBoot2.0中推荐使用Caffeine，表达式就是spring.cache.caffeine.spec</p>
<p>更改的方法很简单，改下依赖包，换个配置名，又可以愉快的额使用了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更新配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spirng:</span><br><span class="line">    cache:</span><br><span class="line">        <span class="built_in">type</span>: caffeine</span><br><span class="line">        cache-names: api_cache</span><br><span class="line">        caffeine:</span><br><span class="line">          spec: maximumSize=300,expireAfterWrite=2m</span><br></pre></td></tr></table></figure>
<p>通常SpringBoot默认的keyGenerator 是SimpleKeyGenerator，这个策略是以参数作为key值，如果参数为空的，就会返回SimpleKey[]字符串，这对于很多无参的方法的就有问题了<br>我们需要重新这个keyGenerator，实现 <code>org.springframework.cache.interceptor.keyGenerator</code> 这个接口即可，将key值设置为类名+方法名+参数名，这样就不会冲突了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">caffeineKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (target, method, params) -&gt; &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(target.getClass().getName());</span><br><span class="line">        sb.append(method.getName());</span><br><span class="line">        <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">            sb.append(obj.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>感觉无缝切换，继续使用吧！！！</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JoyGame --- 一个情怀游戏平台]]></title>
      <url>http://blog.joylau.cn/2017/09/11/JoyGame/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="制作背景"><a href="#制作背景" class="headerlink" title="制作背景"></a>制作背景</h2><ul>
<li>有时候宅在家里实在不知道玩什么游戏</li>
<li>英雄联盟都玩烂了</li>
<li>哥们提议玩红警</li>
<li>红警是单机啊，一个人玩另一个人怎么办，一个人打电脑有啥意思 =_=|</li>
<li>找对战平台啊，首先下载安装了红警玩家自制的战网对战平台</li>
<li>我个人电脑从来不安装杀毒软件，Windows Defender 一直报毒搞个不停</li>
<li>战网的平台体验也很不好，消息弹个不停，感觉像广告软件</li>
<li>后来换了腾讯对战平台，进入红警起个名字老说含有敏感信息，结果起了半个小时，MDZZ</li>
<li>决定自己了解下对战平台的原理，打算自己写个简单好用的玩</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过socket hook + udp，针对war3来说，支持tcp，先在本地通过hook模拟建立tcp连接，然后将tcp的数据转成外网udp数据发给外网服务器转发给其他客户端，客户端接收到后通过本地tcp模拟连接转发到游戏进程。这个过程中通过中转服务器协助进行p2p。</p>
<center><img src="//image.joylau.cn/blog/JoyGame-zhihu.jpg" alt="JoyGame-zhihu"></center>

<p>上面是知乎上的回答<br>用我自己的话说就是</p>
<blockquote>
<blockquote>
<p>使用JoyGameClient客户端，在本地创建了一个虚拟的IP地址，每一个客户端通过连接远程服务器形成了一个虚拟局域网，这样在游戏的【局域网】选择项中就能找到彼此，这样自然一方创建一个游戏，其他人都可以加入进来了就能愉快的玩耍了。底层通信使用的就是TCP和UDP连接，在同一个房间的玩家都会向服务器发送和下载游戏的实时数据。服务器会向房间里的玩家的客户端上转发数据包，这样就间接形成了一个局域网，就能在一起玩游戏啦。</p>
</blockquote>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>解压，打开JoyGameClient.exe</li>
<li>选择中间的网络服务器,因为你本地肯定是没有服务端的，只能连接远程部署好的服务器<center><img src="//image.joylau.cn/blog/JoyGame-login.png" alt="JoyGame-Login"></center></li>
<li>没有账号，就注册一个账号，注册成功后登录平台<center><img src="//image.joylau.cn/blog/JoyGame-main.png" alt="JoyGame-Login"></center></li>
<li>这是主界面</li>
<li>接下来进入一个你想玩的游戏的房间</li>
<li>设置你的游戏启动主程序<center><img src="//image.joylau.cn/blog/JoyGame-setGamePath.png" alt="JoyGame-Login"></center></li>
<li>下面可以设置启动时游戏的参数，比如玩红警时，加入参数 -win，可以窗口启动</li>
<li>之后点启动，进入游戏就可找到在一个房间的小伙伴了</li>
<li>使用都很简单，看一遍就会</li>
</ul>
<h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul>
<li>可以聊天，发表情，可以加好友。。。额，这些好像没有什么特色</li>
<li><strong><code>可以作弊</code></strong>！！！ 该平台只实现了虚拟局域网的互通，并没有考虑游戏的平衡性，因此你可以在网上下载相应的修改器进行作弊，哥们跟我玩红警，到现在他都不知道为什么盘盘都输给我，<center><img src="//image.joylau.cn/aodamiao/02.jpg" alt="JoyGame-Login"></center>

</li>
</ul>
<h2 id="我想说"><a href="#我想说" class="headerlink" title="我想说"></a>我想说</h2><p>如果你想玩玩以前的一些怀旧游戏，或者你想看看该平台是如何操作实现联机的，还等什么，跟着Joy一起来玩吧<br>私聊我可以给你开个 VIP 、等级直接升到将军哦！虽然没什么用，纯粹装*</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li>JoyGame平台下载： <a href="http://image.joylau.cn/blog/JoyGameClient.rar" target="_blank" rel="noopener">JoyGameClient.rar</a></li>
<li>魔兽争霸3冰封王座v1.26绿色版： <a href="https://pan.baidu.com/share/link?shareid=3779529435&amp;uk=1077172855" target="_blank" rel="noopener">百度网盘</a></li>
<li>红警2共和国之辉：<a href="https://pan.baidu.com/s/1pKQ0aaJ" target="_blank" rel="noopener">百度网盘</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> 程序员篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> 技能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生从未写过如此有趣的代码]]></title>
      <url>http://blog.joylau.cn/2017/09/04/An-Interesting-Code/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<center><br><img src="//image.joylau.cn/blog/an-interesting-code-img1.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code-img2.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code-img3.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code.png" alt="an-interesting-code"><br></center>


<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joylau.code.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by JoyLau on 2017/9/4.</span></span><br><span class="line"><span class="comment"> * cn.joylau.code.test</span></span><br><span class="line"><span class="comment"> * 2587038142@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*定义老妈对象*/</span></span><br><span class="line">        Mother mother = <span class="keyword">new</span> Mother();</span><br><span class="line">        <span class="comment">/*定义老婆对象*/</span></span><br><span class="line">        Wife wife = <span class="keyword">new</span> Wife();</span><br><span class="line">        <span class="comment">/*开始解释昨晚发生的事情*/</span></span><br><span class="line">        <span class="comment">//返回老婆解释的结果（成功 或者失败）</span></span><br><span class="line">        <span class="keyword">boolean</span> w_success = explainToMotherOrWife(wife);</span><br><span class="line">        <span class="comment">//返回老妈解释的结果（成功 或者失败）</span></span><br><span class="line">        <span class="keyword">boolean</span> m_success = explainToMotherOrWife(mother);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果解释都成功了</span></span><br><span class="line">            <span class="keyword">if</span> (w_success &amp;&amp; m_success)&#123;</span><br><span class="line">                <span class="comment">// 愉快的吃晚饭</span></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果有一方解释失败</span></span><br><span class="line">                <span class="comment">//开始开家庭会议，已达成一致意见</span></span><br><span class="line">                familyMetting();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 如果过程中出现任何异常，程序将无法处理，抛出异常，你将会很痛苦</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 这个时候为了缓解你的痛苦，程序为你准备了一种放松的方法</span></span><br><span class="line">            <span class="comment">// 和法哥来一把激动人心的 LOL</span></span><br><span class="line">            playLOLWithFa();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向 老妈 或者 老婆 解释 昨晚发生的事情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 老妈 或者 老婆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解释是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">explainToMotherOrWife</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果对象是 老妈,则向老妈开始解释</span></span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Mother) &#123;</span><br><span class="line">            Mother mother = (Mother)object;</span><br><span class="line">            <span class="comment">// 解释过程</span></span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">            <span class="comment">// 返回向老妈解释的结果</span></span><br><span class="line">            <span class="keyword">return</span> mother.acceptExplain();</span><br><span class="line">        <span class="comment">// 如果对象是老婆,则向老婆开始解释</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Wife wife = (Wife)object;</span><br><span class="line">            <span class="comment">// 解释过程</span></span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">            <span class="comment">// 返回向老婆解释的结果</span></span><br><span class="line">            <span class="keyword">return</span> wife.acceptExplain();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开家庭会议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">familyMetting</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"balabala"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  与法哥一起玩游戏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">playLOLWithFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PentaKill"</span>);</span><br><span class="line">        System.out.println(<span class="string">"66666!~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 程序员篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven --- 将 SpringBoot 项目做成Windows服务(Windows Service)]]></title>
      <url>http://blog.joylau.cn/2017/09/04/Maven-MakeWinServiceForJar/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="一款将-SpringBoot-项目做成Windows-Service-的-Maven-插件"><a href="#一款将-SpringBoot-项目做成Windows-Service-的-Maven-插件" class="headerlink" title="一款将 SpringBoot 项目做成Windows Service 的 Maven 插件"></a>一款将 SpringBoot 项目做成Windows Service 的 Maven 插件</h1><blockquote>
<blockquote>
<p>包括但不限于 SpringBoot ,任何打成 java jar 包运行的 Maven 项目都可以使用</p>
</blockquote>
</blockquote>
<h2 id="编写初衷"><a href="#编写初衷" class="headerlink" title="编写初衷"></a>编写初衷</h2><ul>
<li>公司有个项目</li>
<li>Java 部分的全部使用的是SpringBoot</li>
<li>该项目的部署环境是 Windows</li>
<li>公司想把 各个 SpringBoot 的模块托管一下</li>
<li>托管的使用方式要简单，易用，测试在打包部署的时候要很容易上手</li>
<li>期间尝试过 Spring Boot Admin 和 Jenkins,都说不好用…</li>
<li>于是就想着 将Spring Boot 的服务制作成 Windows 服务，这样基本上会操作电脑的人都会使用了，够简单易用的了吧</li>
<li>花了一上午时间将其中一个 Spring Boot 模块制作成了 Windows Service</li>
<li>发现再做其他的模块的时候，很多工作都是重复的，心想着能够将这个功能提取出来就好了</li>
<li>于是就写了这个 Maven 插件</li>
</ul>
<h2 id="使用演示地址："><a href="#使用演示地址：" class="headerlink" title="使用演示地址："></a>使用演示地址：</h2><center><video src="http://image.joylau.cn/blog/joylau-springboot-daemon-service-video.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center>


<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><ul>
<li>使用方法很简单，和普通的 Maven 插件一样使用就可以了，如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-springboot-daemon-windows<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：</p>
<ol>
<li>这里的 phase 写的是 package,意思是该插件在 mvn package 的时候调用,你也可以根据不同的需求来更改，比如 install, test等等</li>
<li>goal 写 make-win-service 就可以了，不需要改动</li>
<li>一般情况下我们的SpringBoot项目会有其他父项目，这时打包会使用 spring-boot-maven-plugin 插件的 repackage,这样的情况的话，请将该插件放置最后面,否则服务运行的话将提示没有主属性</li>
</ol>
<ul>
<li>在你的项目中按照以上的方式引入插件后，现在可以 打包了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>打包过程中，看到如下日志信息，便制作成功了：<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-package-info.jpg" alt="joylau-springboot-daemon-windows-package-info"></p>
<p>此时，在你项目的target目录下会生成一个 jar 包名字 一样的压缩包<br>进入文件夹，解压这个压缩包，你会看见如下内容的文件<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-package-file.jpg" alt="joylau-springboot-daemon-windows-package-file"><br>注意：</p>
<ol>
<li>5个 bat 文件，请右键以管理员的身份运行</li>
<li>各文件的文件名无特殊情况，不需要修改</li>
<li>一旦安装成了 Windows 服务，目录下的文件就不要移动了</li>
<li>命令运行时，可能会提示安装.NET,安装完成就可运行命令了，不过现在大部分的 Windows 服务器或者个人电脑都会默认安装了.NET,没有的话启用一下就好了，如下图：<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-.net.jpg" alt="joylau-springboot-daemon-windows-.NET"></li>
<li>运行各个命令是注意提示信息，例如卸载完服务都的状态为NonExistent，刚安装完服务后的状态为Stopped，服务成功启动的状态为Started…等等<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-service-status.jpg" alt="joylau-springboot-daemon-windows-service-status"></li>
</ol>
<h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><p>想要在服务启动时添加自定义参数,如 SpringBoot 的配置参数或者 JMV 参数？<br>像如下配置即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-springboot-daemon-windows<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>--server.port=9090<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上面配置了一个 Spring Boot 应用的启动端口9090</p>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul>
<li>打包使用过程中需要联网</li>
<li>文档中有些图片可能看不到，再次刷新下页面就可以</li>
<li>服务的id为artifactId，服务的名称为artifactId+version，服务的描述为description</li>
</ul>
<h2 id="GitHub-地址"><a href="#GitHub-地址" class="headerlink" title="GitHub 地址"></a>GitHub 地址</h2><p>源码已开源，地址 ： <a href="https://github.com/JoyLau/joylau-springboot-daemon-windows" target="_blank" rel="noopener">https://github.com/JoyLau/joylau-springboot-daemon-windows</a></p>]]></content>
      
        <categories>
            
            <category> Maven篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ NoReferer篇 ）]]></title>
      <url>http://blog.joylau.cn/2017/08/29/SpringBoot-JoyMedia-NoReferer/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><center><br><img src="//image.joylau.cn/blog/joymusic-mv-noreferer.png" alt="JoyMusic-NoReferer"><br><img src="//image.joylau.cn/blog/joymusic-mv-video-small.gif" alt="JoyMusic-NoReferer"><br><img src="//image.joylau.cn/blog/joymusic-mv-video-url.gif" alt="JoyMusic-NoReferer"><br></center>

<h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul>
<li><a href="//music.joylau.cn">JoyMusic</a></li>
</ul>
<h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><ul>
<li>为什么解析的 MV 地址无法直接播放，在上一篇文章上我也说明了</li>
<li>相应的解决办法我在上一篇文章上也说明了</li>
<li>这样的方法有很明显的缺点，在上一篇文章也说明了</li>
<li>这个方法只能实现播放的功能，但是距离完美或者说好的展示效果来说，并不满意</li>
<li>我自己就很不满意</li>
</ul>
<h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><h3 id="先说下我是怎么解决的"><a href="#先说下我是怎么解决的" class="headerlink" title="先说下我是怎么解决的"></a>先说下我是怎么解决的</h3><ul>
<li>解决的方法还是一样：去除referer</li>
<li>同时去除了原来使用的jPlayer播放器，因为这个播放器在移动设备下的表现并不是很好，现在改为浏览器自带的视频播放空控件</li>
<li>这个东西就没有什么兼容性了，只要IE10 以上支持HTML5 的都可以观看</li>
<li>正如上面我截图所示的那样，我使用的是 Safari 浏览器，表现效果还是很好的</li>
<li>同时也加入了一些比较棒的小功能：比如下滑看评论的时候，会出现小视频框在右下角</li>
<li>我个人是比较喜欢看评论的，一些音乐或者 MV 页面打开后并不是先听或者先看，都是翻到下面看看评论</li>
<li>这也正是我喜欢网易云音乐的原因之一，网易云音乐的评论大部分都很精彩，有时候听歌不如看评论</li>
</ul>
<h3 id="现在是怎么在页面上去除referer的？"><a href="#现在是怎么在页面上去除referer的？" class="headerlink" title="现在是怎么在页面上去除referer的？"></a>现在是怎么在页面上去除referer的？</h3><ul>
<li>动态生成一个iframe,我本身是比较反对使用iframe的，因为以前使用的extjs使用的多了，都用吐了，而且性能还不是很好</li>
<li>但是在这里它可就起了大作用了</li>
<li>iframe 里的页面就放一个<code>&lt;video&gt;</code></li>
<li>iframe 的宽度高度及video的宽度高度都要调节好，其实这一步花了我不少时间，因为并不是所有的MV宽高的比例是一样的</li>
<li>iframe 的src不能直接写MV的MP4地址，因为那样的话就没有作用了</li>
<li>在src里写js脚本动态生成html页面，页面里面包括的之前提到的video</li>
<li>使用这种方法就可将网站的referer去除掉</li>
<li>这就类似于直接在浏览器的地址栏上输入MP4的地址然后播放</li>
<li>在前一篇的文章分析中，我们知道，这种方法是可以播放的</li>
</ul>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="动态渲染iframe："><a href="#动态渲染iframe：" class="headerlink" title="动态渲染iframe："></a>动态渲染iframe：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">'&lt;iframe \</span></span><br><span class="line"><span class="string">				style="border 1px solid #ff0000" \</span></span><br><span class="line"><span class="string">				scrolling="no" \</span></span><br><span class="line"><span class="string">				frameborder="no" \</span></span><br><span class="line"><span class="string">				allowtransparency="true" '</span> +</span><br><span class="line">			<span class="comment">/*-- Adding style attribute --*/</span></span><br><span class="line">			objectToHtmlAttributes( iframeAttributes ) +</span><br><span class="line">			<span class="string">'id="'</span> + id + <span class="string">'" '</span> +</span><br><span class="line">			<span class="string">'	src="javascript:\'\</span></span><br><span class="line"><span class="string">			&lt;!doctype html&gt;\</span></span><br><span class="line"><span class="string">			&lt;html&gt;\</span></span><br><span class="line"><span class="string">			&lt;head&gt;\</span></span><br><span class="line"><span class="string">			&lt;meta http-equiv=\\\'Content-Type\\\'; content=\\\'text/html\\\'; charset=\\\'utf-8\\\'&gt;\</span></span><br><span class="line"><span class="string">			&lt;style&gt;*&#123;margin:0;padding:0;border:0;&#125;&lt;/style&gt;\</span></span><br><span class="line"><span class="string">			&lt;/head&gt;'</span> +</span><br><span class="line">			<span class="comment">/*-- Function to adapt iframe's size to content's size --*/</span></span><br><span class="line">			<span class="string">'&lt;script&gt;\</span></span><br><span class="line"><span class="string">				 function resizeWindow() &#123;\</span></span><br><span class="line"><span class="string">					var elems  = document.getElementsByTagName(\\\'*\\\'),\</span></span><br><span class="line"><span class="string">						width  = parent.document.getElementById(\\\'panel-c\\\').offsetWidth-7,\</span></span><br><span class="line"><span class="string">						height = 0,\</span></span><br><span class="line"><span class="string">						first  = document.body.firstChild,\</span></span><br><span class="line"><span class="string">						elem;\</span></span><br><span class="line"><span class="string">					if (first.offsetHeight &amp;&amp; first.offsetWidth) &#123;\</span></span><br><span class="line"><span class="string">						width = first.offsetWidth;\</span></span><br><span class="line"><span class="string">						height = first.offsetHeight;\</span></span><br><span class="line"><span class="string">					&#125; else &#123;\</span></span><br><span class="line"><span class="string">						for (var i in elems) &#123;\</span></span><br><span class="line"><span class="string">											elem = elems[i];\</span></span><br><span class="line"><span class="string">											if (!elem.offsetWidth) &#123;\</span></span><br><span class="line"><span class="string">												continue;\</span></span><br><span class="line"><span class="string">											&#125;\</span></span><br><span class="line"><span class="string">											width  = Math.max(elem.offsetWidth, width);\</span></span><br><span class="line"><span class="string">											height = Math.max(elem.offsetHeight, height);\</span></span><br><span class="line"><span class="string">						&#125;\</span></span><br><span class="line"><span class="string">					&#125;\</span></span><br><span class="line"><span class="string">					var ifr = parent.document.getElementById(\\\''</span> + id + <span class="string">'\\\');\</span></span><br><span class="line"><span class="string">					ifr.height = height;\</span></span><br><span class="line"><span class="string">					ifr.width  = width;\</span></span><br><span class="line"><span class="string">				&#125;;\</span></span><br><span class="line"><span class="string">             &lt;/script&gt;'</span> +</span><br><span class="line">			<span class="string">'&lt;body onload=\\\'resizeWindow()\\\'&gt;\' + decodeURIComponent(\''</span> +</span><br><span class="line">			<span class="comment">/*-- Content --*/</span></span><br><span class="line">			<span class="built_in">encodeURIComponent</span>(html) +</span><br><span class="line">		<span class="string">'\') +\'&lt;/body&gt;&lt;/html&gt;\'"&gt;&lt;/iframe&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>注意这里的反斜杠不要去掉，是用来转义的，代码的样式虽然丑了点，但是并不影响使用</p>
<ul>
<li>这里面有个方法是<code>encodeURIComponent(html)</code>，这个是转义了video里面的url链接</li>
<li>在iframe的body加载完成后会调用<code>resizeWindow()</code>函数自适应下iframe的宽高</li>
<li><code>html</code>里面写的就是要放入iframe的body里的代码，这里我们放的肯定是video</li>
<li>于是，可以将上述代码封装成一个函数，在父页面是直接调用</li>
<li>封装的时候我们还可以传一些参数，比如上面的iframe的初始的宽高，style，scrolling，frameborder等等</li>
</ul>
<h3 id="扩展一下"><a href="#扩展一下" class="headerlink" title="扩展一下"></a>扩展一下</h3><ul>
<li>这个方式使用的是video</li>
<li>那么<code>&lt;img&gt;</code>呢？现在有些网站的图片也是经过了防盗链处理，这种方法也是可以实现去掉referer，直接访问图片的额</li>
</ul>
<blockquote>
<blockquote>
<p>欢迎大家来看看试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="noopener">http://music.joylau.cn</a>  (当前版本 v1.5)</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ MV篇 ）]]></title>
      <url>http://blog.joylau.cn/2017/08/20/SpringBoot-JoyMedia-MV/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><center><video src="//image.joylau.cn/blog/joymusic-mv.mp4" loop="true" controls="controls" poster="//image.joylau.cn/blog/joymusic-mv-poster.png">您的浏览器版本太低，无法观看本视频</video></center>

<h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul>
<li><a href="//music.joylau.cn">JoyMusic</a></li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h3><ul>
<li>这次要解析的是 网易云音乐的 MV</li>
<li>需要准备的解析的有</li>
<li>获取 MV 信息列表</li>
<li>获取 MV 详细信息</li>
<li>获取 MV 播放地址</li>
<li>在线播放 MV</li>
<li>获取 MV 排行榜</li>
<li>获取最新 MV</li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>大部分解析提供的接口都和我以前2篇文章类似,之前的文章有分析过,这里就不再多说了</li>
<li>这里重点说明下 MV 的播放问题</li>
</ul>
<h3 id="关于-MV-的播放"><a href="#关于-MV-的播放" class="headerlink" title="关于 MV 的播放"></a>关于 MV 的播放</h3><ul>
<li>解析 MV 详细信息,可获得 MV 的真实播放的 MP4 的地址</li>
<li>但是这个地址,网易云做了防盗链处理</li>
<li>什么是防盗链?</li>
<li>一般情况下,我的资源文件,比如 图片, css,js,视频,我们自己放到服务器上可以直接引用</li>
<li>同样的道理,别人可以访问你的服务器,也可以直接引用</li>
<li>那么,不想被别人引用怎么办呢?</li>
<li>这就引申出了防盗链的操作</li>
<li>最常见的防盗链的处理就是加上 referer识别,就是来源网址信息</li>
<li>referer 其实是个错误的拼写,这个就是有历史原因了,以前的开发人员在定义这个属性的时候,把这个单词写错了,后来没有人注意到,一直使用到他作为标准</li>
<li>后来,也没有人去特意改他了,就这么用着吧</li>
<li>这个是简单防盗链处理</li>
<li>还有更复杂的,比如 js 加密路径信息,每次请求路径都会变化,这个就复杂了</li>
<li>很幸运,网易云的 MV 采用的就是 referer 的识别方式</li>
<li>那么就有相应的破解方法了</li>
</ul>
<h3 id="关于-referer"><a href="#关于-referer" class="headerlink" title="关于 referer"></a>关于 referer</h3><ul>
<li>MP4 的地址在浏览器地址栏直接粘过去是可以播放的,但是由其他网站跳进去的则不能访问,因为带进了 rerferer</li>
<li>那么,要做的就是去除 请求的 rerferer </li>
<li>我找了很多资料也尝试了很多次,想在浏览器端把 rerferer 去除掉,基本是实现不了的,如果你实现在页面里单独请求 mp4 地址时不带referer, 请联系我</li>
<li>那么要做的就是在服务端操作了</li>
<li>在服务端操作很简单,就是伪造头信息进行请求</li>
</ul>
<p>这个是带 referer 的请求,被网易云直接拒绝了</p>
<p><img src="http://image.joylau.cn/blog/joymusic-mv-referer.png" alt="joymusic-mv-referer"></p>
<p>这个是复制地址到地址栏,则可以直接播放</p>
<p><img src="http://image.joylau.cn/blog/joymusic-mv-no-referer.png" alt="joymusic-mv-no-referer"></p>
<h2 id="服务单去除-referer"><a href="#服务单去除-referer" class="headerlink" title="服务单去除 referer"></a>服务单去除 referer</h2><ul>
<li>严格来说不能说去除 refere,我们需要将原本我们自己服务器的 referer 修改为网易云服务器的 referer<h3 id="Java-版"><a href="#Java-版" class="headerlink" title="Java 版"></a>Java 版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMV</span><span class="params">(HttpServletResponse res, String mvurl)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(mvurl))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.setContentType(<span class="string">"video/mpeg4; charset=utf-8"</span>);</span><br><span class="line">        URLConnection connection = <span class="keyword">new</span> URL(mvurl).openConnection();</span><br><span class="line">        connection.setRequestProperty(<span class="string">"referer"</span>, <span class="string">"http://music.163.com/"</span>);</span><br><span class="line">        connection.setRequestProperty(<span class="string">"cookie"</span>, <span class="string">"appver=1.5.0.75771;"</span>);</span><br><span class="line">        connection.connect();</span><br><span class="line">        InputStream is = connection.getInputStream();</span><br><span class="line">        OutputStream os = res.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span> bf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(bf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                os.write(bf, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>解释: </p>
<ol>
<li>首先我们请求的资源不是本地的资源,是存储在其他服务器上的,这里用到的是URL</li>
<li>这里我们需要设置 referer 和 cookie,结合前面使用的 URL, 这里使用的是URLConnection</li>
<li>后面的就很好理解了,相当于做了一个管道,将读取的文件流原封不动的通过Response返回给调用者</li>
<li>不要忘了设置 setContentType 为 MP4 的格式</li>
</ol>
<h3 id="nodejs-版"><a href="#nodejs-版" class="headerlink" title="nodejs 版"></a>nodejs 版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> router = express();</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.query.url;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://music.163.com/"</span>,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"appver=1.5.0.75771;"</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'video/mp4'</span>,</span><br><span class="line">    <span class="string">'Location'</span>: url</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    header: headers,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;;</span><br><span class="line">  request(options).on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">      res.send(&#123; err &#125;)</span><br><span class="line">    &#125;).pipe(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p>解释:<br>和上面的 Java 版代码是一个意思,主要是 pipe 流管道将文件流返回给调用者</p>
<h3 id="功能完成"><a href="#功能完成" class="headerlink" title="功能完成"></a>功能完成</h3><ul>
<li>那么这样解决了 MP4 地址防盗链的问题</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>不足之处也暴露了</li>
<li>首先这段代码必须部署到服务端</li>
<li>部署到服务端就需要服务器去拉去 MV 的流信息,这无疑给服务器增加过多的流量压力</li>
<li>其次,由于使用的流传输,这个 MP4 的播放是不支持快进操作的</li>
</ul>
<h2 id="有个简单的解决方式"><a href="#有个简单的解决方式" class="headerlink" title="有个简单的解决方式"></a>有个简单的解决方式</h2><ul>
<li>在 html5 之后,想去除 referer 信息, a标签有个属性 rel </li>
<li>将 <code>rel=&quot;noreferrer&quot;</code> 即可在 a 标签的 href 的链接上去除 referer信息</li>
<li>这一属性已被我使用在播放器的右下角的一个小飞机的按钮上</li>
<li>点击小飞机按钮就可以直接看 MV 视频了,流量走的是网易云的CDN,不再试自己的服务器</li>
</ul>
<p><img src="http://image.joylau.cn/blog/joymusic-mv-no-referer-href.png" alt="joymusic-mv-no-referer-href"></p>
<h2 id="不完美"><a href="#不完美" class="headerlink" title="不完美"></a>不完美</h2><ul>
<li>总感觉这个解决不够完美</li>
<li>如果你看到这篇文章能有更好的解决办法,请联系我</li>
</ul>
<blockquote>
<blockquote>
<p>欢迎大家来看看试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="noopener">http://music.joylau.cn</a>  (当前版本 v1.4)</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ 搜索篇 ）]]></title>
      <url>http://blog.joylau.cn/2017/08/06/SpringBoot-JoyMedia-Search/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="//image.joylau.cn/blog/jquery-autocomplate.gif" alt="JoyMedia - Search"></p>
<h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul>
<li><a href="//music.joylau.cn">JoyMusic</a><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3></li>
<li>正如文章图片那样,在搜索框中输入想听的音乐/歌手/专辑</li>
<li>在输入过程中及输入完成后,显示搜索结果的列表供用户选择<h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3></li>
<li>REST 接口</li>
<li>jquery-autocomplete插件</li>
</ul>
<h2 id="优美的开始"><a href="#优美的开始" class="headerlink" title="优美的开始"></a>优美的开始</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>引入插件 css: jquery.autocomplete.css</li>
<li>引入插件 js : jquery.autocomplete.min.js</li>
<li>写一个数据返回的 REST 接口<h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3></li>
<li>定义搜索的 input 的 id 值</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left input-s-lg m-t m-l-n-xs hidden-xs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">style</span>=<span class="string">"display: inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm bg-white btn-icon rounded"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"keywords"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control input-sm no-border rounded"</span> <span class="attr">placeholder</span>=<span class="string">"搜索  单曲/歌手/专辑..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里我定义的是 keywords</li>
<li>接下来在我们的 js 文件里调用 : $(“#keywords”).autocomplete</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#keywords"</span>).autocomplete(<span class="string">"/music/neteaseCloud/search"</span>, &#123;</span><br><span class="line">        width : <span class="number">350</span>, <span class="comment">// 提示的宽度，溢出隐藏</span></span><br><span class="line">        max : <span class="number">30</span>,<span class="comment">// 显示数量</span></span><br><span class="line">        scrollHeight: <span class="number">600</span>,</span><br><span class="line">        resultsClass: <span class="string">"ac_results animated fadeInUpBig"</span>,</span><br><span class="line">        autoFill : <span class="literal">false</span>,<span class="comment">//自动填充</span></span><br><span class="line">        highlight : <span class="literal">false</span>,</span><br><span class="line">        highlightItem: <span class="literal">true</span>,</span><br><span class="line">        scroll : <span class="literal">true</span>,</span><br><span class="line">        matchContains : <span class="literal">true</span>,</span><br><span class="line">        multiple :<span class="literal">false</span>,</span><br><span class="line">        matchSubset: <span class="literal">false</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        formatItem: <span class="function"><span class="keyword">function</span>(<span class="params">row, i, max</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//自定义样式</span></span><br><span class="line">        &#125;,</span><br><span class="line">        formatMatch: <span class="function"><span class="keyword">function</span>(<span class="params">row, i, max</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> row.name + row.id;</span><br><span class="line">        &#125;,</span><br><span class="line">        formatResult: <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> row.id;</span><br><span class="line">        &#125;,</span><br><span class="line">        parse:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//解释返回的数据，把其存在数组里</span></span><br><span class="line">            <span class="keyword">if</span> (data.data.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> $.map(data.data, <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        data: row</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).result(<span class="function"><span class="keyword">function</span>(<span class="params">event, row, formatted</span>) </span>&#123;</span><br><span class="line">        jQuery(<span class="keyword">this</span>).val(row.name + <span class="string">' '</span> + row.author);</span><br><span class="line">        addSearchResult(row.id);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="接下来重点解释这个配置项"><a href="#接下来重点解释这个配置项" class="headerlink" title="接下来重点解释这个配置项"></a>接下来重点解释这个配置项</h3><ul>
<li>autocomplete 的第一个参数是url, 值得注意的是,这个 url 我们返回的结果数据是 JSON</li>
<li>后面要专门针对返回的 JSON 数据进行解析</li>
<li>再往后面来,看到的是一些配置项参数,一些简单的我就不在这多解释了,我这边主要说下我觉得比较重要的</li>
<li>resultsClass : 这个参数是生成的候选项的父 DIV,如下图所示:</li>
</ul>
<p><img src="//image.joylau.cn/blog/jquery-autocomplate-div.png" alt="JoyMedia - AutoComplate-Div"></p>
<ul>
<li>默认提供的样式很不好看,默认提供的样式都写在 jquery.autocomplete.css 里面</li>
<li>在这里面,能看到刚才截图的 div : ac_results</li>
<li>那么我们要美化的就是 这个 div 和其子元素 li 的样式了</li>
<li>为了跟契合本站的主题,我采用的黑色主题风格</li>
<li>给ac_results添加了黑色背景色:background-color: #232c32</li>
<li>在js文件里搜索ac_results,添加动画效果,并将这个配置写到配置项里:resultsClass: “ac_results animated fadeInUpBig”</li>
<li>ul 里的 li 是交替的样式的,class 分别为ac_odd和 ac_even,鼠标滑上去的效果为 ac_over,这几个地方自定义下样式</li>
<li>还有一个配置: matchSubset,设置为 false ,可以避免输入大小写转换的js错误</li>
<li>formatItem : 返回的每一个结果都会再次处理,这里要做的事是以自己想要的样式显示出来</li>
<li>formatMatch : 匹配自己在结果集中想要的属性</li>
<li>formatResult : 自己最终要取的数据是什么</li>
<li>parse : 针对返回的JSON 数据进行转换,这里通过$. map 转化为 数组</li>
<li>result : 点击了列表项以后要做什么事情</li>
</ul>
<h2 id="完美的结束"><a href="#完美的结束" class="headerlink" title="完美的结束"></a>完美的结束</h2><blockquote>
<blockquote>
<p>欢迎大家来听听试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="noopener">http://music.joylau.cn</a>  (当前版本 v1.3)</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ Node篇 ）]]></title>
      <url>http://blog.joylau.cn/2017/07/29/SpringBoot-JoyMedia-Node/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul>
<li><a href="//music.joylau.cn">JoyMusic</a><h3 id="Node-js-的学习"><a href="#Node-js-的学习" class="headerlink" title="Node.js 的学习"></a>Node.js 的学习</h3></li>
<li>入门是从这本书上开始的</li>
<li>结合Node中文网的文档开始探索开发</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>利用 Node 来解析网易云音乐,其实质就是 跨站请求伪造 (CSRF),通过自己在本地代码中伪造网易云的请求头,来调用网易云的接口</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="以获取歌曲评论来分析"><a href="#以获取歌曲评论来分析" class="headerlink" title="以获取歌曲评论来分析"></a>以获取歌曲评论来分析</h3><ul>
<li>我们打开其中一首音乐,抓包看一下</li>
</ul>
<p><img src="//image.joylau.cn/blog/joylau-media-node-1.png" alt="JoyMedia - Node"></p>
<ul>
<li>绝大部分的请求都是 POST 的</li>
<li>我们找到其中关于评论的请求,如上图所示</li>
<li>链接中间的部分是歌曲的 id 值</li>
<li>在返回的 JSON 数据中包含了热评和最新评论</li>
<li>评论过多的话是分页来展示的</li>
<li>通过参数 limit 来显示评论数量, offset 来控制分页</li>
</ul>
<p><img src="//image.joylau.cn/blog/joylau-media-node-2.png" alt="JoyMedia - Node"></p>
<ul>
<li>再来看,这是我本地浏览器中的 cookies 值,现在为止知道有个 csrf 值用来加密</li>
</ul>
<p><img src="//image.joylau.cn/blog/joylau-media-node-3.png" alt="JoyMedia - Node"></p>
<ul>
<li>每个请求后面都会跟上csrf_token 值,其他的参数还有params 和 encSecKey</li>
<li>这些值的加密算法无非是2种,一种是前台 js 加密生成的,另一种是将参数传往后台,由后台加密完再传回来</li>
<li>想要测试一下很简单,将里面的值复制一下在 xhr 里找一下就知道了</li>
<li>推测是是 js 加密的,加密的 js 简直不能看,如下图</li>
</ul>
<p><img src="//image.joylau.cn/blog/joylau-media-node-4.png" alt="JoyMedia - Node"></p>
<ul>
<li>看到很多请求后面都返回了 md5 那么 md5 加密是肯定有的</li>
<li>其实仔细看加密的参数,很多都能靠猜出来</li>
<li>本地需要创建一个私钥secKey，十六位，之后aes加密生成，在通过rsa吧secKey加密作为参数一起传回</li>
<li>那么下面贴出加密代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modulus = <span class="string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span>;</span><br><span class="line"><span class="keyword">const</span> nonce = <span class="string">'0CoJUm6Qyw8W8jud'</span>;</span><br><span class="line"><span class="keyword">const</span> pubKey = <span class="string">'010001'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSecretKey</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> pos = <span class="built_in">Math</span>.random() * keys.length;</span><br><span class="line">      pos = <span class="built_in">Math</span>.floor(pos);</span><br><span class="line">      key = key + keys.charAt(pos)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEncrypt</span>(<span class="params">text, secKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _text = text;</span><br><span class="line">  <span class="keyword">const</span> lv = <span class="keyword">new</span> Buffer(<span class="string">'0102030405060708'</span>, <span class="string">"binary"</span>);</span><br><span class="line">  <span class="keyword">const</span> _secKey = <span class="keyword">new</span> Buffer(secKey, <span class="string">"binary"</span>);</span><br><span class="line">  <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">'AES-128-CBC'</span>, _secKey, lv);</span><br><span class="line">  <span class="keyword">let</span> encrypted = cipher.update(_text, <span class="string">'utf8'</span>, <span class="string">'base64'</span>);</span><br><span class="line">  encrypted += cipher.final(<span class="string">'base64'</span>);</span><br><span class="line">  <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zfill</span>(<span class="params">str, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (str.length &lt; size) str = <span class="string">"0"</span> + str;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rsaEncrypt</span>(<span class="params">text, pubKey, modulus</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _text = text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> biText = bigInt(<span class="keyword">new</span> Buffer(_text).toString(<span class="string">'hex'</span>), <span class="number">16</span>),</span><br><span class="line">      biEx = bigInt(pubKey, <span class="number">16</span>),</span><br><span class="line">      biMod = bigInt(modulus, <span class="number">16</span>),</span><br><span class="line">      biRet = biText.modPow(biEx, biMod);</span><br><span class="line">  <span class="keyword">return</span> zfill(biRet.toString(<span class="number">16</span>), <span class="number">256</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line">  <span class="keyword">const</span> secKey = createSecretKey(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">const</span> encText = aesEncrypt(aesEncrypt(text, nonce), secKey);</span><br><span class="line">  <span class="keyword">const</span> encSecKey = rsaEncrypt(secKey, pubKey, modulus);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    params: encText,</span><br><span class="line">    encSecKey: encSecKey</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>挺复杂的,很多我也是参考网络上其他人的加密方式</li>
</ul>
<h3 id="伪造网易云头部请求"><a href="#伪造网易云头部请求" class="headerlink" title="伪造网易云头部请求"></a>伪造网易云头部请求</h3><ul>
<li>这一步就很简单了,主要需要注意的就是 referer 的地址一定要是网易云的地址</li>
<li>其他的想 cookie 和 User-Agent 直接复制浏览器的即可</li>
<li>那我们构造一个 POST 的请求</li>
<li>需要都回到函数和错误返回回调函数</li>
<li>贴下代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Encrypt = <span class="built_in">require</span>(<span class="string">'./crypto.js'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebAPIRequest</span>(<span class="params">host, path, method, data, cookie, callback, errorcallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> music_req = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> cryptoreq = Encrypt(data);</span><br><span class="line">    <span class="keyword">const</span> http_client = http.request(&#123;</span><br><span class="line">        hostname: host,</span><br><span class="line">        method: method,</span><br><span class="line">        path: path,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://music.163.com'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'music.163.com'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: cookie,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'</span>,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        res.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            errorcallback(err)</span><br><span class="line">        &#125;);</span><br><span class="line">        res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode !== <span class="number">200</span>) &#123;</span><br><span class="line">            createWebAPIRequest(host, path, method, data, cookie, callback);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">                music_req += chunk</span><br><span class="line">            &#125;);</span><br><span class="line">            res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (music_req === <span class="string">''</span>) &#123;</span><br><span class="line">                    createWebAPIRequest(host, path, method, data, cookie, callback);</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res.headers[<span class="string">'set-cookie'</span>]) &#123;</span><br><span class="line">                    callback(music_req, res.headers[<span class="string">'set-cookie'</span>])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback(music_req)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    http_client.write(<span class="string">'params='</span> + cryptoreq.params + <span class="string">'&amp;encSecKey='</span> + cryptoreq.encSecKey);</span><br><span class="line">    http_client.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>那么再结合我们刚才分析的评论API, 发出该请求</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> router = express();</span><br><span class="line"><span class="keyword">const</span> &#123; createWebAPIRequest &#125; = <span class="built_in">require</span>(<span class="string">"../common"</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> rid=req.query.id;</span><br><span class="line">    <span class="keyword">const</span> cookie = req.get(<span class="string">'Cookie'</span>) ? req.get(<span class="string">'Cookie'</span>) : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="string">"offset"</span>: req.query.offset || <span class="number">0</span>,</span><br><span class="line">        <span class="string">"rid"</span>: rid,</span><br><span class="line">        <span class="string">"limit"</span>: req.query.limit || <span class="number">20</span>,</span><br><span class="line">        <span class="string">"csrf_token"</span>: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    createWebAPIRequest(</span><br><span class="line">        <span class="string">'music.163.com'</span>,</span><br><span class="line">        <span class="string">`/weapi/v1/resource/comments/R_SO_4_<span class="subst">$&#123;rid&#125;</span>/?csrf_token=`</span>,</span><br><span class="line">        <span class="string">'POST'</span>,</span><br><span class="line">        data,</span><br><span class="line">        cookie,</span><br><span class="line">        music_req =&gt; &#123;</span><br><span class="line">            res.send(music_req)</span><br><span class="line">        &#125;,</span><br><span class="line">        err =&gt; res.status(<span class="number">502</span>).send(<span class="string">'fetch error'</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<ul>
<li>值得注意的是,这里我的 node 模板选择的 EJS 所使用的 js 语法格式也比较新,你需要将你 WebStorm 的 js 编译器的版本提升到ECMAScript 6,否则的话会报错,如下图所示:<br><img src="//image.joylau.cn/blog/joylau-media-node-5.png" alt="JoyMedia - Node"></li>
</ul>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li>我们写一个入口文件,可以直接运行期容器,以及提供 APIs</li>
<li>那么,这个就跟简单了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v = <span class="string">'/apis/v1'</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server starting <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*APIs 列表*/</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐歌单</span></span><br><span class="line">app.use(v + <span class="string">"/personalized"</span>, <span class="built_in">require</span>(<span class="string">"./apis/personalized"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//歌单评论</span></span><br><span class="line">app.use(v + <span class="string">'/comment/playlist'</span>, <span class="built_in">require</span>(<span class="string">'./apis/comment_playlist'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取歌单内列表</span></span><br><span class="line">app.use(v + <span class="string">'/playlist/detail'</span>, <span class="built_in">require</span>(<span class="string">'./apis/playlist_detail'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取音乐详情</span></span><br><span class="line">app.use(v + <span class="string">'/song/detail'</span>, <span class="built_in">require</span>(<span class="string">'./apis/song_detail'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//单曲评论</span></span><br><span class="line">app.use(v + <span class="string">'/comment/music'</span>, <span class="built_in">require</span>(<span class="string">'./apis/comment_music'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取音乐 url</span></span><br><span class="line">app.use(v + <span class="string">'/music/url'</span>, <span class="built_in">require</span>(<span class="string">'./apis/musicUrl'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌词</span></span><br><span class="line">app.use(v + <span class="string">'/lyric'</span>, <span class="built_in">require</span>(<span class="string">'./apis/lyric'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//打印出错误的调用栈方便调试</span></span><br><span class="line">    <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用 http 模块,开启 node 的默认3000 端口 </li>
<li>目前提供了上述注释里所写的 APIs</li>
<li>每一个 API 都会单独写一个模块,以在此调用</li>
<li>有一个地方值得注意的事</li>
<li>node 是单线程的异步 IO,这使得他在高并发方面得到很快相应速度,但是也有缺点</li>
<li>当其中一个操作出错异常了,就会导致整个服务挂掉</li>
<li>我在此的处理方式是:监听全局异常,捕到异常后将错误的堆栈信息打印出来,这样使得后续的操作不得进行以至于使整个服务挂掉</li>
<li>当然,还有其他的方式来处理,可以通过引用相应的模块,来守护 node 的进程,简单的来说就是挂掉我就给你重启</li>
<li>我觉得第二种方式不是我想要的,我是采取的第一种方式</li>
<li>况且我还真想看看是什么错误引起的</li>
<li>最后发现都是网络原因引起的错误 🤣🤣🤣🤣😂😂😂😂😂</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>npm install</li>
<li>node app.js</li>
</ul>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p><img src="//image.joylau.cn/blog/joylau-media-node-7.png" alt="JoyMedia - Node"></p>
<p><img src="//image.joylau.cn/blog/joylau-media-node-6.png" alt="JoyMedia - Node"></p>
<blockquote>
<blockquote>
<p>欢迎大家来听听试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="noopener">http://music.joylau.cn</a>  (当前版本 v1.3)</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ 分析篇 ）]]></title>
      <url>http://blog.joylau.cn/2017/07/24/SpringBoot-JoyMedia/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<center><br><br><img src="//image.joylau.cn/blog/JoyMedia.gif" alt="JoyMedia - Beta - 预览图"><br><img src="//image.joylau.cn/blog/JoyMedia.png" alt="JoyMedia - Beta - 系统结构"><br><br></center>

<h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><p><a href="http://media.joylau.cn" target="_blank" rel="noopener">JoyMedia - Beta 预览版</a></p>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h3><ul>
<li>本人经常在写代码或者没事的时候会听一些音乐</li>
<li>以前大部分会选择本地安装客户端</li>
<li>其中最喜欢的认为做的比较好的音乐客户端实属网易云音乐了</li>
<li>无论是从 Mac 版的客户端,还是 IOS 版的客户端,界面都非常优美,简直是极客和码农的必备</li>
<li>最主要是的网易云的歌曲推荐功能,很强大,我一度认为2个人的歌单相似度超过90%,就可以在一起了,这样再也不怕找不到对象了,😆</li>
<li>但也有些问题,网易云有一些版权音乐,是无法听到的,有时候昨天还在听得音乐,今天就听不了了</li>
<li>这就很烦了</li>
</ul>
<h3 id="自己的想法"><a href="#自己的想法" class="headerlink" title="自己的想法"></a>自己的想法</h3><ul>
<li>最初想把这个版权音乐的 mp3 地址解析出来,这样就可以直接听了</li>
<li>恩,想法很 nice</li>
<li>那么,照着这个想法做吧</li>
</ul>
<h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><ul>
<li>正如上述系统结构所示</li>
<li>我自己有2台云服务器,一台阿里云的,另一台是腾讯云的</li>
<li>这2台服务器,我是这样分配的: 阿里云只提供 WEB 服务,腾讯云为 WEB 访问提供各种服务</li>
<li>当然服务器上我还跑了其他服务</li>
</ul>
<h3 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h3><ul>
<li>Nginx 主要负责了 JoyMedia 的 负载均衡,在该台服务器上,我用 部署了2个 spring-boot 项目,以权重的方式配置了负载均衡,这样我在更新项目的时候可以保证另一个服务的可用性</li>
<li>当然 Nginx 还有个反向代理的作用, upstream 配置了其他项目的访问</li>
<li>还有台 Redis 服务了,爬到的数据会存到 Redis 了,以供 WEB 服务迅速读取,当然在有些地方不会读取 Redis ,比如单曲歌曲播放的 mp3地址的获取</li>
<li>在最开始的时候我会先在后台解析出来再存到 Redis 里,但是发现网易云的歌曲 mp3 地址失效太快了,有时会导致播放异常,不如实时解析来的实在</li>
<li>在比如单首歌曲的评论的获取,这个得是实时解析的</li>
</ul>
<h3 id="腾讯云服务器"><a href="#腾讯云服务器" class="headerlink" title="腾讯云服务器"></a>腾讯云服务器</h3><ul>
<li>提供网易云音乐解析的是一个 Node 服务，这个 Node 服务是如何解析地址的，这个需要单独再写一篇文章，先知道这个 Node 服务是干嘛的就好</li>
<li>然后部署了3个spring-boot服务，分别提供了各自的服务，有定时爬去网易云音乐的推荐歌单，爬取歌单的歌曲列表，爬取歌单评论</li>
<li>由于爬到的音乐信息很快就会失效，这个服务都要定时的爬取</li>
<li>爬取到的数据的落地存储，我是存到的MongoDB中，在这篇文章中：<a href="http://blog.joylau.cn/2017/07/18/SpringBoot-MongoDB/">重剑无锋,大巧不工 SpringBoot — 整合使用MongoDB</a> , 我说明了为什么要选择 MongoDB</li>
<li>这3个服务爬到的数据会实时存到 Redis 中,另一方面,会异步存到 MongoDB 中,我想着这些数据或许还能做什么数据分析之类的,😄</li>
</ul>
<h2 id="初版完成后"><a href="#初版完成后" class="headerlink" title="初版完成后"></a>初版完成后</h2><h3 id="等我搭建完这个服务后-发现了问题"><a href="#等我搭建完这个服务后-发现了问题" class="headerlink" title="等我搭建完这个服务后,发现了问题"></a>等我搭建完这个服务后,发现了问题</h3><ul>
<li>有版权控制的音乐根本解析不到 mp3 的实际地址</li>
<li>那么我想听的音乐,听不到还是听不到,突然变得很尴尬</li>
</ul>
<h3 id="又有了想法"><a href="#又有了想法" class="headerlink" title="又有了想法"></a>又有了想法</h3><ul>
<li>一般情况下,我们在一家音乐网站上找不到自己想要的音乐,就回去其他音乐网站上找</li>
<li>恩,就这么干</li>
<li>网易云找不到的音乐,我就去虾米音乐,去 QQ 音乐找</li>
<li>这2个网站的音乐我都小试了下,都是可以的</li>
<li>于是我现在把这些功能集中在页面的搜索框中,搜索这3个音乐网站的结果,然后实施解析来播放</li>
<li>这是我下步要做的事情</li>
</ul>
<h3 id="有些地方还有-BUG"><a href="#有些地方还有-BUG" class="headerlink" title="有些地方还有 BUG"></a>有些地方还有 BUG</h3><ul>
<li>有些地方还是有 BUG 的,需要修复</li>
</ul>
<h3 id="有些地方功能还没写好"><a href="#有些地方功能还没写好" class="headerlink" title="有些地方功能还没写好"></a>有些地方功能还没写好</h3><ul>
<li>比如右上角的用户登录,现在的想法是使用第三方登录,比如 QQ, 微信…,但是是登录网易云音乐呢,还是登录网站呢?</li>
<li>要是登录网易云音乐的话,估计账号安全是个问题,而且登录接口不能频繁调用</li>
<li>要是登录网站的,好像没什么卵用</li>
<li>再比如左下角的歌词界面,虽然能获取到歌词,但是怎么做到歌词随着歌曲的播放实时滚动,这个现在还没有头绪…</li>
</ul>
<blockquote>
<blockquote>
<p>还在继续开发中…</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 整合使用MongoDB]]></title>
      <url>http://blog.joylau.cn/2017/07/18/SpringBoot-MongoDB/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><ul>
<li><code>yum install mongodb-server  mongodb</code></li>
<li><code>systemctl start mongod</code></li>
<li><code>whereis mongo</code></li>
</ul>
<h3 id="MongoDB-配置文件"><a href="#MongoDB-配置文件" class="headerlink" title="MongoDB 配置文件"></a>MongoDB 配置文件</h3><ul>
<li>修改 bind_ip为 0.0.0.0 即可外网可访问</li>
<li>修改 fork 为 true 即可后台运行</li>
<li>修改 auth为 true 即访问连接时需要认证</li>
<li>修改 port 修改端口号</li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><img src="//image.joylau.cn/blog/springboot-mongodb-config.png" alt="mongoDB配置"><br>还有种配置url方式: <code>spring.data.mongodb.uri=mongodb://name:pass@host:port/db_name</code></p>
<p>相比这种方式,我觉得第一种截图的方式要更直观一些</p>
<h3 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h3><ul>
<li>主要的一个接口<code>MongoRepository&lt;T,ID&gt;</code>,第一个是要存储的实体类,第二个参数是 ID 类型</li>
<li>自定义一个接口实现上述接口</li>
<li>定义实体类</li>
<li>自定义实现类可直接注入使用</li>
<li>默认的已经存在了增删改查的方法了,可以直接使用</li>
<li>想要更多的功能可以在接口中实现更多的自定义</li>
<li>下面截图所示:</li>
</ul>
<p>自定义一个 DAO :<br><img src="//image.joylau.cn/blog/springboot-mongodb-dao.png" alt="mongoDB-DAO"></p>
<p>查看如何使用 :<br><img src="//image.joylau.cn/blog/springboot-mongodb-method.png" alt="mongoDB-method"><br>有个 username 忘了配置了,得加上的</p>
<p>使用起来就是如此简单,感觉使用起来很像 mybatis 的 mapper 配置</p>
<h2 id="有一些注解的配置"><a href="#有一些注解的配置" class="headerlink" title="有一些注解的配置"></a>有一些注解的配置</h2><h3 id="有时候使用起来会有一些问题"><a href="#有时候使用起来会有一些问题" class="headerlink" title="有时候使用起来会有一些问题"></a>有时候使用起来会有一些问题</h3><ul>
<li>在默认策略下, Java 实体类叫什么名字,生成后的表名就叫什么,但我们可能并不想这样</li>
<li>同样的道理,有时属性名和字段也并不想一样的</li>
<li>有时一些属性我们也并不想存到 MongoDB<h3 id="注解解决这些问题"><a href="#注解解决这些问题" class="headerlink" title="注解解决这些问题"></a>注解解决这些问题</h3></li>
<li><code>@Id</code> : 标明表的 ID , 自带索引,无需维护</li>
<li><code>@Document</code> : 解决第一个问题</li>
<li><code>@Field</code> : 解决第二个问题</li>
<li><code>@Transient</code> : 解决第三个问题<h3 id="此外-还有其他的注解"><a href="#此外-还有其他的注解" class="headerlink" title="此外,还有其他的注解"></a>此外,还有其他的注解</h3>可能并不常用,在此也说明下</li>
<li><code>@Indexed(unique = true)</code> : 加在属性上,标明添加唯一索引</li>
<li><code>@CompoundIndex</code> : 复合索引</li>
</ul>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>查看下刚爬的网易云官网的歌曲信息吧</p>
<p><center> <img src="//image.joylau.cn/blog/springboot-mongoDB-preview.gif" alt="歌曲信息"> <center></center></center></p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZeroC Ice --- 高性能RPC技术王者]]></title>
      <url>http://blog.joylau.cn/2017/07/10/ZeroC-Ice/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>ZeroC Ice 的背景我就不介绍了</li>
<li>ZeroC Ice 环境安装搭建，概念原理，技术基础，这些网络上都有，再介绍的话就是copy过来了，没有多大意义，不再赘述了</li>
<li>下面我们开始实战</li>
</ul>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><ul>
<li>首先我们需要几个ice接口文件,比如说这几个：<br><img src="//image.joylau.cn/blog/ZeroC-Ice-1.png" alt="Ice 文件展示"></li>
<li>我们来看一下其中一个ice文件定义的接口说明<br><img src="//image.joylau.cn/blog/ZeroC-Ice-2.png" alt="Ice接口文件说明"><br>文件里定义了5个接口，可以很明显的的看到是区间的增删改查接口<br>刚好很适合我们对外提供增删改查的RESTFul API 接口<br>这里在对外提供 RESTFul API 是可以很清楚的 使用 POST GET PUT DELETE<br>可以说这里很好的提供了这样一个例子</li>
<li>命令 <code>slice2java xxx.ice</code> 生成 java 的 client，server类<br><img src="//image.joylau.cn/blog/ZeroC-Ice-3.png" alt="生成的Java类"><br>生成的Java文件很多，这个不用管，更不必更改里面的代码内容<br>你要是有兴趣的话，也可以将这些文件分为 client 和 server 分门别类的归纳好<br>打开看一下，里面的代码很混乱，无论是代码风格，样式，变量命名，对于我来说，简直不忍直视<br><img src="//image.joylau.cn/blog/ZeroC-Ice-5.png" alt="生成的Java代码"></li>
<li>编写client类<br><img src="//image.joylau.cn/blog/ZeroC-Ice-4.png" alt="client类"><br>代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String adapterName;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger _logger = LoggerFactory.getLogger(Client.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command 命令体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">execute</span><span class="params">(CommandBody command)</span> </span>&#123;</span><br><span class="line">        Ice.Communicator ic = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初使化通信器</span></span><br><span class="line">            ic = Ice.Util.initialize();</span><br><span class="line">            <span class="comment">//传入远程服务单元的名称、网络协议、IP及端口，获取接口的远程代理，这里使用的stringToProxy方式</span></span><br><span class="line">            Ice.ObjectPrx base = ic.stringToProxy(getStringProxy());</span><br><span class="line">            <span class="comment">//通过checkedCast向下转换，获取接口的远程，并同时检测根据传入的名称获取的服务单元是否代理接口，如果不是则返回null对象</span></span><br><span class="line">            ZKRoadRangeAdminPrx interfacePrx = ZKRoadRangeAdminPrxHelper.checkedCast(base);</span><br><span class="line">            <span class="keyword">if</span> (interfacePrx == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"Invalid proxy"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把接口的方法传给服务端，让服务端执行</span></span><br><span class="line">            Result result = executeCommand(command, interfacePrx);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"暂无此操作命令"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            _logger.info(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"连接错误！"</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ic.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行操作命令</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command      命令体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfacePrx 接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ProgramResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">executeCommand</span><span class="params">(CommandBody command, ZKRoadRangeAdminPrx interfacePrx)</span> </span>&#123;</span><br><span class="line">        CommandType type = command.getCommandType();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(CommandType.addRange)) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.AddRange(command.getZkRoadRange()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.updateRange)) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.UpdateRange(command.getZkRoadRange()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.removeRange)) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.RemoveRange(command.getZkRoadRange().code));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.getRange)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, JSONObject.toJSONString(interfacePrx.GetRange(command.getZkRoadRange().code)));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.listRanges)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, JSONObject.toJSONString(interfacePrx.ListRanges()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置的地址信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getStringProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adapterName + <span class="string">":tcp -h "</span> + host + <span class="string">" -p "</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">returnMessage</span><span class="params">(<span class="keyword">boolean</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result ? <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"success"</span>) : <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"failure"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>需要三个配置： 适配器名，IP地址，端口号，配置在SpringBoot项目里，如下：<br><img src="//image.joylau.cn/blog/ZeroC-Ice-6.png" alt="ICE配置信息"></li>
</ul>
<h3 id="再封装一下"><a href="#再封装一下" class="headerlink" title="再封装一下"></a>再封装一下</h3><ul>
<li>封装返回消息体<br><img src="//image.joylau.cn/blog/ZeroC-Ice-8.png" alt="ICE配置信息"></li>
<li>封装执行命令体<br><img src="//image.joylau.cn/blog/ZeroC-Ice-7.png" alt="ICE配置信息"></li>
</ul>
<h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><ul>
<li>调用 ice 里的接口方法：获取远程代理的 checkedCast </li>
<li>获取远程接口的 interfacePrx 可直接调用 ice 文件里的方法</li>
<li>服务端的 Ice 版本最好和 客户端的版本相同</li>
<li>服务端提供服务时需要创建一个 servant ，一般的我们会在接口名后面加一个I，以此命名作为Java文件类名</li>
<li>该servant继承 接口文件的Disp类，并重写接口中定义的方法，实现具体的业务逻辑</li>
<li>Server端创建一个适配器 adapter，将servant 放进去</li>
<li>服务退出前，一直对请求持续监听</li>
</ul>
<h3 id="听首歌回忆下"><a href="#听首歌回忆下" class="headerlink" title="听首歌回忆下"></a>听首歌回忆下</h3><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="250" height="86" src="//music.163.com/outchain/player?type=2&id=135728&auto=1&height=66"></iframe></center>]]></content>
      
        <categories>
            
            <category> ZeroC Ice篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ZeroC Ice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录一次Git多仓库提交]]></title>
      <url>http://blog.joylau.cn/2017/07/03/Git-Multi-Repo-Push/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ul>
<li>新建一个项目</li>
<li>可先分别在码云和 GitHub 上建好仓库&lt;可选&gt;</li>
<li>将项目提交的码云上</li>
<li>项目提交到另一个仓库的时候重新 define remote &lt;可选&gt;</li>
<li>之后每次先提交到本地仓库，可以根据每次提交到本地仓库的不同，来选择定义的 remote 来分别提交</li>
<li>每次 pull 也可以选择仓库</li>
</ul>
<h2 id="遇到个问题"><a href="#遇到个问题" class="headerlink" title="遇到个问题"></a>遇到个问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>在我新建好码云的仓库后，提交项目，遇到  Git Pull Failed: fatal: refusing to merge unrelated histories</li>
</ul>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li>原因：git拒绝合并两个不相干的东西</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>此时在命令行输入 ： git pull origin master –allow-unrelated-histories</li>
<li>要求我输入提交信息</li>
<li>输入完成后，按一下Esc,再输入:wq,然后回车就OK了</li>
<li>再回来提交就可以了</li>
</ul>]]></content>
      
        <categories>
            
            <category> Git篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS常用开发使用APP]]></title>
      <url>http://blog.joylau.cn/2017/06/29/MacOS-Dev-App/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h2><ul>
<li><strong>BetterZip</strong> : mac上面的最好的解压工具</li>
<li><strong>CHM View</strong> : 查看chm类型的开发文档</li>
<li><strong>Easy New File Free</strong> : 右击桌面，可以像win一样新建文件</li>
<li><strong>Bartender 2</strong> : 任务栏menu图标整理</li>
<li><strong>iStat Menus</strong> : 系统网速、cpu、内存监控工具</li>
<li><strong>SwitchResX</strong> : 外接显示器，调节DPI</li>
<li><strong>Go2Shell</strong> : 在finder的任意文件夹下打开终端</li>
<li><strong>Aria2GUI</strong> : 突破百度限速</li>
<li><strong>Alfred 3</strong> : 效率神器,谁用谁知道</li>
<li><strong>PDF Expert</strong> : 查看pdf</li>
<li><strong>远程桌面连接</strong> : mac电脑上远程连接windows,网址: <a href="https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06" target="_blank" rel="noopener">https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06</a> (2017年10月26日加)</li>
</ul>
<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><ul>
<li><strong>网易云音乐</strong> ：这个必备啊</li>
<li><strong>优酷</strong> ：这个可以免费看1080P视频，没广告，有时候出抽风的时候还可以看会员视频</li>
<li><strong>OBS</strong> : 视频直播、录制软件</li>
<li><strong>Movist</strong> : 视频播放器,支持的格式很多</li>
</ul>
<h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h2><ul>
<li><strong>CleanMyMac 3</strong> : 清理mac电脑垃圾</li>
<li><strong>ShadowsocksX</strong> : 翻墙必备</li>
<li><strong>TeamView</strong> : 桌面远程软件</li>
<li><strong>MacDown</strong> : 开源的markdown编辑器</li>
<li><strong>Path Finder</strong> : Finder增强版</li>
<li><strong>Parallels Desktop</strong> : 虚拟机</li>
<li><strong>FileZilla</strong> : ftp工具</li>
<li><strong>Foxmail</strong> : 邮箱客户端</li>
<li><strong>Folx</strong> : 下载工具</li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><strong>FireFox</strong> : 火狐</li>
<li><strong>Google Chrome</strong> : 必备</li>
<li><strong>IntelliJ IDEA</strong> : 必备IDE</li>
<li><strong>WebStorm</strong> : web开发必备</li>
<li><strong>DataGrip</strong> : 数据库管理软件</li>
<li><strong>Navicat Premium</strong> : 已经使用习惯的MySQL连接工具，也支持其他数据库</li>
<li><strong>XShell</strong> : SSH远程连接工具,我还是比较喜欢终端下的ssh命令连接，虽然有一个家族的系列产品</li>
<li><strong>Sublime Text3</strong> : 文本编辑器</li>
<li><strong>Beyond Compare</strong> : 文本比较工具</li>
<li><strong>GitHub Desktop</strong> : github GUI客户端</li>
<li><strong>rdm</strong> : redis可视化GUI界面</li>
<li><strong>HBuilder</strong> : h5开发工具</li>
<li><strong>iTerm</strong> : 终端</li>
</ul>
<blockquote>
<blockquote>
<p>自己暂时使用的工具都已归纳出来，以后有新的好用的工具，会加上的，Mac下大部分工具都是收费的，你可以偷偷点一下 <a href="http://xclient.info/s/" target="_blank" rel="noopener">xclient.info</a></p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> MacOS篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> MacBookPro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacBook Pro 2017 --- 不行！我要开箱]]></title>
      <url>http://blog.joylau.cn/2017/06/24/MacBookPro-Unboxing/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="官方视频"><a href="#官方视频" class="headerlink" title="官方视频"></a>官方视频</h2><center><br><video src="//image.joylau.cn/blog/macbook-pro-design.mp4" loop="true" controls="controls" poster="//image.joylau.cn/blog/MacBookPro-unboxing-video.png">您的浏览器版本太低，无法观看本视频</video><br></center>


<h2 id="开始拆箱"><a href="#开始拆箱" class="headerlink" title="开始拆箱"></a>开始拆箱</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2180.JPG" alt="MacBook Pro"><br><br>先来看一下刚拿到手的包装是什么样的<br><br>一台主机<br><br>我在官网订购了一个 USB-typeC 转 USB 的转接口<br><br>那个小盒子就是<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2181.JPG" alt="MacBook Pro"><br><br>打开主机纸盒<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2182.JPG" alt="MacBook Pro"><br><br>掰开这个直接就可以把里面的主机盒抽出来,很方便<br><br>两边都是这样设计的<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2183.JPG" alt="MacBook Pro"><br><br>就2样东西<br><br>都摆放好了<br><br>准备拿剪刀拆开<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2184.JPG" alt="MacBook Pro"><br><br>来一张侧面照<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2185.JPG" alt="MacBook Pro"><br><br>拆开盒子保护膜<br><br>打开镂空设计的上盖，看到我们的主机真容<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2186.JPG" alt="MacBook Pro"><br><br>这样一看，真的很薄，起码比我以前用过得笔记本都要薄多了<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2187.JPG" alt="MacBook Pro"><br><br>2端都是 USB-C 接口的充电线<br><br>适配器感觉好大啊<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2188.JPG" alt="MacBook Pro"><br><br>靠近点看下USB-C的充电线<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2189.JPG" alt="MacBook Pro"><br><br>然后就什么都没有了<br><br>底下的盒子也打不开<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2190.JPG" alt="MacBook Pro"><br><br>苹果的LOGO贴纸<br><br>说明书<br><br>三包凭证<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2191.JPG" alt="MacBook Pro"><br><br>开始正式拆开主机的包装纸<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2192.JPG" alt="MacBook Pro"><br><br>一睹真容<br>15.6寸的<br></center>





<h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2193.JPG" alt="MacBook Pro"><br><br>盖子一打开就开机了<br><br>屏幕与键盘之间隔了一张纸<br><br>让我们拿开他<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2194.JPG" alt="MacBook Pro"><br><br>很快就进入了系统<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2195.JPG" alt="MacBook Pro"><br><br>重新设计的蝴蝶键盘<br><br>键程很短<br><br>按键很紧凑<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2196.JPG" alt="MacBook Pro"><br><br>来一张键盘的整体照<br><br>上面是全新的 Multi-Touch Bar ，替换了以前的一排功能按键，许多mac内置的应用在Touch Bar上都有支持<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2197.JPG" alt="MacBook Pro"><br><br>触摸板的占比实在是太大了<br><br>看我一只手放上去，刚好差不多<br><br>手有点丑，请忽略<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2198.JPG" alt="MacBook Pro"><br><br>迫不及待的想进入系统尝试一下了<br><br>先来连接家里的WIFI<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2199.JPG" alt="MacBook Pro"><br><br>老套路了<br><br>都是下一步<br><br>再下一步<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2200.JPG" alt="MacBook Pro"><br><br>在电源键上提供了和iPhone上一个的指纹支持<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2201.JPG" alt="MacBook Pro"><br><br>来录入我自己的指纹<br><br>不知道用的是什么材料，在这个TouchBar上面滑来滑去很舒服，很有感觉<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2202.JPG" alt="MacBook Pro"><br><br>正在设置指纹<br><br>稍等一下<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2203.JPG" alt="MacBook Pro"><br><br>终于正式进入系统了<br><br>屏幕的显示效果很震撼<br><br>特效动画的帧数很高，给人感觉很流畅<br></center>




<h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2204.JPG" alt="MacBook Pro"><br><br>看一下系统信息<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2205.JPG" alt="MacBook Pro"><br><br>显示器信息<br><br>2G独立显存<br></center>


<h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><h3 id="使用它也有一周多了，说一下自己的整体感受吧"><a href="#使用它也有一周多了，说一下自己的整体感受吧" class="headerlink" title="使用它也有一周多了，说一下自己的整体感受吧"></a>使用它也有一周多了，说一下自己的整体感受吧</h3><ul>
<li>Retina显示器的显示效果真的很好，真是惯坏了眼睛，现在再去看普通的显示器，就感觉有很强的颗粒感</li>
<li>macOS High Sierra字体渲染的很棒，系统中有很多适合编程的字体，在 IntelliJ IDEA 中编码很爽</li>
<li>更大的分辨率能看到更多的内容</li>
<li>系统安装软件什么的很方便，没有想Windows下那么碎片化</li>
<li>Multi-Touch Bar 有很多有意思的功能，除了官方宣传的和MacOS本身自带的，想滑动查看照片，添加emoji小表情，控制亮度。。。之类的，大量第三方的软件也进行了适配，网易云音乐，搜狗输入法就适配的很不错</li>
<li>系统触摸板真的是Windows平台无法比拟的，有很多手势，编码什么的，完全可以不用鼠标</li>
<li>键盘旁边2个喇叭的音质效果很震撼，而且声音特别大，看电影，听音乐很有感觉</li>
<li>耗电也比Windows系统的笔记本少多了，充满电的话，就拿我平时工作情况来说，开多个IDEA，起多个服务，多个浏览器，多个编辑器。。。什么什么的，大概能撑个8，9个小时，上班一天不充电….</li>
<li>颜值好，很符合现代化审美</li>
</ul>
<h3 id="缺点也还是有的"><a href="#缺点也还是有的" class="headerlink" title="缺点也还是有的"></a>缺点也还是有的</h3><ul>
<li>太贵</li>
</ul>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2212.PNG" alt="MacBook Pro"><br><br><strong><code>我和我老婆的对话</code></strong><br></center>]]></content>
      
        <categories>
            
            <category> MacOS篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> MacBookPro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- RESTful API]]></title>
      <url>http://blog.joylau.cn/2017/06/18/SpringBoot-RESTfulAPI/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>使用很简单</li>
<li>关注业务开发</li>
<li>熟悉提供的注解</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauSwagger2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(JoylauSwagger2Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">				.apiInfo(apiInfo())</span><br><span class="line">				.select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">"cn.joylau.code"</span>))</span><br><span class="line">				.paths(PathSelectors.any())</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">				.title(<span class="string">"Spring Boot构建RESTful APIs"</span>)</span><br><span class="line">				.description(<span class="string">"将每一个注解的@RestController和@ResponseBody的类和方法生成API，点击即可展开"</span>)</span><br><span class="line">				.termsOfServiceUrl(<span class="string">"http://blog.joylau.cn"</span>)</span><br><span class="line">				.contact(<span class="keyword">new</span> Contact(<span class="string">"joylau"</span>,<span class="string">"http://blog.joylau.cn"</span>,<span class="string">"2587038142@qq.com"</span>))</span><br><span class="line">				.license(<span class="string">"The Apache License, Version 2.0"</span>)</span><br><span class="line">				.licenseUrl(<span class="string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span>)</span><br><span class="line">				.version(<span class="string">"1.0"</span>)</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><ul>
<li><code>@Api</code>：修饰整个类，描述Controller的作用</li>
<li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li>
<li><code>@ApiParam</code>：单个参数描述</li>
<li><code>@ApiModel</code>：用对象来接收参数</li>
<li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li>
<li><code>@ApiResponse</code>：HTTP响应其中1个描述</li>
<li><code>@ApiResponses</code>：HTTP响应整体描述</li>
<li><code>@ApiIgnore</code>：使用该注解忽略这个API </li>
<li><code>@ApiClass</code></li>
<li><code>@ApiError</code></li>
<li><code>@ApiErrors</code></li>
<li><code>@ApiParamImplicit</code></li>
<li><code>@ApiParamsImplicit</code></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>Swagger2默认将所有的Controller中的RequestMapping方法都会暴露，然而在实际开发中，我们并不一定需要把所有API都提现在文档中查看，这种情况下，使用注解@ApiIgnore来解决，如果应用在Controller范围上，则当前Controller中的所有方法都会被忽略，如果应用在方法上，则对应用的方法忽略暴露API</li>
</ul>
<p>或者重写方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Predicate&lt;RequestHandler&gt; predicate = <span class="keyword">new</span> Predicate&lt;RequestHandler&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(RequestHandler input)</span> </span>&#123;</span><br><span class="line">                Class&lt;?&gt; declaringClass = input.declaringClass();</span><br><span class="line">                <span class="keyword">if</span> (declaringClass == BasicErrorController.class)<span class="comment">// 排除</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(declaringClass.isAnnotationPresent(RestController.class)) <span class="comment">// 被注解的类</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(input.isAnnotatedWith(ResponseBody.class)) <span class="comment">// 被注解的方法</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 整合RabbitMQ]]></title>
      <url>http://blog.joylau.cn/2017/06/16/SpringBoot-RabbitMQ/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="本文说明"><a href="#本文说明" class="headerlink" title="本文说明"></a>本文说明</h3><ul>
<li>使用之前<code>rabbitMQ</code>的介绍我就不说了，我认为你已经了解了</li>
<li><code>rabbitMQ</code>和<code>activeMQ</code>的对比区别我也不说了，我认为你已经查过资料了</li>
<li><code>rabbitMQ</code>的安装，我也不说了，我认为你下载的时候已经看到了官网的安装说明，给一个Windows安装的链接：<a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">http://www.rabbitmq.com/install-windows.html</a></li>
<li><code>rabbitMQ</code>web插件的启用，我也不说，我认为你已经会了</li>
<li>那我们开始吧</li>
</ul>
<h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><h3 id="在使用之前先看一下rabbitMQ-client的使用"><a href="#在使用之前先看一下rabbitMQ-client的使用" class="headerlink" title="在使用之前先看一下rabbitMQ-client的使用"></a>在使用之前先看一下rabbitMQ-client的使用</h3><p>先引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置RabbitMQ地址</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//创建一个新的连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//创建一个频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明一个队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="comment">//发送消息到队列中</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"P [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        <span class="comment">//关闭频道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置RabbitMQ地址</span></span><br><span class="line">        factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//创建一个新的连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//创建一个频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//声明要关注的队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">"C [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">        <span class="comment">//DefaultConsumer类实现了Consumer接口，通过传入一个频道，告诉服务器我们需要那个频道的消息，如果频道中有消息，就会执行回调函数handleDelivery</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"C [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//自动回复队列应答 -- RabbitMQ中的消息确认机制</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>代码的注释很详细</p>
<h2 id="SpringBoot中的使用"><a href="#SpringBoot中的使用" class="headerlink" title="SpringBoot中的使用"></a>SpringBoot中的使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">    ansi:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"生产者发送信息 : "</span> + context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建消息生产者Product。通过注入AmqpTemplate接口的实例来实现消息的发送，AmqpTemplate接口定义了一套针对AMQP协议的基础操作。在Spring Boot中会根据配置来注入其具体实现。在该生产者，我们会产生一个字符串，并发送到名为hello的队列中</p>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者接受信息 : "</span> + hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建消息消费者Consumer。通过@RabbitListener注解定义该类对hello队列的监听，并用@RabbitHandler注解来指定对消息的处理方法。所以，该消费者实现了对hello队列的消费，消费操作为输出消息的字符串内容。</p>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauSpringBootRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		product.send();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="再来一张图"><a href="#再来一张图" class="headerlink" title="再来一张图"></a>再来一张图</h3><p><img src="//image.joylau.cn/blog/spring-boot-rabbitmq-test.png" alt="示例截图"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul>
<li>后面继续更新一些具体业务场景中复杂的使用….</li>
</ul>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让你的Windows控制台窗口更优美]]></title>
      <url>http://blog.joylau.cn/2017/06/16/Console-Better/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>Windows下最适合编程的字体要数<code>Consolas</code>字体了，那么如何将命令提示符换成Consolas字体呢？我们只需要注册以下信息即可:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]</span><br><span class="line"><span class="string">"WindowSize"</span>=dword:00170058</span><br><span class="line"><span class="string">"ScreenBufferSize"</span>=dword:01170058</span><br><span class="line"><span class="string">"WindowPosition"</span>=dword:0079004b</span><br><span class="line"><span class="string">"ColorTable01"</span>=dword:00235600</span><br><span class="line"><span class="string">"FontSize"</span>=dword:00120000</span><br><span class="line"><span class="string">"FontWeight"</span>=dword:00000190</span><br><span class="line"><span class="string">"FaceName"</span>=<span class="string">"Consolas"</span></span><br><span class="line"><span class="string">"FontFamily"</span>=dword:00000036</span><br></pre></td></tr></table></figure>
<p>新建一个文本文件，将信息保存到此文本文件中<br>然后将文本文件重命名为*.reg<br>双击此文件将其注册</p>]]></content>
      
        <categories>
            
            <category> 其他篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 属性注入]]></title>
      <url>http://blog.joylau.cn/2017/06/13/SpringBoot-ConfigurationProperties/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="通常的属性注入"><a href="#通常的属性注入" class="headerlink" title="通常的属性注入"></a>通常的属性注入</h2><p>一般情况下我们使用<strong>Spring</strong>或者<strong>SpringMVC</strong>的时候会使用<code>@Value()</code>注入</p>
<p>使用<strong>SpringBoot</strong>的时候会使用<code>@ConfigurationProperties(prefix = &quot;xxxx&quot;)</code></p>
<p>注入自定义的呢？这样：<code>@ConfigurationProperties(prefix = &quot;xxx&quot;,locations = &quot;classpath:config/xxxx.properties&quot;)</code></p>
<h2 id="更复杂一点的注入"><a href="#更复杂一点的注入" class="headerlink" title="更复杂一点的注入"></a>更复杂一点的注入</h2><p>如上图所示我注入了一个<code>List&lt;String&gt;</code></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>那么同样的方式，是否可以注入Map<string>,String[]….呢？</string></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><code>properties</code>的文件被读取的时候使用的就是Map,那么我们知道Map是无序了，这样就会导致我们原先要求的一致性可能达不到</p>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p><code>properties</code>文件改成采用<code>yml</code>文件，或者升级<strong>SpringBoot</strong>的版本，貌似新版本采用的<code>LinkedHashMap</code></p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 项目问题汇总及解决]]></title>
      <url>http://blog.joylau.cn/2017/06/12/SpringBoot-Question-Tips/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="引用本地包并打包部署的问题"><a href="#引用本地包并打包部署的问题" class="headerlink" title="引用本地包并打包部署的问题"></a>引用本地包并打包部署的问题</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>在最近的开发中需要对接C++服务提供的<code>ZeroC Ice</code>接口，客户机环境安装了和服务环境相同的Ice，服务端的Ice比较老，是3.4.0的版本<br>在maven的中央仓库中没有找到<strong>ice-3.4.0</strong>的jar包，只能引用安装路径下提供的jar了</li>
</ul>
<p>那么常用的写法是这样的：（包括但不限于SpringBoot）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ice--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Ice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Ice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/lib/Ice.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我是在src下新建的lib目录，在开发编译的是没有问题的。</p>
<p>在进行打包的时候发现Ice.jar没有被打进去</p>
<p>相对于这个应用来说，打成jar包是最合适的做法了</p>
<blockquote>
<blockquote>
<p>这里说一下，用package打包，不要用SpringBoot插件的jar打包</p>
</blockquote>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在<em>build</em>里加上这一段：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            ..............</span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/lib<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>BOOT-INF/lib/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>BOOT-INF/classes/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>之后，再打包，再解压一看，果然是打进去了，完美~</p>
<p>然后，遇到了新问题……..</p>
<h3 id="以jar运行时没有主清单属性"><a href="#以jar运行时没有主清单属性" class="headerlink" title="以jar运行时没有主清单属性"></a>以jar运行时没有主清单属性</h3><p>之后便很愉快的使用 <code>java -jar  xxxxx.jar</code></p>
<p>提示：没有主清单属性</p>
<p>再解压一看，有Application.java类，但是jar包的大小明显不对，光SpringBoot父项目依赖的jar至少也有10+M了，这个大小明显不对</p>
<p>在结合没有主属性的错误，知道了错误的原因在这：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我用的项目是多模块依赖</p>
<p>解决的方式是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-dependencies.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>正如我文章截图的那样，解决问题！</p>
<h3 id="父项目依赖-打包成jar"><a href="#父项目依赖-打包成jar" class="headerlink" title="父项目依赖,打包成jar"></a>父项目依赖,打包成jar</h3><p>同时加入以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2017年9月19日更新"><a href="#2017年9月19日更新" class="headerlink" title="2017年9月19日更新"></a>2017年9月19日更新</h2><h3 id="SpringBoot-项目打包时修改-MANIFEST-MF-文件"><a href="#SpringBoot-项目打包时修改-MANIFEST-MF-文件" class="headerlink" title="SpringBoot 项目打包时修改 MANIFEST.MF 文件"></a>SpringBoot 项目打包时修改 MANIFEST.MF 文件</h3><p>一般情况下我们的 MANIFEST.MF内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Implementation-Title: joylau-media</span><br><span class="line">Implementation-Version: 1.7-RELEASE</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Built-By: JoyLau</span><br><span class="line">Implementation-Vendor-Id: cn.joylau.code</span><br><span class="line">Spring-Boot-Version: 1.5.4.RELEASE</span><br><span class="line">Implementation-Vendor: Pivotal Software, Inc.</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher</span><br><span class="line">Start-Class: cn.joylau.code.JoylauMediaApplication</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Created-By: Apache Maven 3.5.0</span><br><span class="line">Build-Jdk: 1.8.0_45</span><br><span class="line">Implementation-URL: http://projects.spring.io/spring-boot/joylau-media</span><br><span class="line"> /</span><br></pre></td></tr></table></figure>
<p>解决：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//修改版本号，一般为pom文件的版本</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Manifest-Version</span>&gt;</span>$&#123;version&#125;<span class="tag">&lt;/<span class="name">Manifest-Version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot-项目中引入缓存"><a href="#SpringBoot-项目中引入缓存" class="headerlink" title="SpringBoot 项目中引入缓存"></a>SpringBoot 项目中引入缓存</h3><ul>
<li>引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>@EnableCaching 开启缓存</p>
<p>@CacheConfig(cacheNames = “api_cache”) 配置一个缓存类的公共信息</p>
<p>@Cacheable() 注解到方法上开启缓存</p>
<p>@CachePut() 根据使用的条件来执行具体的方法</p>
<p>@CacheEvict() 根据配置的参数删除缓存</p>
<p>SpringBoot默认支持很多缓存，spring.cache.type就可以知道，默认的是实现的是SimpleCacheManage，这里我记一下怎么设置缓存的超时时间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHENAME = <span class="string">"api_cache"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcurrentMapCacheManager(CACHENAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@CacheEvict</span>(allEntries = <span class="keyword">true</span>, value = &#123;CACHENAME&#125;)</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">120</span> * <span class="number">1000</span> ,  initialDelay = <span class="number">500</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCacheEvict</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Flush Cache "</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里巧妙的使用了 定时任务，再其加上注解CacheEvict来清除所有cache name 为 api——cache 的缓存，超时时间是120s</p>
<h3 id="在说说我比较喜欢的使用方式"><a href="#在说说我比较喜欢的使用方式" class="headerlink" title="在说说我比较喜欢的使用方式"></a>在说说我比较喜欢的使用方式</h3><p>单独写了篇文章，戳下面：</p>
<ul>
<li><a href="/2017/09/19/SpringBoot-CaffeineCache/">重剑无锋,大巧不工 SpringBoot — 推荐使用CaffeineCache</a></li>
</ul>
<blockquote>
<blockquote>
<p>持续更新中…</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- @RequestBody JSON参数处理]]></title>
      <url>http://blog.joylau.cn/2017/06/12/SpringBoot-RequestBody/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>用jackson 作为json转换器的时候，如果传入的json的key 比接收对象多的话，就会报错</li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="先看下SpringMVC原来的配置"><a href="#先看下SpringMVC原来的配置" class="headerlink" title="先看下SpringMVC原来的配置"></a>先看下SpringMVC原来的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span> <span class="attr">ref</span>=<span class="string">"jacksonObjectMapper"</span> /&gt;</span>			</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">              	<span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>		</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的json转换器配置的是:<code>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</code></p>
<p>我们进入到这个类中发现，这个类是继承的 <code>AbstractJackson2HttpMessageConverter</code></p>
<p>而 <code>AbstractJackson2HttpMessageConverter</code> 继承的是 <code>AbstractHttpMessageConverter&lt;Object&gt;</code><br>找到这个包下面 有一个类 <code>GsonHttpMessageConverter</code> 同样继承的 <code>AbstractHttpMessageConverter&lt;Object&gt;</code><br>OK，就是他了 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.GsonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">              	<span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>		</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，参数就随便你整吧，多点少点杜无所谓，完全匹配不上就返回个{}给你</p>
<h3 id="来看下fastjson"><a href="#来看下fastjson" class="headerlink" title="来看下fastjson"></a>来看下fastjson</h3><p>fastjson下面有这个一个 package : <code>com.alibaba.fastjson.support.spring</code></p>
<p>根据字面意思可知，这里是对spring的支持</p>
<p>找到下面这个class <code>FastJsonHttpMessageConverter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">Object</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>OK，这个类同样也是继承了 AbstractHttpMessageConverter<object> </object></p>
<p>只要把这个类注入进去就可以了</p>
<h3 id="SpringBoot使用FastJSON解析数据"><a href="#SpringBoot使用FastJSON解析数据" class="headerlink" title="SpringBoot使用FastJSON解析数据"></a>SpringBoot使用FastJSON解析数据</h3><ul>
<li>第一种继承WebMvcConfigurerAdapter，重写configureMessageConverters方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">    FastJsonHttpMessageConverter converter=<span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">    FastJsonConfig fastJsonConfig= <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">    converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">    converters.add(converter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方式bean注入HttpMessageConverters：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">fastJsonHttpMessageConverters</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();  </span><br><span class="line">FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();  </span><br><span class="line">fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);  </span><br><span class="line">fastConverter.setFastJsonConfig(fastJsonConfig);  </span><br><span class="line">HttpMessageConverter&lt;?&gt; converter = fastConverter;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HttpMessageConverters(converter);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JSON </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年程序员高考试卷]]></title>
      <url>http://blog.joylau.cn/2017/06/09/College-Entrance-Examination-of-2017-for-Progarmmer/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="2017年普通高等学校招生全国统一考试"><a href="#2017年普通高等学校招生全国统一考试" class="headerlink" title="2017年普通高等学校招生全国统一考试"></a>2017年普通高等学校招生全国统一考试</h2><blockquote>
<blockquote>
<center>程序员的高考试卷（A卷）    <code>考生类别：码农</code></center>
</blockquote>
</blockquote>
<h3 id="1、程序员A：借我1000元吧。程序员B：给你凑个整数。程序员B借给程序员A多少钱？（）"><a href="#1、程序员A：借我1000元吧。程序员B：给你凑个整数。程序员B借给程序员A多少钱？（）" class="headerlink" title="1、程序员A：借我1000元吧。程序员B：给你凑个整数。程序员B借给程序员A多少钱？（）"></a>1、程序员A：借我1000元吧。程序员B：给你凑个整数。程序员B借给程序员A多少钱？（）</h3><p>&emsp;&emsp;&emsp;A. 1000元<br>&emsp;&emsp;&emsp;B. 1024元<br>&emsp;&emsp;&emsp;C. 1111元</p>
<h3 id="2、程序员A：嘿-是什么意思啊？程序员B：嘿-程序员A：呃-我问你-是什么意思？程序员B：问吧-程序员A：我刚才不是问了么？程序员B：啊？程序员A到底问了程序员B什么问题？（）"><a href="#2、程序员A：嘿-是什么意思啊？程序员B：嘿-程序员A：呃-我问你-是什么意思？程序员B：问吧-程序员A：我刚才不是问了么？程序员B：啊？程序员A到底问了程序员B什么问题？（）" class="headerlink" title="2、程序员A：嘿 //是什么意思啊？程序员B：嘿.程序员A：呃 我问你//是什么意思？程序员B：问吧.程序员A：我刚才不是问了么？程序员B：啊？程序员A到底问了程序员B什么问题？（）"></a><strong>2、程序员A：嘿 //是什么意思啊？程序员B：嘿.程序员A：呃 我问你//是什么意思？程序员B：问吧.程序员A：我刚才不是问了么？程序员B：啊？程序员A到底问了程序员B什么问题？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 嘿<br>&emsp;&emsp;&emsp;B. 呃 我问你<br>&emsp;&emsp;&emsp;C. //是什么意思</p>
<h3 id="3、为什么程序员分不清万圣节和圣诞节？（）"><a href="#3、为什么程序员分不清万圣节和圣诞节？（）" class="headerlink" title="3、为什么程序员分不清万圣节和圣诞节？（）"></a><strong>3、为什么程序员分不清万圣节和圣诞节？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 因为 31 OCT == 25 DEC<br>&emsp;&emsp;&emsp;B. 程序员只有加班/不加班，不过节<br>&emsp;&emsp;&emsp;C. 程序员没有女朋友，不过节</p>
<h3 id="4、程序员最怕弹出的窗口是（）"><a href="#4、程序员最怕弹出的窗口是（）" class="headerlink" title="4、程序员最怕弹出的窗口是（）"></a><strong>4、程序员最怕弹出的窗口是（）</strong></h3><p>&emsp;&emsp;&emsp;A.&emsp;&emsp;&emsp;<img src="//image.joylau.cn/blog/gaokao-a.jpg" alt="选项A"></p>
<p>&emsp;&emsp;&emsp;B.&emsp;&emsp;&emsp;<img src="//image.joylau.cn/blog/gaokao-b.jpg" alt="选项B"></p>
<p>&emsp;&emsp;&emsp;C.&emsp;&emsp;&emsp;<img src="//image.joylau.cn/blog/gaokao-c.jpg" alt="选项C"></p>
<h3 id="5、程序员：哎，太累了日子没法过了，怎么才能换行啊？（）"><a href="#5、程序员：哎，太累了日子没法过了，怎么才能换行啊？（）" class="headerlink" title="5、程序员：哎，太累了日子没法过了，怎么才能换行啊？（）"></a><strong>5、程序员：哎，太累了日子没法过了，怎么才能换行啊？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 打回车<br>&emsp;&emsp;&emsp;B. 不换行，日子不过了<br>&emsp;&emsp;&emsp;C. 除了敲代码，都不会，换行还是敲代码啊</p>
<h3 id="6、程序员会给自己的孩子起什么名字？（）"><a href="#6、程序员会给自己的孩子起什么名字？（）" class="headerlink" title="6、程序员会给自己的孩子起什么名字？（）"></a><strong>6、程序员会给自己的孩子起什么名字？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 依依、灵灵、依灵、灵依、依初<br>&emsp;&emsp;&emsp;B. Ctrl、Alt 、Delete<br>&emsp;&emsp;&emsp;C. 程序员怎么会有女朋友？</p>
<h3 id="7、如何快速挣到一百万？（）"><a href="#7、如何快速挣到一百万？（）" class="headerlink" title="7、如何快速挣到一百万？（）"></a><strong>7、如何快速挣到一百万？（）</strong></h3><p>&emsp;&emsp;&emsp;A. while<br>&emsp;&emsp;&emsp;B. 买彩票<br>&emsp;&emsp;&emsp;C. 当乞丐</p>
<h3 id="8、程序员下班前给老婆打电话：老婆，晚饭我带回来吃，你说买些啥？老婆：买1斤包子吧，如果遇到卖西瓜的，就买一个。程序员买包子时，看到旁边有人在卖西瓜。那么，程序员带了什么晚饭回家？（）"><a href="#8、程序员下班前给老婆打电话：老婆，晚饭我带回来吃，你说买些啥？老婆：买1斤包子吧，如果遇到卖西瓜的，就买一个。程序员买包子时，看到旁边有人在卖西瓜。那么，程序员带了什么晚饭回家？（）" class="headerlink" title="8、程序员下班前给老婆打电话：老婆，晚饭我带回来吃，你说买些啥？老婆：买1斤包子吧，如果遇到卖西瓜的，就买一个。程序员买包子时，看到旁边有人在卖西瓜。那么，程序员带了什么晚饭回家？（）"></a><strong>8、程序员下班前给老婆打电话：老婆，晚饭我带回来吃，你说买些啥？老婆：买1斤包子吧，如果遇到卖西瓜的，就买一个。程序员买包子时，看到旁边有人在卖西瓜。那么，程序员带了什么晚饭回家？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 1斤包子<br>&emsp;&emsp;&emsp;B. 1个包子<br>&emsp;&emsp;&emsp;C. 1个西瓜</p>
<h3 id="9、我GET不到你的笑点，怎么办？（）"><a href="#9、我GET不到你的笑点，怎么办？（）" class="headerlink" title="9、我GET不到你的笑点，怎么办？（）"></a><strong>9、我GET不到你的笑点，怎么办？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 智商不在一条线<br>&emsp;&emsp;&emsp;B. 太矮了，踩凳子上<br>&emsp;&emsp;&emsp;C. 用Post试试</p>
<h3 id="10、为什么吸烟的程序员不在乎香烟盒上的那个警告？（）"><a href="#10、为什么吸烟的程序员不在乎香烟盒上的那个警告？（）" class="headerlink" title="10、为什么吸烟的程序员不在乎香烟盒上的那个警告？（）"></a><strong>10、为什么吸烟的程序员不在乎香烟盒上的那个警告？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 字太小<br>&emsp;&emsp;&emsp;B. 程序员眼中只有程序<br>&emsp;&emsp;&emsp;C. 不关心Warning，只关心Error</p>
<h3 id="11、一对程序员恋人面对面坐着，他们在做什么？（）"><a href="#11、一对程序员恋人面对面坐着，他们在做什么？（）" class="headerlink" title="11、一对程序员恋人面对面坐着，他们在做什么？（）"></a><strong>11、一对程序员恋人面对面坐着，他们在做什么？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 面向对象编程<br>&emsp;&emsp;&emsp;B. 喝咖啡<br>&emsp;&emsp;&emsp;C. 抱怨产品经理</p>
<h3 id="12、老板：小程，下班前新版本一定要上线！小程：好的。第二天，老板上班，问小程：新版本怎么还没上线？-小程怎么回答的？（）"><a href="#12、老板：小程，下班前新版本一定要上线！小程：好的。第二天，老板上班，问小程：新版本怎么还没上线？-小程怎么回答的？（）" class="headerlink" title="12、老板：小程，下班前新版本一定要上线！小程：好的。第二天，老板上班，问小程：新版本怎么还没上线？  小程怎么回答的？（）"></a><strong>12、老板：小程，下班前新版本一定要上线！小程：好的。第二天，老板上班，问小程：新版本怎么还没上线？  小程怎么回答的？（）</strong></h3><p>&emsp;&emsp;&emsp;A. 版本出问题了<br>&emsp;&emsp;&emsp;B. 版本上线前需求又改了<br>&emsp;&emsp;&emsp;C. 我还没下班呢</p>
<p><center> <img src="//image.joylau.cn/blog/gaokao-title.jpg" alt="Title"></center></p>
<h2 id="2017年普通高等学校招生全国统一考试-1"><a href="#2017年普通高等学校招生全国统一考试-1" class="headerlink" title="2017年普通高等学校招生全国统一考试"></a>2017年普通高等学校招生全国统一考试</h2><blockquote>
<blockquote>
<p><center>程序员的高考试卷（B卷） <code>考生类别：码神</code><center></center></center></p>
</blockquote>
</blockquote>
<h3 id="1、以下哪个概念和公孙龙的《指物论》中的“指”字含义相近？（）"><a href="#1、以下哪个概念和公孙龙的《指物论》中的“指”字含义相近？（）" class="headerlink" title="1、以下哪个概念和公孙龙的《指物论》中的“指”字含义相近？（）"></a>1、以下哪个概念和公孙龙的《指物论》中的“指”字含义相近？（）</h3><p>&emsp;&emsp;&emsp;A. 变量<br>&emsp;&emsp;&emsp;B. 数组<br>&emsp;&emsp;&emsp;C. 对象<br>&emsp;&emsp;&emsp;D. 指针 </p>
<h3 id="2、蔺相如，司马相如；魏无忌，长孙无忌。下列哪一组对应关系与此类似（-）"><a href="#2、蔺相如，司马相如；魏无忌，长孙无忌。下列哪一组对应关系与此类似（-）" class="headerlink" title="2、蔺相如，司马相如；魏无忌，长孙无忌。下列哪一组对应关系与此类似（ ）"></a>2、蔺相如，司马相如；魏无忌，长孙无忌。下列哪一组对应关系与此类似（ ）</h3><p>&emsp;&emsp;&emsp;A.  PHP，Python<br>&emsp;&emsp;&emsp;B.  JSP，servlet<br>&emsp;&emsp;&emsp;C.  java，java script<br>&emsp;&emsp;&emsp;D. C，C++</p>
<h3 id="3、秦始皇吞并六国采用了以下哪种算法思想？（-）"><a href="#3、秦始皇吞并六国采用了以下哪种算法思想？（-）" class="headerlink" title="3、秦始皇吞并六国采用了以下哪种算法思想？（ ）"></a>3、秦始皇吞并六国采用了以下哪种算法思想？（ ）</h3><p>&emsp;&emsp;&emsp;A. 递归<br>&emsp;&emsp;&emsp;B. 分治<br>&emsp;&emsp;&emsp;C. 迭代<br>&emsp;&emsp;&emsp;D. 模拟</p>
<h3 id="4、雅典王子忒修斯勇闯克里特岛斩杀米诺牛的时候采用了以下哪种算法？（-）"><a href="#4、雅典王子忒修斯勇闯克里特岛斩杀米诺牛的时候采用了以下哪种算法？（-）" class="headerlink" title="4、雅典王子忒修斯勇闯克里特岛斩杀米诺牛的时候采用了以下哪种算法？（  ）"></a>4、雅典王子忒修斯勇闯克里特岛斩杀米诺牛的时候采用了以下哪种算法？（  ）</h3><p>&emsp;&emsp;&emsp;A. 动态规划<br>&emsp;&emsp;&emsp;B. 穷举<br>&emsp;&emsp;&emsp;C. 记忆化搜索<br>&emsp;&emsp;&emsp;D. Dijkstra算法</p>
<h3 id="5、众里寻他千百度，蓦然回首，那人却在灯火阑珊处（辛弃疾《青玉案》）。所体现的算法是：（-）"><a href="#5、众里寻他千百度，蓦然回首，那人却在灯火阑珊处（辛弃疾《青玉案》）。所体现的算法是：（-）" class="headerlink" title="5、众里寻他千百度，蓦然回首，那人却在灯火阑珊处（辛弃疾《青玉案》）。所体现的算法是：（  ）"></a>5、众里寻他千百度，蓦然回首，那人却在灯火阑珊处（辛弃疾《青玉案》）。所体现的算法是：（  ）</h3><p>&emsp;&emsp;&emsp;A. 贪心<br>&emsp;&emsp;&emsp;B. 回溯<br>&emsp;&emsp;&emsp;C. 穷举<br>&emsp;&emsp;&emsp;D. 分治          </p>
<h3 id="6、《公孙龙子》记载：“齐王之谓尹文曰：‘寡人甚好士，以齐国无士，何也？’尹文曰：‘愿闻大王之所谓士者。’齐王无以应。”这说明了齐王：（-）"><a href="#6、《公孙龙子》记载：“齐王之谓尹文曰：‘寡人甚好士，以齐国无士，何也？’尹文曰：‘愿闻大王之所谓士者。’齐王无以应。”这说明了齐王：（-）" class="headerlink" title="6、《公孙龙子》记载：“齐王之谓尹文曰：‘寡人甚好士，以齐国无士，何也？’尹文曰：‘愿闻大王之所谓士者。’齐王无以应。”这说明了齐王：（  ）"></a>6、《公孙龙子》记载：“齐王之谓尹文曰：‘寡人甚好士，以齐国无士，何也？’尹文曰：‘愿闻大王之所谓士者。’齐王无以应。”这说明了齐王：（  ）</h3><p>&emsp;&emsp;&emsp;A. 昏庸无道<br>&emsp;&emsp;&emsp;B. 是个结巴<br>&emsp;&emsp;&emsp;C. 不会下定义<br>&emsp;&emsp;&emsp;D. 不会定义自己的需求 </p>
<h3 id="7、惠施曾提出过“卵有毛”的命题，以下哪一项是导致这个错误命题的原因：（-）"><a href="#7、惠施曾提出过“卵有毛”的命题，以下哪一项是导致这个错误命题的原因：（-）" class="headerlink" title="7、惠施曾提出过“卵有毛”的命题，以下哪一项是导致这个错误命题的原因：（  ）"></a>7、惠施曾提出过“卵有毛”的命题，以下哪一项是导致这个错误命题的原因：（  ）</h3><p>&emsp;&emsp;&emsp;A. 混淆了命名空间<br>&emsp;&emsp;&emsp;B. 引入了错误的包<br>&emsp;&emsp;&emsp;C. 衍生类未重载<br>&emsp;&emsp;&emsp;D. 调用了危险的指针</p>
<h3 id="8、下面哪种面向对象的方法可以让你变得富有？（-）"><a href="#8、下面哪种面向对象的方法可以让你变得富有？（-）" class="headerlink" title="8、下面哪种面向对象的方法可以让你变得富有？（   ）"></a>8、下面哪种面向对象的方法可以让你变得富有？（   ）</h3><p>&emsp;&emsp;&emsp;A. 继承<br>&emsp;&emsp;&emsp;B. 封装<br>&emsp;&emsp;&emsp;C. 多态<br>&emsp;&emsp;&emsp;D. 抽象</p>
<blockquote>
<blockquote>
<p>那么你能答对几题呢? 下期发布标准答案 <img src="//tb2.bdstatic.com/tb/editor/images/face/i_f25.png?t=20140803" alt="滑稽"></p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> 其他篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[收集整理一些JAVA学习的技能树]]></title>
      <url>http://blog.joylau.cn/2017/06/05/Skill-Tree-Of-Java/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="先来一张集合的"><a href="#先来一张集合的" class="headerlink" title="先来一张集合的"></a>先来一张集合的</h2><p><img src="//image.joylau.cn/blog/java-skill-tree1.png" alt="java-skill-tree1"></p>
<h2 id="Java核心技术总结"><a href="#Java核心技术总结" class="headerlink" title="Java核心技术总结"></a>Java核心技术总结</h2><p><img src="//image.joylau.cn/blog/java-skill-tree2.gif" alt="java-skill-tree2"></p>
<h2 id="J2EE技术总结"><a href="#J2EE技术总结" class="headerlink" title="J2EE技术总结"></a>J2EE技术总结</h2><p><img src="//image.joylau.cn/blog/java-skill-tree3.gif" alt="java-skill-tree3"></p>
<h2 id="工作学习总结"><a href="#工作学习总结" class="headerlink" title="工作学习总结"></a>工作学习总结</h2><p><img src="//image.joylau.cn/blog/java-skill-tree4.gif" alt="java-skill-tree4"></p>
<h2 id="大数据相关技术总结"><a href="#大数据相关技术总结" class="headerlink" title="大数据相关技术总结"></a>大数据相关技术总结</h2><p><img src="//image.joylau.cn/blog/java-skill-tree5.gif" alt="java-skill-tree5"></p>
<h2 id="来看看Java工程师技能表"><a href="#来看看Java工程师技能表" class="headerlink" title="来看看Java工程师技能表"></a>来看看Java工程师技能表</h2><p><img src="//image.joylau.cn/blog/java-skill-tree6.png" alt="java-skill-tree6"><br><img src="//image.joylau.cn/blog/java-skill-tree8.png" alt="java-skill-tree8"><br><img src="//image.joylau.cn/blog/java-skill-tree9.png" alt="java-skill-tree9"></p>
<h2 id="恐怖的Linux大法"><a href="#恐怖的Linux大法" class="headerlink" title="恐怖的Linux大法"></a>恐怖的Linux大法</h2><p><img src="//image.joylau.cn/blog/java-skill-tree7.png" alt="java-skill-tree7"></p>]]></content>
      
        <categories>
            
            <category> 其他篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决一道智力题]]></title>
      <url>http://blog.joylau.cn/2017/06/02/SolveBrainAndPuzzles/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/imback.jpg" alt="Im Back"></p>
<p>今天被问了一道题，是这样的：</p>
<blockquote>
<blockquote>
<p>求解：一筐鸡蛋：<br>1个1个拿，正好拿完<br>2个2个拿，还剩1个<br>3个3个拿，正好拿完<br>4个4个拿，还剩1个<br>5个5个拿，还差1个<br>6个6个拿，还剩3个<br>7个7个拿，正好拿完<br>8个8个拿，还剩1个<br>9个9个拿，正好拿完<br>问筐里最少有多少鸡蛋</p>
</blockquote>
</blockquote>
<p>能算出这道题的智商不一般！求答案？有高手没，算算吧！</p>
<p>”5个5个拿，是还差1个“，也就是还剩下4个，这是这个题目的一个小陷阱…</p>
<p>我第一反应想到的是这个数一定是63的倍数，但是后来就没有什么想法了。</p>
<p>再后来，我想到了一个残暴的方法，<code>穷举法</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; i % <span class="number">6</span> == <span class="number">3</span> &amp;&amp; i % <span class="number">7</span> == <span class="number">0</span></span><br><span class="line">            &amp;&amp; i % <span class="number">8</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">9</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"鸡蛋数="</span> + i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行后正确答案是1449;</p>
<p>能被7整除，能被9整除，所以肯定是63的倍数<br>如果利用63的倍数来做写的话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">63</span> *i;</span><br><span class="line">        <span class="keyword">if</span> (num%<span class="number">5</span>==<span class="number">4</span>&amp;&amp;num%<span class="number">6</span>==<span class="number">3</span>&amp;&amp;num%<span class="number">8</span>==<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"鸡蛋数="</span> + num);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>答案依旧是1449，稍微显得动了点头脑，但还是穷举法，有什么高大上的解法么？？？在下默默献上膝盖！</p>]]></content>
      
        <categories>
            
            <category> 其他篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 插件开发]]></title>
      <url>http://blog.joylau.cn/2017/04/28/IntelliJIDEA-Plugins/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/IntelliJIDEA-Plugins.png" alt="IntelliJIDEA-Plugins"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我现在用的这个插件时ECTranslation,是用于做中英文翻译的，可以在看文档和注释的是方便的使用，然而近期变得不好用了</p>
<ul>
<li>翻译的内容有时能出来，有时出不来，有时甚至没有反应</li>
<li><strong>查看了该款插件的源代码，发现是调用的有道翻译的API接口，而且在代码里写死了APIkey和KeyFrom</strong></li>
<li>调用了有道的API，加上上面作者提供的Key，再传入翻译的文本内容，发现返回值居然是请求次数过多，被封禁了…..</li>
<li>明白了，很多使用这个插件的开发者都是用的作者提供的默认Key，默认情况下1小时请求的限制次数是1000次</li>
<li>肯定是次数超了</li>
<li><strong>但是他的配置信息是写在代码里的，能配置到IDEA的面板上供使用者自己配置就好了</strong></li>
<li>于是我有了自己动手的想法</li>
</ul>
<h2 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h2><p>第一步创建IDEA插件项目：<br><img src="//image.joylau.cn/blog/IntelliJIDEA-Build.png" alt="IntelliJIDEA-Build"><br>第二步目录结构如下图所示：<br><img src="//image.joylau.cn/blog/IntelliJIDEA-folder.png" alt="IntelliJIDEA-Folder"></p>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="plugin-xml"><a href="#plugin-xml" class="headerlink" title="plugin.xml"></a>plugin.xml</h3><p>看代码，相信能看懂的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">idea-plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>cn.joylau.plugins.translation<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>joylau-translation<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vendor</span> <span class="attr">email</span>=<span class="string">"2587038142.liu@gmail"</span> <span class="attr">url</span>=<span class="string">"http://www.joylau.cn"</span>&gt;</span>JoyLau<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      Plugin for translate English to Chinese.&lt;br&gt;</span><br><span class="line">      &lt;li&gt;1. Choose the word you want translate.&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;2. Press Ctrl + NUMPAD0.&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;3. Fork ECTranslation Change ApiKey and KeyFrom&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    ]]&gt;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">change-notes</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      &lt;li&gt;Change ApiKey and KeyFrom for myself&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Change KeyMap to Ctrl + NumPad 0&lt;/li&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">change-notes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">idea-version</span> <span class="attr">since-build</span>=<span class="string">"141.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span><br><span class="line"><span class="comment">       on how to target different products --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- uncomment to enable plugin in all products</span></span><br><span class="line"><span class="comment">  &lt;depends&gt;com.intellij.modules.lang&lt;/depends&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your extensions here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your actions here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">id</span>=<span class="string">"ECTranslation"</span> <span class="attr">class</span>=<span class="string">"cn.joylau.plugins.translation.ECTranslation"</span> <span class="attr">text</span>=<span class="string">"Translate"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"EditMenu"</span> <span class="attr">anchor</span>=<span class="string">"first"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"EditorPopupMenu"</span> <span class="attr">anchor</span>=<span class="string">"first"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keyboard-shortcut</span> <span class="attr">keymap</span>=<span class="string">"$default"</span> <span class="attr">first-keystroke</span>=<span class="string">"ctrl NUMPAD0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">idea-plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>只有一个action ，调用的类是<code>ECTranslation</code>，快捷键设置的<code>ctrl + NumPad 0</code></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><strong><em>代码都是人家的，我就没好意思往IDEA的仓库里上传了…</em></strong></p>
<blockquote>
<blockquote>
<p>如果你想使用这个插件： <a href="https://github.com/JoyLau/joylau-translation/releases" target="_blank" rel="noopener">点击查看</a>  或  <a href="http://image.joylau.cn/plugins/joylau-translation.1.0.REALEASE.jar" target="_blank" rel="noopener">点击下载</a></p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> Plugins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis主从复制 --- 实现读写分离]]></title>
      <url>http://blog.joylau.cn/2017/04/27/Redis-Master-Slave/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/Redis-Master&amp;Slave.jpg" alt="Redis-Master&amp;Slave"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</span></span><br><span class="line"><span class="comment"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class="line"><span class="comment">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class="line"><span class="comment">#    a given number of slaves.</span></span><br><span class="line"><span class="comment"># 2) Redis slaves are able to perform a partial resynchronization with the</span></span><br><span class="line"><span class="comment">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class="line"><span class="comment">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class="line"><span class="comment">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class="line"><span class="comment"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class="line"><span class="comment">#    network partition slaves automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">slaveof xx.xx.xx.xx 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the "requirepass" configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the slave to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the slave request.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">masterauth xx</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a slave loses its connection with the master, or when the replication</span></span><br><span class="line"><span class="comment"># is still in progress, the slave can act in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will</span></span><br><span class="line"><span class="comment">#    still reply to client requests, possibly with out of date data, or the</span></span><br><span class="line"><span class="comment">#    data set may just be empty if this is the first synchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) if slave-serve-stale-data is set to 'no' the slave will reply with</span></span><br><span class="line"><span class="comment">#    an error "SYNC with master in progress" to all the kind of commands</span></span><br><span class="line"><span class="comment">#    but to INFO and SLAVEOF.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can configure a slave instance to accept writes or not. Writing against</span></span><br><span class="line"><span class="comment"># a slave instance may be useful to store some ephemeral data (because data</span></span><br><span class="line"><span class="comment"># written on a slave will be easily deleted after resync with the master) but</span></span><br><span class="line"><span class="comment"># may also cause problems if clients are writing to it because of a</span></span><br><span class="line"><span class="comment"># misconfiguration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since Redis 2.6 by default slaves are read-only.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: read only slaves are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It's just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only slave exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only slaves using 'rename-command' to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line">slave-read-only no</span><br></pre></td></tr></table></figure>
<h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><ul>
<li><code>slaveof</code> ： Slave库配置Master的ip地址和端口号</li>
<li><code>masterauth</code> ：如果Master配置了密码，那么这里设置密码</li>
<li><code>slave-serve-stale-data</code> ： 如果Master宕机了，Salve是否继续提供服务</li>
<li><code>slave-read-only</code> ： Slave 是否是只读模式，默认为是</li>
</ul>
<h2 id="部分配置项解释"><a href="#部分配置项解释" class="headerlink" title="部分配置项解释"></a>部分配置项解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes <span class="comment">#是否以后台进程运行，默认为no </span></span><br><span class="line">pidfile /var/run/redis.pid <span class="comment">#如以后台进程运行，则需指定一个pid，默认为/var/run/redis.pid </span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定主机IP，默认值为127.0.0.1（注释） </span></span><br><span class="line">port 6379 <span class="comment">#监听端口，默认为6379 </span></span><br><span class="line">timeout 300 <span class="comment">#超时时间，默认为300（秒） </span></span><br><span class="line">loglevel notice <span class="comment">#日志记slave-serve-stale-data yes：在master服务器挂掉或者同步失败时，从服务器是否继续提供服务。录等级，有4个可选值，debug，verbose（默认值），notice，warning </span></span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis.log <span class="comment">#日志记录方式，默认值为stdout </span></span><br><span class="line">databases 16 <span class="comment">#可用数据库数，默认值为16，默认数据库为0 </span></span><br><span class="line">save 900 1 <span class="comment">#900秒（15分钟）内至少有1个key被改变 </span></span><br><span class="line">save 300 10 <span class="comment">#300秒（5分钟）内至少有300个key被改变 </span></span><br><span class="line">save 60 10000 <span class="comment">#60秒内至少有10000个key被改变 </span></span><br><span class="line">rdbcompression yes <span class="comment">#存储至本地数据库时是否压缩数据，默认为yes </span></span><br><span class="line">dbfilename dump.rdb <span class="comment">#本地数据库文件名，默认值为dump.rdb </span></span><br><span class="line">dir ./ <span class="comment">#本地数据库存放路径，默认值为 ./</span></span><br><span class="line"></span><br><span class="line">slaveof 10.0.0.12 6379 <span class="comment">#当本机为从服务时，设置主服务的IP及端口（注释） </span></span><br><span class="line">masterauth elain <span class="comment">#当本机为从服务时，设置主服务的连接密码（注释） </span></span><br><span class="line">slave-serve-stale-data yes <span class="comment">#在master服务器挂掉或者同步失败时，从服务器是否继续提供服务。 </span></span><br><span class="line">requirepass elain <span class="comment">#连接密码（注释）</span></span><br><span class="line"></span><br><span class="line">maxclients 128 <span class="comment">#最大客户端连接数，默认不限制（注释） </span></span><br><span class="line">maxmemory <span class="comment">#设置最大内存，达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，任到达最大内存设置，将无法再进行写入操作。（注释） </span></span><br><span class="line">appendonly no <span class="comment">#是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认值为no </span></span><br><span class="line">appendfilename appendonly.aof <span class="comment">#更新日志文件名，默认值为appendonly.aof（注释） </span></span><br><span class="line">appendfsync everysec <span class="comment">#更新日志条件，共有3个可选值。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次（默认值）。</span></span><br><span class="line"></span><br><span class="line">really-use-vm yes </span><br><span class="line">vm-enabled yes <span class="comment">#是否使用虚拟内存，默认值为no </span></span><br><span class="line">vm-swap-file /tmp/redis.swap <span class="comment">#虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享 </span></span><br><span class="line">vm-max-memory 0 <span class="comment">#vm大小限制。0：不限制，建议60-80% 可用内存大小。 </span></span><br><span class="line">vm-page-size 32 <span class="comment">#根据缓存内容大小调整，默认32字节。 </span></span><br><span class="line">vm-pages 134217728 <span class="comment">#page数。每 8 page，会占用1字节内存。 </span></span><br><span class="line">vm-page-size <span class="comment">#vm-pages 等于 swap 文件大小 </span></span><br><span class="line">vm-max-threads 4 <span class="comment">#vm 最大io线程数。注意： 0 标志禁止使用vm </span></span><br><span class="line"><span class="built_in">hash</span>-max-zipmap-entries 512 </span><br><span class="line"><span class="built_in">hash</span>-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line">list-max-ziplist-entries 512 </span><br><span class="line">list-max-ziplist-value 64 </span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512 </span><br><span class="line">activerehashing yes</span><br></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>如果设置了一个Slave，无论是第一次连接还是重连到Master，它都会发出一个SYNC命令；</li>
<li>当Master收到SYNC命令之后，会做两件事：<br>  a) Master执行BGSAVE，即在后台保存数据到磁盘（rdb快照文件）；<br>  b) Master同时将新收到的写入和修改数据集的命令存入缓冲区（非查询类）；</li>
<li>当Master在后台把数据保存到快照文件完成之后，Master会把这个快照文件传送给Slave，而Slave则把内存清空后，加载该文件到内存中；</li>
<li>而Master也会把此前收集到缓冲区中的命令，通过Reids命令协议形式转发给Slave，Slave执行这些命令，实现和Master的同步；</li>
<li>Master/Slave此后会不断通过异步方式进行命令的同步，达到最终数据的同步一致；</li>
<li>需要注意的是Master和Slave之间一旦发生重连都会引发全量同步操作。但在2.8之后版本，也可能是部分同步操作。</li>
</ul>
<p>部分复制</p>
<ul>
<li>2.8开始，当Master和Slave之间的连接断开之后，他们之间可以采用持续复制处理方式代替采用全量同步。<br>  Master端为复制流维护一个内存缓冲区（in-memory backlog），记录最近发送的复制流命令；同时，Master和Slave之间都维护一个复制偏移量(replication offset)和当前Master服务器ID（Master run id）。当网络断开，Slave尝试重连时：<br>  a. 如果MasterID相同（即仍是断网前的Master服务器），并且从断开时到当前时刻的历史命令依然在Master的内存缓冲区中存在，则Master会将缺失的这段时间的所有命令发送给Slave执行，然后复制工作就可以继续执行了；<br>  b. 否则，依然需要全量复制操作；</li>
<li>Redis 2.8 的这个部分重同步特性会用到一个新增的 PSYNC 内部命令， 而 Redis 2.8 以前的旧版本只有 SYNC 命令， 不过， 只要从服务器是 Redis 2.8 或以上的版本， 它就会根据主服务器的版本来决定到底是使用 PSYNC 还是 SYNC ：<br>  如果主服务器是 Redis 2.8 或以上版本，那么从服务器使用 PSYNC 命令来进行同步。<br>  如果主服务器是 Redis 2.8 之前的版本，那么从服务器使用 SYNC 命令来进行同步。</li>
</ul>
<h2 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h2><h3 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a>全量同步</h3><blockquote>
<blockquote>
<p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下：<br>   　　1）从服务器连接主服务器，发送SYNC命令；<br>   　　2）主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；<br>   　　3）主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；<br>   　　4）从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；<br>   　　5）主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；<br>   　　6）从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p>
</blockquote>
</blockquote>
<h3 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h3><blockquote>
<blockquote>
<p>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。<br>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p>
</blockquote>
</blockquote>
<h2 id="Redis主从同步策略"><a href="#Redis主从同步策略" class="headerlink" title="Redis主从同步策略"></a>Redis主从同步策略</h2><p>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>参考文章：<a href="http://blog.csdn.net/sk199048/article/details/50725369" target="_blank" rel="noopener">http://blog.csdn.net/sk199048/article/details/50725369</a></li>
<li>参考文章：<a href="http://blog.csdn.net/stubborn_cow/article/details/50442950" target="_blank" rel="noopener">http://blog.csdn.net/stubborn_cow/article/details/50442950</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Redis篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud --- 构建开发环境]]></title>
      <url>http://blog.joylau.cn/2017/04/24/SpringCloud-Building/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/SpringEureka.png" alt="emoji"></p>
<h2 id="来个简单的小例子"><a href="#来个简单的小例子" class="headerlink" title="来个简单的小例子"></a>来个简单的小例子</h2><p>2个项目先来测试一下：</p>
<ul>
<li>eureka-server</li>
<li>eureka-service</li>
</ul>
<h2 id="eureka-server"><a href="#eureka-server" class="headerlink" title="eureka-server"></a>eureka-server</h2><h3 id="pom-配置"><a href="#pom-配置" class="headerlink" title="pom 配置"></a>pom 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.cloud.eureka.server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">eureka.client.register-with-eureka=<span class="literal">false</span></span><br><span class="line">eureka.client.fetch-registry=<span class="literal">false</span></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:<span class="variable">$&#123;server.port&#125;</span>/eureka/</span><br></pre></td></tr></table></figure>
<h3 id="EurekaServerApplication"><a href="#EurekaServerApplication" class="headerlink" title="EurekaServerApplication"></a>EurekaServerApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joylau.cloud.eureka.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="eureka-service"><a href="#eureka-service" class="headerlink" title="eureka-service"></a>eureka-service</h2><h3 id="pom-配置-1"><a href="#pom-配置-1" class="headerlink" title="pom 配置"></a>pom 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.cloud.eureka.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>Brixton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="application-properties-1"><a href="#application-properties-1" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-service</span><br><span class="line">server.port=8888</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure>
<h3 id="EurekaServerApplication-1"><a href="#EurekaServerApplication-1" class="headerlink" title="EurekaServerApplication"></a>EurekaServerApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joylau.cloud.eureka.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaServiceApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ComputeController"><a href="#ComputeController" class="headerlink" title="ComputeController"></a>ComputeController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joylau.cloud.eureka.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by JoyLau on 4/14/2017.</span></span><br><span class="line"><span class="comment"> * cn.joylau.cloud.eureka.service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span> ,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(@RequestParam Integer a, @RequestParam Integer b)</span> </span>&#123;</span><br><span class="line">        ServiceInstance instance = client.getLocalServiceInstance();</span><br><span class="line">        Integer r = a + b;</span><br><span class="line">        logger.info(<span class="string">"/add, host:"</span> + instance.getHost() + <span class="string">", service_id:"</span> + instance.getServiceId() + <span class="string">", result:"</span> + r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ul>
<li><code>@EnableEurekaServer</code> ： 开启服务发现</li>
<li>eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下eureka server也是一个eureka client ,必须要指定一个 server</li>
<li>当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除</li>
<li><code>@EnableDiscoveryClient</code> ： 注册一个微服务</li>
<li><code>spring.application.name</code> ：应用名</li>
</ul>]]></content>
      
        <categories>
            
            <category> SpringCloud篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JoyLau-MyBatis 使用说明]]></title>
      <url>http://blog.joylau.cn/2017/04/06/MyBatis-Joylau-MyBatis/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="关于joylau-mybatis的说明"><a href="#关于joylau-mybatis的说明" class="headerlink" title="关于joylau-mybatis的说明"></a>关于joylau-mybatis的说明</h2><ul>
<li>该项目来源自  <a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">https://github.com/abel533/Mapper</a>  详细信息和源代码可fork查看</li>
<li>我封装之后项目地址  <a href="https://github.com/JoyLau/joylau-mybatis" target="_blank" rel="noopener">https://github.com/JoyLau/joylau-mybatis</a></li>
<li>我自己整合通用Mapper，分页，以及排序功能，使用起来无缝结合，丝般顺滑</li>
<li>我对其封装了所有的通用mapper，并整合本项目添加了自己的方法，详细请查看下文或者在线查看api文档： <a href="http://api.joylau.cn/" target="_blank" rel="noopener">http://api.joylau.cn/</a></li>
<li>文档你主要需要查看function的类注释</li>
<li>下面我来逐一介绍：</li>
</ul>
<h3 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h3><p>继承FunctionController，目前有2个抽象方法，getSession()和getContextPath()，一看就知道是干嘛的，不多说。想要扩展很简单，继续写自己的方法即可</p>
<h3 id="BaseMapper"><a href="#BaseMapper" class="headerlink" title="BaseMapper"></a>BaseMapper</h3><ul>
<li>集成了MySQL所使用的绝大部分通用Mapper，包括BaseMapper，ExampleMapper，RowBoundsMapper，MySqlMapper，IdsMapper…等等，详细可查看API文档，或者下载源码查看</li>
<li>所有的单表及简单的多表操作都在这里面啦，基本上你是不需要扩展啦，好不好用，敲起mapper再点一下你就知道了</li>
</ul>
<h3 id="BaseService"><a href="#BaseService" class="headerlink" title="BaseService"></a>BaseService</h3><ul>
<li>得益于Spring项目的强大支持，在Spring4.x后，支持泛型注入，这使得我们封装的更加简单了</li>
<li>现在，不必再调用到Mapper层，现在在Service层就可以完美使用，封装了3个插入方法，4个更新方法，5个删除方法，13个查询方法</li>
<li>内容涵盖了单条记录CRUD；根据ID或者属性或者条件CRUD；批量删除，插入；分页查询</li>
<li>说下分页查询怎么使用：调用selectPage可以进行单表分页查询，调用selectPageByExample可以进行条件分页查询</li>
</ul>
<h3 id="BaseServiceImpl"><a href="#BaseServiceImpl" class="headerlink" title="BaseServiceImpl"></a>BaseServiceImpl</h3><ul>
<li>继承的FunctionServiceImpl已经实现了上述所有的通用CURD方法</li>
<li>在继承的FunctionServiceImpl类里我提供了获取mapper的方法，由此方法，可以进行很方便的扩展，你懂得~~</li>
</ul>
<h3 id="BaseModel"><a href="#BaseModel" class="headerlink" title="BaseModel"></a>BaseModel</h3><ul>
<li>添加每个实体都会用到的id属性</li>
<li>添加了createTime和updateTime属性，虽然在业务上可能没有什么用处，但是对于开发和运维的作用相当大，谁用谁知道</li>
</ul>
<h2 id="我的接口解释"><a href="#我的接口解释" class="headerlink" title="我的接口解释"></a>我的接口解释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 保存一个实体，null的属性也会保存，不会使用数据库默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 保存一个实体，null的属性不会保存，会使用数据库默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 批量插入，支持批量插入的数据库可以使用，另外该接口限制实体包含`id`属性并且必须为自增列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键更新实体全部字段，null值会被更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键更新属性不为null的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件更新实体`model`包含的全部属性，null值会被更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByExample</span><span class="params">(T model, Object example)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件更新实体`model`包含的不是null的属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByExampleSelective</span><span class="params">(T model, Object example)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体属性作为条件进行删除，查询条件使用等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体id删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByExample</span><span class="params">(Object example)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键字符串进行删除，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键字段进行删除，方法参数必须包含完整的主键属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体中的属性值进行查询，查询条件使用等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">select</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体中的id查询实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 查询全部结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据example条件和RowBounds进行分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByExampleAndRowBounds</span><span class="params">(Object example, RowBounds rowBounds)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键字符串进行查询，类中只有存在一个带有<span class="doctag">@Id</span>注解的字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 如 "1,2,3,4"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByIds</span><span class="params">(String ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">selectByPrimaryKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体中的属性查询总数，查询条件使用等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">selectCount</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件进行查询总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">selectCountByExample</span><span class="params">(Object example)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体中的属性进行查询，只能有一个返回值，有多个结果是抛出异常，查询条件使用等号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">selectOne</span><span class="params">(T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据实体属性和RowBounds进行分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByRowBounds</span><span class="params">(T model, RowBounds rowBounds)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 单表分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PageInfo <span class="title">selectPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, T model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by JoyLau on 4/6/2017.</span></span><br><span class="line"><span class="comment">     * 2587038142.liu@gmail.com</span></span><br><span class="line"><span class="comment">     * 根据Example条件进行分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PageInfo <span class="title">selectPageByExample</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, Object example)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>很简单</p>
<ul>
<li>你的Mapper继承BaseMapper</li>
<li>你的Service继承BaseService</li>
<li>你的ServiceImpl实现你的Service借口，再继承BaseServiceImpl</li>
<li>你的Model继承BaseModel</li>
</ul>
<h2 id="来试一下"><a href="#来试一下" class="headerlink" title="来试一下"></a>来试一下</h2><ul>
<li>在你的ServiceImpl里点一下方法试试? 是不是很棒???</li>
<li>在你的Mapper里再点一下方法试试?? 6666…</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>能想到的我都写了，BaseMapper和BaseServiceImpl基本上不需要扩展了，有不明白的可以联系我</li>
<li>欢迎指正，共同学习</li>
</ul>]]></content>
      
        <categories>
            
            <category> MyBatis篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis有多快??? --- 基准性能测试]]></title>
      <url>http://blog.joylau.cn/2017/04/01/Redis-Benchmark/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/Redis-Benchmark.jpg" alt="Redis-Benchmark"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>redis默认提供了性能测试的工具</li>
<li>在linux下文件是redis-benchmark</li>
<li>在windows下文件是redis-benchmark.exe</li>
</ul>
<h2 id="参数查看"><a href="#参数查看" class="headerlink" title="参数查看"></a>参数查看</h2><ul>
<li><code>redis-benchmark -h</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests]&gt; [-</span><br><span class="line">k &lt;boolean&gt;]</span><br><span class="line"></span><br><span class="line"> -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)</span><br><span class="line"> -p &lt;port&gt;          Server port (default 6379)</span><br><span class="line"> -s &lt;socket&gt;        Server socket (overrides host and port)</span><br><span class="line"> -a &lt;password&gt;      Password <span class="keyword">for</span> Redis Auth</span><br><span class="line"> -c &lt;clients&gt;       Number of parallel connections (default 50)</span><br><span class="line"> -n &lt;requests&gt;      Total number of requests (default 100000)</span><br><span class="line"> -d &lt;size&gt;          Data size of SET/GET value <span class="keyword">in</span> bytes (default 2)</span><br><span class="line"> -dbnum &lt;db&gt;        SELECT the specified db number (default 0)</span><br><span class="line"> -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)</span><br><span class="line"> -r &lt;keyspacelen&gt;   Use random keys <span class="keyword">for</span> SET/GET/INCR, random values <span class="keyword">for</span> SADD</span><br><span class="line">  Using this option the benchmark will expand the string __rand_int__</span><br><span class="line">  inside an argument with a 12 digits number <span class="keyword">in</span> the specified range</span><br><span class="line">  from 0 to keyspacelen-1. The substitution changes every time a <span class="built_in">command</span></span><br><span class="line">  is executed. Default tests use this to hit random keys <span class="keyword">in</span> the</span><br><span class="line">  specified range.</span><br><span class="line"> -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).</span><br><span class="line"> -q                 Quiet. Just show query/sec values</span><br><span class="line"> --csv              Output <span class="keyword">in</span> CSV format</span><br><span class="line"> -l                 Loop. Run the tests forever</span><br><span class="line"> -t &lt;tests&gt;         Only run the comma separated list of tests. The <span class="built_in">test</span></span><br><span class="line">                    names are the same as the ones produced as output.</span><br><span class="line"> -I                 Idle mode. Just open N idle connections and <span class="built_in">wait</span>.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line"> Run the benchmark with the default configuration against 127.0.0.1:6379:</span><br><span class="line">   $ redis-benchmark</span><br><span class="line"></span><br><span class="line"> Use 20 parallel clients, <span class="keyword">for</span> a total of 100k requests, against 192.168.1.1:</span><br><span class="line">   $ redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20</span><br><span class="line"></span><br><span class="line"> Fill 127.0.0.1:6379 with about 1 million keys only using the SET <span class="built_in">test</span>:</span><br><span class="line">   $ redis-benchmark -t <span class="built_in">set</span> -n 1000000 -r 100000000</span><br><span class="line"></span><br><span class="line"> Benchmark 127.0.0.1:6379 <span class="keyword">for</span> a few commands producing CSV output:</span><br><span class="line">   $ redis-benchmark -t ping,<span class="built_in">set</span>,get -n 100000 --csv</span><br><span class="line"></span><br><span class="line"> Benchmark a specific <span class="built_in">command</span> line:</span><br><span class="line">   $ redis-benchmark -r 10000 -n 10000 <span class="built_in">eval</span> <span class="string">'return redis.call("ping")'</span> 0</span><br><span class="line"></span><br><span class="line"> Fill a list with 10000 random elements:</span><br><span class="line">   $ redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__</span><br><span class="line"></span><br><span class="line"> On user specified <span class="built_in">command</span> lines __rand_int__ is replaced with a random <span class="built_in">integer</span></span><br><span class="line"> with a range of values selected by the -r option.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><ul>
<li>搞清了参数的含义，可以进行测试了</li>
<li>本次配置为Redis的默认配置，默认的配置项已经有足够好的性能表现了，不需要调优</li>
<li><code>redis-benchmark -h joylau.cn -p 6379 -a XXX -t get,set -n 1000 -c 400 -q</code><br>  我是模仿了我自己现在公司的业务需求，测试了我直接服务器上的Redis，向redis服务器发送1000个请求，每个请求附带400个并发客户端，以静默显示<br>  <img src="//image.joylau.cn/blog/redis-joylau-test-q.png" alt="redis-joylau-test-q"><br>  可以看到，set操作每秒处理17241次，get操作每秒处理17543次</li>
<li><code>redis-benchmark -h joylau.cn -p 6379 -a XXX -t get,set -n 1000 -c 400</code><br>  同上，以标准格式显示<br>  <img src="//image.joylau.cn/blog/redis-joylau-test.png" alt="redis-joylau-test"><br>  可以看到，set操作每秒处理17857次，get操作每秒处理18518次</li>
<li><strong><em>我自己也开了本地的服务器做测试，每秒操作次数可达100000次</em></strong></li>
</ul>
<h2 id="一些参数说明"><a href="#一些参数说明" class="headerlink" title="一些参数说明"></a>一些参数说明</h2><ul>
<li>-t : 可以选择你需要运行的测试用例</li>
<li>-r : 设置随机数来SET/GET/INCR</li>
<li>-P : 一次性执行多条命令，记得在多条命令需要处理时候使用 pipelining。</li>
</ul>
<h2 id="陷阱和错误的认识"><a href="#陷阱和错误的认识" class="headerlink" title="陷阱和错误的认识"></a>陷阱和错误的认识</h2><blockquote>
<blockquote>
<p>第一点是显而易见的：基准测试的黄金准则是使用相同的标准。 用相同的任务量测试不同版本的 Redis，或者用相同的参数测试测试不同版本 Redis。 如果把 Redis 和其他工具测试，那就需要小心功能细节差异。</p>
</blockquote>
</blockquote>
<ul>
<li>Redis 是一个服务器：所有的命令都包含网络或 IPC 消耗。这意味着和它和 SQLite， Berkeley DB， Tokyo/Kyoto Cabinet 等比较起来无意义， 因为大部分的消耗都在网络协议上面。</li>
<li>Redis 的大部分常用命令都有确认返回。有些数据存储系统则没有（比如 MongoDB 的写操作没有返回确认）。把 Redis 和其他单向调用命令存储系统比较意义不大。<br>简单的循环操作 Redis 其实不是对 Redis 进行基准测试，而是测试你的网络（或者 IPC）延迟。想要真正测试 Redis，需要使用多个连接（比如 redis-benchmark)， 或者使用 pipelining 来聚合多个命令，另外还可以采用多线程或多进程。</li>
<li>Redis 是一个内存数据库，同时提供一些可选的持久化功能。 如果你想和一个持久化服务器（MySQL, PostgreSQL 等等） 对比的话， 那你需要考虑启用 AOF 和适当的 fsync 策略。</li>
<li>Redis 是单线程服务。它并没有设计为多 CPU 进行优化。如果想要从多核获取好处， 那就考虑启用多个实例吧。将单实例 Redis 和多线程数据库对比是不公平的。</li>
</ul>
<h2 id="影响-Redis-性能的因素"><a href="#影响-Redis-性能的因素" class="headerlink" title="影响 Redis 性能的因素"></a>影响 Redis 性能的因素</h2><blockquote>
<blockquote>
<p>有几个因素直接决定 Redis 的性能。它们能够改变基准测试的结果， 所以我们必须注意到它们。一般情况下，Redis 默认参数已经可以提供足够的性能， 不需要调优。</p>
</blockquote>
</blockquote>
<ul>
<li>网络带宽和延迟通常是最大短板。建议在基准测试之前使用 ping 来检查服务端到客户端的延迟。根据带宽，可以计算出最大吞吐量。 比如将 4 KB 的字符串塞入 Redis，吞吐量是 100000 q/s，那么实际需要 3.2 Gbits/s 的带宽，所以需要 10 GBits/s 网络连接， 1 Gbits/s 是不够的。 在很多线上服务中，Redis 吞吐会先被网络带宽限制住，而不是 CPU。 为了达到高吞吐量突破 TCP/IP 限制，最后采用 10 Gbits/s 的网卡， 或者多个 1 Gbits/s 网卡。</li>
<li>CPU 是另外一个重要的影响因素，由于是单线程模型，Redis 更喜欢大缓存快速 CPU， 而不是多核。这种场景下面，比较推荐 Intel CPU。AMD CPU 可能只有 Intel CPU 的一半性能（通过对 Nehalem EP/Westmere EP/Sandy 平台的对比）。 当其他条件相当时候，CPU 就成了 redis-benchmark 的限制因素。</li>
<li>在小对象存取时候，内存速度和带宽看上去不是很重要，但是对大对象（&gt; 10 KB）， 它就变得重要起来。不过通常情况下面，倒不至于为了优化 Redis 而购买更高性能的内存模块。</li>
<li>Redis 在 VM 上会变慢。虚拟化对普通操作会有额外的消耗，Redis 对系统调用和网络终端不会有太多的 overhead。建议把 Redis 运行在物理机器上， 特别是当你很在意延迟时候。在最先进的虚拟化设备（VMWare）上面，redis-benchmark 的测试结果比物理机器上慢了一倍，很多 CPU 时间被消费在系统调用和中断上面。</li>
<li>如果服务器和客户端都运行在同一个机器上面，那么 TCP/IP loopback 和 unix domain sockets 都可以使用。对 Linux 来说，使用 unix socket 可以比 TCP/IP loopback 快 50%。 默认 redis-benchmark 是使用 TCP/IP loopback。 当大量使用 pipelining 时候，unix domain sockets 的优势就不那么明显了。</li>
<li>当大量使用 pipelining 时候，unix domain sockets 的优势就不那么明显了。</li>
<li>当使用网络连接时，并且以太网网数据包在 1500 bytes 以下时， 将多条命令包装成 pipelining 可以大大提高效率。事实上，处理 10 bytes，100 bytes， 1000 bytes 的请求时候，吞吐量是差不多的</li>
</ul>
<h2 id="我想说"><a href="#我想说" class="headerlink" title="我想说"></a>我想说</h2><ul>
<li>我分别测试我之前在腾讯云上的Redis服务器 <strong>(Windows Server 2008R2)</strong>  和现在在阿里云上的服务器  <strong>(Linux CentOS 7.2)</strong> 及 局域网下同事的Redis服务器，和本机Redis的服务器<br>速度最快的本机服务器，其次是同事的服务器，再次是阿里云上的服务器，最后是腾讯云上的服务器</li>
<li>测试差异之大除了在硬件上的差别外，最客观的因素在网络带宽上，我自己2个位于云上的服务器都是1M的带宽，如此测试，正如上面所说，远远不达不到数据传输所需要的带宽值</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>参考文章：<a href="http://www.redis.cn/topics/benchmarks.html" target="_blank" rel="noopener">http://www.redis.cn/topics/benchmarks.html</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Redis篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker菜鸟到熟悉 --- 常用命令备忘]]></title>
      <url>http://blog.joylau.cn/2017/03/22/Docker-Command/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">////////////////////////////////////////////////////////////////////</span><br><span class="line">//                          _ooOoo_                               //</span><br><span class="line">//                         o8888888o                              //</span><br><span class="line">//                         88<span class="string">" . "</span>88                              //</span><br><span class="line">//                         (| ^_^ |)                              //</span><br><span class="line">//                         O\  =  /O                              //</span><br><span class="line">//                      ____/`---<span class="string">'\____                           //</span></span><br><span class="line"><span class="string">//                    .'</span>  \\|     |//  `.                         //</span><br><span class="line">//                   /  \\|||  :  |||//  \                        //</span><br><span class="line">//                  /  _||||| -:- |||||-  \                       //</span><br><span class="line">//                  |   | \\\  -  /// |   |                       //</span><br><span class="line">//                  | \_|  <span class="string">''</span>\---/<span class="string">''</span>  |   |                       //</span><br><span class="line">//                  \  .-\__  `-`  ___/-. /                       //</span><br><span class="line">//                ___`. .<span class="string">'  /--.--\  `. . ___                     //</span></span><br><span class="line"><span class="string">//              ."" '</span>&lt;  `.___\_&lt;|&gt;_/___.<span class="string">'  &gt;'</span><span class="string">""</span>.                  //</span><br><span class="line">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span><br><span class="line">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span><br><span class="line">//      ========`-.____`-.___\_____/___.-`____.-<span class="string">'========         //</span></span><br><span class="line"><span class="string">//                           `=---='</span>                              //</span><br><span class="line">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span><br><span class="line">//                    佛祖保佑       永无BUG                        //</span><br><span class="line">////////////////////////////////////////////////////////////////////</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li>安装： <code>yum docker install</code></li>
<li>卸载： <code>yum remove docker</code></li>
<li>启动： <code>systemctl start docker</code></li>
<li>开机自启： <code>systemctl enable docker</code></li>
</ul>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">MAINTAINER joylau</span><br><span class="line">ADD joyalu-0.0.1-SNAPSHOT.jar joylau.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/joylau.jar"</span>]</span><br></pre></td></tr></table></figure>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul>
<li>编译镜像: <code>docker build –t joylau/docker .</code></li>
<li>查看镜像： <code>docker images</code></li>
<li>删除镜像： <code>docker rmi name/id</code></li>
</ul>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul>
<li>运行: <code>docker run –d --name joylau –p 8080:8080 joylau/docker</code></li>
<li>停止容器： <code>docker stop id/name</code></li>
<li>查看运行中的容器 ：  <code>docker ps</code></li>
<li>查看所有容器：  <code>docker ps -a</code></li>
<li>删除容器：  <code>docker rm id/name</code></li>
</ul>
<blockquote>
<blockquote>
<p>未完待更……..</p>
</blockquote>
</blockquote>]]></content>
      
        <categories>
            
            <category> Docker篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 批处理SpringBatch]]></title>
      <url>http://blog.joylau.cn/2017/03/21/SpringBoot-SpringBatch/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/SpringBatch.jpg" alt="SpringBatch"></p>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ul>
<li><code>JobRepository</code>: 用来注册<strong>Job</strong>的容器</li>
<li><code>JobLauncher</code>: 用来启动<strong>Job</strong>的接口</li>
<li><code>Job</code> : 我要实际执行的任务，包含一个或多个Step</li>
<li><code>Step</code> : Step-步骤包含<strong>ItemReader</strong>，<strong>ItemProcessor</strong>，<strong>ItemWrite</strong></li>
<li><code>ItemReader</code> : 用来读取数据的接口</li>
<li><code>ItemProcessor</code> : 用来处理数据的接口</li>
<li><code>ItemWrite</code> : 用来输出数据的接口</li>
</ul>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><blockquote>
<blockquote>
<p>SpringBoot 整合 SpringBatch 只需要引入依赖并注册成Spring 的 Bean 即可，若是想开启批处理的支持还需要在该配置类上添加 <strong>@EnableBatchProcessing</strong></p>
</blockquote>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-batch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBatch会自动加载hsqldb，我们去除即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来看代码 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> JobRepository <span class="title">jobRepository</span><span class="params">(DataSource dataSource, PlatformTransactionManager transactionManager)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		JobRepositoryFactoryBean jobRepositoryFactoryBean = <span class="keyword">new</span> JobRepositoryFactoryBean();</span><br><span class="line">		jobRepositoryFactoryBean.setDataSource(dataSource);</span><br><span class="line">		jobRepositoryFactoryBean.setTransactionManager(transactionManager);</span><br><span class="line">		jobRepositoryFactoryBean.setDatabaseType(<span class="string">"oracle"</span>);</span><br><span class="line">		<span class="keyword">return</span> jobRepositoryFactoryBean.getObject();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> SimpleJobLauncher <span class="title">jobLauncher</span><span class="params">(DataSource dataSource, PlatformTransactionManager transactionManager)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		SimpleJobLauncher jobLauncher = <span class="keyword">new</span> SimpleJobLauncher();</span><br><span class="line">		jobLauncher.setJobRepository(jobRepository(dataSource, transactionManager));</span><br><span class="line">		<span class="keyword">return</span> jobLauncher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Job <span class="title">importJob</span><span class="params">(JobBuilderFactory jobs, Step s1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> jobs.get(<span class="string">"importJob"</span>)</span><br><span class="line">				.incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">				.flow(s1) </span><br><span class="line">				.end()</span><br><span class="line">				.listener(csvJobListener())</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">(StepBuilderFactory stepBuilderFactory, ItemReader&lt;Person&gt; reader, ItemWriter&lt;Person&gt; writer,</span></span></span><br><span class="line"><span class="function"><span class="params">			ItemProcessor&lt;Person,Person&gt; processor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> stepBuilderFactory</span><br><span class="line">				.get(<span class="string">"step1"</span>)</span><br><span class="line">				.&lt;Person, Person&gt;chunk(<span class="number">65000</span>) <span class="comment">//1</span></span><br><span class="line">				.reader(reader)</span><br><span class="line">				.processor(processor)</span><br><span class="line">				.writer(writer)</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//接口分别实现</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> ItemReader&lt;Person&gt; <span class="title">reader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	        <span class="comment">//</span></span><br><span class="line">    	        <span class="keyword">return</span> reader;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="meta">@Bean</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> ItemProcessor&lt;Person, Person&gt; <span class="title">processor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="comment">//</span></span><br><span class="line">    		<span class="keyword">return</span> processor;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	</span><br><span class="line">    </span><br><span class="line">    	<span class="meta">@Bean</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> ItemWriter&lt;Person&gt; <span class="title">writer</span><span class="params">(DataSource dataSource)</span> </span>&#123;<span class="comment">//1</span></span><br><span class="line">    		<span class="comment">//</span></span><br><span class="line">    		<span class="keyword">return</span> writer;</span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>貌似就这么简单的完成了……</strong></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul>
<li>监听Job的执行情况，自定义类实现<code>JobExecutionListener</code></li>
<li>执行计划任务，在普通的计划任务方法中执行JobLauncher的run方法即可</li>
</ul>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBatch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为网站添加emoji表情支持]]></title>
      <url>http://blog.joylau.cn/2017/03/21/MySQL-Emoji/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/emoji.jpg" alt="emoji"></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>MySQL5.5.3+</li>
<li>mysql-connector-java5.1.13+</li>
</ul>
<h2 id="有异常"><a href="#有异常" class="headerlink" title="有异常"></a>有异常</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: Incorrect string value: <span class="string">'\xF0\x9F\x92\x94'</span> <span class="keyword">for</span> colum n <span class="string">'name'</span> at row 1 </span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073) </span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3593) </span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3525) </span><br><span class="line">at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1986) </span><br><span class="line">at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2140) </span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2620) </span><br><span class="line">at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1662) </span><br><span class="line">at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1581)</span><br></pre></td></tr></table></figure>
<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库字符集：<code>utf8mb4 -- UTF-8 Unicode</code></li>
<li>排序规则：<code>utf8mb4_general_ci</code></li>
</ul>
<h2 id="多样的浏览器兼容"><a href="#多样的浏览器兼容" class="headerlink" title="多样的浏览器兼容"></a>多样的浏览器兼容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=<span class="string">"http://cdn.staticfile.org/emoji/0.2.2/emoji.css"</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://cdn.staticfile.org/jquery/2.1.0/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"http://cdn.staticfile.org/emoji/0.2.2/emoji.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $text = $(<span class="string">'.emojstext'</span>);</span><br><span class="line"><span class="keyword">var</span> html = $text.html().trim().replace(<span class="regexp">/\n/g</span>, <span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">$text.html(jEmoji.unifiedToHTML(html));</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MySQL篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> emoji </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven --- 发布自己的构件到中央仓库]]></title>
      <url>http://blog.joylau.cn/2017/03/17/Maven-Release-Component/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/sonatype.png" alt="Sonatype"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>个人感觉第一次发布的步骤非常复杂，我在第一次操作的时候来来回回发布了7,8个版本，最后都是校验失败，导致构件不能关闭（因为我遇到了个大坑）</li>
<li>第一次发布成功之后后面的更新和添加新的构件都相对来说要容易一些（groupid不变的情况下）</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="账户注册"><a href="#账户注册" class="headerlink" title="账户注册"></a>账户注册</h3><ul>
<li>注册地址 ： <a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Signup!default.jspa</a>  ,这一步需要注意的是记住用户名和密码，后面配置文件会用到<br><img src="//image.joylau.cn/blog/sonatype-register.png" alt="注册"></li>
</ul>
<h3 id="创建并提交工单"><a href="#创建并提交工单" class="headerlink" title="创建并提交工单"></a>创建并提交工单</h3><p><img src="//image.joylau.cn/blog/sonatype_issue.PNG" alt="创建工单"></p>
<ul>
<li>Project和issue Type的填写如上图所示，不能填写错了</li>
<li>创建完成之后就等待网站工作人员的审核就可以了，不知道为什么，我等待的时间非常短，2分钟都不到，工作人员就回复我了，可能是我的运气比较好吧，但是上个星期买房摇号我却没摇到<img src="////image.joylau.cn/aodamiao/18.gif" alt="伤心欲绝"></li>
<li>当issue 的 state 变为 <code>RESOLVED</code>时就可继续操作了，同时下面的活动区会给你发消息<br><img src="//image.joylau.cn/blog/issue-activity.png" alt="Comment"></li>
</ul>
<h3 id="gpg生成密钥对"><a href="#gpg生成密钥对" class="headerlink" title="gpg生成密钥对"></a>gpg生成密钥对</h3><ul>
<li>下载安装：<a href="https://www.gpg4win.org/download.html" target="_blank" rel="noopener">https://www.gpg4win.org/download.html</a><br><strong><em>安装时注意的是，只安装主体组件和加密解密窗口的组件就可以了，其他的不需要~~~~</em></strong></li>
<li>查看是否安装成功:<code>gpg --version</code><br><img src="//image.joylau.cn/blog/gpg-version.png" alt="version"></li>
<li>生成密钥对:<code>gpg --gen-key</code><br><img src="//image.joylau.cn/blog/gpg-2.png" alt="gpg --gen-key"><br><img src="//image.joylau.cn/blog/gpg-2.png" alt="gpg --gen-key"></li>
<li>之后往下，会让你输入用户名和邮箱，还有一个Passphase，相当于密钥库密码，不要忘记。</li>
<li>查看公钥:<code>gpg --list-keys</code></li>
<li>将公钥发布到 PGP 密钥服务器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys C990D076</span><br><span class="line">//可能由于网络问题，有点慢，多重试几次</span><br><span class="line"></span><br><span class="line">//查看发布是否成功</span><br><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys C990D076</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置setting-xml文件和pom-xml文件"><a href="#配置setting-xml文件和pom-xml文件" class="headerlink" title="配置setting.xml文件和pom.xml文件"></a>配置setting.xml文件和pom.xml文件</h3><ul>
<li>setting.xml文件  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      //记住id，需要和pom文件里的id一致</span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>pom.xml文件  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ The MIT License (MIT)</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Copyright (c) 2017 2587038142@qq.com</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment">  ~ of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="comment">  ~ in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment">  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment">  ~ copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment">  ~ furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ The above copyright notice and this permission notice shall be included in</span></span><br><span class="line"><span class="comment">  ~ all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment">  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment">  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment">  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment">  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment">  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span></span><br><span class="line"><span class="comment">  ~ THE SOFTWARE.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-echarts<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>joylau-echarts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configure the most attribute for ECharts3.0+ by Gson<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://code.joylau.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>JoyLau<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>2587038142@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://joylau.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:git@github.com:JoyLau/joylau-echarts.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:git@github.com:JoyLau/joylau-echarts.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>git@github.com:JoyLau/joylau-echarts<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--Compiler--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- GPG --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="上传构件到-OSS-中"><a href="#上传构件到-OSS-中" class="headerlink" title="上传构件到 OSS 中"></a>上传构件到 OSS 中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -P release</span><br><span class="line"><span class="tag">&lt;<span class="name">--!</span> <span class="attr">jdk1.8</span>后再生成<span class="attr">javadoc</span>时语法较为严格，这时去除<span class="attr">javadoc</span>即可 !<span class="attr">--</span>&gt;</span></span><br><span class="line">mvn clean deploy -P release -Dmaven.javadoc.skip=true</span><br></pre></td></tr></table></figure>
<p>在上传之前会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。<br>随后会看到大量的 upload 信息，因为在国内网络的缘故，时间有点久，耐心等待吧。</p>
<h3 id="在-OSS-中发布构件"><a href="#在-OSS-中发布构件" class="headerlink" title="在 OSS 中发布构件"></a>在 OSS 中发布构件</h3><ul>
<li>在 OSS 中，使用自己的 Sonatype 账号登录后，可在 Staging Repositories 中查看刚才已上传的构件，这些构件目前是放在 Staging 仓库中，可进行模糊查询，快速定位到自己的构件。</li>
<li>此时，该构件的状态为 Open，需要勾选它，然后点击 Close 按钮。系统会自动验证该构件是否满足指定要求，当验证完毕后，状态会变为 Closed。<br><img src="//static.dexcoder.com/images/201501/VvtDdbqdERgRv1qn.png" alt="1"></li>
<li>最后，点击 Release 按钮来发布该构件，这一步没有截图，将就看吧知道就行：<br><img src="//static.dexcoder.com/images/201501/2gPUnClPeYP1Vjbb.png" alt="2"></li>
</ul>
<h3 id="等待构件审批通过"><a href="#等待构件审批通过" class="headerlink" title="等待构件审批通过"></a>等待构件审批通过</h3><p>这个，又只能等待了，当然他们晚上上班，还是第二天看。当审批通过后，将会收到邮件通知。</p>
<h3 id="从中央仓库中搜索构件"><a href="#从中央仓库中搜索构件" class="headerlink" title="从中央仓库中搜索构件"></a>从中央仓库中搜索构件</h3><p>这时，就可以在maven的中央仓库中搜索到自己发布的构件了，以后可以直接在pom.xml中使用了！</p>
<p>中央仓库搜索网站：<a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></p>
<p>第一次成功发布之后，以后就不用这么麻烦了，可以直接使用Group Id发布任何的构件，当然前提是Group Id没有变。</p>
<p>以后的发布流程：</p>
<p>a）构件完成后直接使用maven在命令行上传构建；</p>
<p>b）在<a href="https://oss.sonatype.org/" target="_blank" rel="noopener">https://oss.sonatype.org/</a> close并release构件；</p>
<p>c)等待同步好（大约2小时多）之后，就可以使用了</p>
<h2 id="遇坑记录"><a href="#遇坑记录" class="headerlink" title="遇坑记录"></a>遇坑记录</h2><ul>
<li>安装GPG时候，没有安装弹框组件，导致gpg密码框弹不出来</li>
<li>一开始所有的命令行都在git下操作，每次部署的时候都是提示没有私钥错误，后来发现git生成的gpg密钥对在user更目录下，切换到CMD操作，是生成在AppData下。经查看有私钥，问题解决</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li>前一部分为自己实践所写</li>
<li>后面上传构件，发布版本参考：<a href="http://blog.csdn.net/hj7jay/article/details/51130398" target="_blank" rel="noopener">http://blog.csdn.net/hj7jay/article/details/51130398</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Maven篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
            <tag> GPG </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员，那些年吹过的牛逼，最后都自己加班了]]></title>
      <url>http://blog.joylau.cn/2017/03/14/Programmer-Boast/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>有一部分程序员中的老司机，他们善于找各种借口，少干活，少背锅，多拿钱。但是，更多的程序员坦诚、直白、意气用事。<br>那些年吹过的牛逼都实现了吗？还是随风而去？</p>
<p><strong>这个功能简单，一天就能搞完</strong><br><img src="//img.mp.itc.cn/upload/20170313/f5e38c95009545c19e2b90c4b7b5f847.jpeg" alt="Images"><br>程序员拿到一个新功能，心里暗暗发笑，这剧情我见过啊。于是脱口而出，这功能简单，一天就能做完，明天上线肯定没问题。<br>结果，眼看着到自己设定的截止日期了，还有一部分代码没有写完，怎么办？<br>很简单啊，又不是生死状，又不要命。解决办法很简单，加班～～～<br>程序员，那些年吹过的牛逼，最后都自己加班了。</p>
<p><strong>这段代码肯定没bug，我都测试过了</strong><br><img src="//img.mp.itc.cn/upload/20170313/12a3cbfcb0e84455b6d88fd703138a09_th.jpeg" alt="Images"><br>功能开发完了，拿去测试吧，拿去玩耍吧，上线吧，部署吧，发给客户吧，肯定没问题的。<br>结果，很多时候还没发布。要么测试发现bug，要么产品发现bug，要么老板发现bug。<br>你的第一反应就是：是特么你们不会用老子开发的功能吧？你乐呵呵的看着bug复现，怎么办呢？<br>很简单啊，紧急修复bug，重新发布。时间来不及了？加班啊～～～<br>程序员，那些年吹过的牛逼，最后都自己加班了。</p>
<p><strong>我用的是最现在最流行的技术，某某大公司也用这个</strong><br><img src="//img.mp.itc.cn/upload/20170313/45cadc5ce7b647efacbf3bfb97419c19_th.jpeg" alt="Images"><br>在技术讨论会上，你侃侃而谈，我精心设计的前后端分离的框架，我使用了现在最流行的界面库，我们用的技术某某独角兽公司都在使用，肯定是最好的。<br>结果呢，使用的技术太新。Github上很少有相关的开源项目，Stack Overflow上很少有这方面的问答。你被一个问题搞的昏天暗地，只能默默的看官方文档，而且是英文的（这是好事儿）。<br>啊？项目着急上线怎么办呢？加班啊～～～<br>程序员，那些年吹过的牛逼，最后都自己加班了。</p>
<p><strong>重构代码，很快就能完成</strong><br><img src="//img.mp.itc.cn/upload/20170313/6f7b00b3323943c99cb9dffef860c60b.gif" alt="Images"></p>
<ul>
<li>何为Code refactoring<blockquote>
<p>Code refactoring is the process of restructuring existing computer code—changing the factoring—without changing its external behavior.</p>
</blockquote>
</li>
</ul>
<p>之前为了快速迭代，忽略了代码的结构和质量。正好最近这两天没有什么新功能开发，我要重构一下现有的代码，绝对没问题。<br>结果呢，两天的空窗期没搞定。明天就要开发新的功能了，怎么办呢？加班啊～～～<br>程序员，那些年吹过的牛逼，最后都自己加班了。</p>
<p><strong>向外行介绍程序员工作的复杂程度</strong><br>在工作中经常能听到这样的话「不就加个按钮么？怎么要做两天时天？」。那么，作为程序员如何解释自己的工作复杂度呢？<br>如果你的老板是技术出身，那你很庆幸，他能理解你实现一个小小功能，修改一个小小功能所付出的辛苦劳动。<br>如果你的老板不懂技术，也许你就要无穷无尽的加班了。给你的忠告就是：做正确的事儿，等着被开除。这是一位谷歌工程师说的话。<br>如果你的产品经理懂技术，那么你既是幸运的也是不幸的。<br>幸运的是，他可以理解程序员工作的复杂度。但是“不幸”的是，你再也不能为了偷懒找借口。<br>当产品经理提出一个方案时，你再也不敢坚定地说“技术不可行”。因为你害怕产品经理自己写好了代码给你，那是多么尴尬的境地。</p>
<ul>
<li>下面是 Channing Walton 的用泡茶的例子来解释，非常形象。<br>　　- 请他们描述泡出一杯茶需要哪些步骤，他们会这么说：<br>　　- 烧水<br>　　- 把茶叶放到茶壶里<br>　　- 水烧开后倒入茶壶<br>　　- 等待5分钟<br>　　- 把茶倒进杯子<br>　　- 加牛奶<br>　　- 喝<br>　　- 现在，有趣的开始了。你要开始问这样的问题:<br>　　- 烧水?<br>　　- 水哪来的？<br>　　- 热水壶在哪里？<br>　　- 你怎么把水倒进热水壶？<br>　　- 你怎么知道热水壶壶里要倒多少水？<br>　　- 如果没有水/热水壶/电怎么办呢?<br>　　- 假如加水传感器失效怎么办?<br>　　- 假如煮水传感器失效怎么办？<br>　　- 茶叶放到茶壶里?<br>　　- 茶壶在哪里，如果没有茶壶怎么办？烧水之前我们应该考虑到这些问题吗?<br>　　- 茶叶在哪里，要用哪一种茶叶？我们是否应该先问清楚，或许如果没有对应的茶叶，我们甚至都不应该开始泡茶?<br>　　- 关于加水和传感器也可以有类似的问题要问<br>　　- 倒开水?<br>　　- 你确定水已经开了么？你怎么能确保“倒水”的机器从热水壶那收到“烧水完成”的信号呢?<br>　　- 你如何确保倒水的机器知道热水壶在哪里?<br>　　- 如果热水壶在倒水的过程翻了怎么办呢?</li>
</ul>
<p>程序员代码提交中的骂声<br>正如你工作中看到的，写代码会让你骂骂咧咧，经常爆粗口。<br>另外有数据统计，写 C++ 程序，会比写 PHP 或 Python 程序所遭到的骂声更多。<br>Andrew Vos在找一个周末项目，于是决定在 GitHub 上抓取100百万条提交信息（commit），并扫描其中的脏话。<br><img src="//img.mp.itc.cn/upload/20170313/be133d300641446aa7c0f7ec1485c7f6_th.jpeg" alt="Images">
　　</p>
<ul>
<li>而且程序员最喜欢的一句是：<br>　　“<strong>去TMD，咱们就这样发布。</strong>”</li>
</ul>]]></content>
      
        <categories>
            
            <category> 程序员篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS数组去重最简单方法]]></title>
      <url>http://blog.joylau.cn/2017/03/14/JavaScript-The-Easiest-Way-to-Repeat-of-Array/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">alert(arr)</span><br><span class="line"><span class="comment">//output: 1, 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 环境集成]]></title>
      <url>http://blog.joylau.cn/2017/03/14/SpringBoot-Integrate/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/SpringBoot-build-better-enterprise.png" alt="build-better-enterprise"></p>
<h2 id="SpringBoot文章推荐"><a href="#SpringBoot文章推荐" class="headerlink" title="SpringBoot文章推荐"></a>SpringBoot文章推荐</h2><ul>
<li><a href="/2017/03/13/SpringBoot-Basic/">重剑无锋,大巧不工 SpringBoot — 基础篇</a></li>
<li><a href="/2017/03/14/SpringBoot-Research/">重剑无锋,大巧不工 SpringBoot — 探索篇</a></li>
<li><a href="/2017/03/14/SpringBoot-Integrate/">重剑无锋,大巧不工 SpringBoot — 环境集成</a></li>
<li><a href="/2017/03/21/SpringBoot-SpringBatch/">重剑无锋,大巧不工 SpringBoot — 批处理SpringBatch</a></li>
<li><a href="/2017/06/12/SpringBoot-RequestBody/">重剑无锋,大巧不工 SpringBoot — @RequestBody JSON参数处理</a></li>
<li><a href="/2017/06/12/SpringBoot-Question-Tips/">重剑无锋,大巧不工 SpringBoot — 项目问题汇总及解决</a></li>
<li><a href="/2017/06/13/SpringBoot-ConfigurationProperties/">重剑无锋,大巧不工 SpringBoot — 属性注入</a></li>
<li><a href="/2017/06/16/SpringBoot-RabbitMQ/">重剑无锋,大巧不工 SpringBoot — 整合RabbitMQ</a></li>
<li><a href="/2017/06/18/SpringBoot-RESTfulAPI/">重剑无锋,大巧不工 SpringBoot — RESTful API</a></li>
<li><a href="/2017/07/18/SpringBoot-MongoDB/">重剑无锋,大巧不工 SpringBoot — 整合使用MongoDB</a></li>
<li><a href="/2017/09/19/SpringBoot-CaffeineCache/">重剑无锋,大巧不工 SpringBoot — 推荐使用CaffeineCache</a></li>
</ul>
<h2 id="SpringBoot项目实战"><a href="#SpringBoot项目实战" class="headerlink" title="SpringBoot项目实战"></a>SpringBoot项目实战</h2><ul>
<li><a href="/2017/07/24/SpringBoot-JoyMedia/">重剑无锋,大巧不工 SpringBoot — 实战项目 JoyMedia （ 分析篇 ）</a></li>
<li><a href="/2017/07/29/SpringBoot-JoyMedia-Node/">重剑无锋,大巧不工 SpringBoot — 实战项目 JoyMedia （ Node篇 ）</a></li>
<li><a href="/2017/08/06/SpringBoot-JoyMedia-Search/">重剑无锋,大巧不工 SpringBoot — 实战项目 JoyMedia （ 搜索篇 ）</a></li>
<li><a href="/2017/08/20/SpringBoot-JoyMedia-MV/">重剑无锋,大巧不工 SpringBoot — 实战项目 JoyMedia （ MV 篇 ）</a></li>
<li><a href="/2017/08/29/SpringBoot-JoyMedia-NoReferer/">重剑无锋,大巧不工 SpringBoot — 实战项目 JoyMedia （ NoReferer篇 ）</a></li>
</ul>
<blockquote>
<p>不啰嗦，直接上代码</p>
</blockquote>
<h2 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h2><h3 id="DruidConfig"><a href="#DruidConfig" class="headerlink" title="DruidConfig:"></a>DruidConfig:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/9/14.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.druid</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    username = ConfigTools.decrypt(username);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.setUsername(username);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String jdbcUrl)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jdbcUrl = ConfigTools.decrypt(jdbcUrl);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.setUrl(jdbcUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DruidStatViewConfig"><a href="#DruidStatViewConfig" class="headerlink" title="DruidStatViewConfig:"></a>DruidStatViewConfig:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/8/8.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.druid</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> * 这样的方式不需要添加注解：<span class="doctag">@ServletComponentScan</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatViewConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.druid.loginUsername&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String loginUsername;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.druid.loginPassword&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String loginPassword;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个StatViewServlet</span></span><br><span class="line"><span class="comment">     * 使用Druid的内置监控页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">DruidStatViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(),</span><br><span class="line">                <span class="string">"/druid/*"</span>);</span><br><span class="line">        <span class="comment">//添加初始化参数：initParams</span></span><br><span class="line">        <span class="comment">//白名单</span></span><br><span class="line">        <span class="comment">//ip配置规则</span></span><br><span class="line">        <span class="comment">//配置的格式</span></span><br><span class="line">        <span class="comment">//&lt;IP&gt; 或者 &lt;IP&gt;/&lt;SUB_NET_MASK_size&gt; 多个ip地址用逗号隔开</span></span><br><span class="line">        <span class="comment">//其中</span></span><br><span class="line">        <span class="comment">//128.242.127.1/24</span></span><br><span class="line">        <span class="comment">//24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配。</span></span><br><span class="line">        <span class="comment">//由于匹配规则不支持IPV6，配置了allow或者deny之后，会导致IPV6无法访问。</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。</span></span><br><span class="line">        <span class="comment">//如果allow没有配置或者为空，则允许所有访问</span></span><br><span class="line">        <span class="comment">//IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"deny"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录查看信息的账号密码.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            servletRegistrationBean.addInitParameter(<span class="string">"loginUsername"</span>, ConfigTools.decrypt(loginUsername));</span><br><span class="line">            servletRegistrationBean.addInitParameter(<span class="string">"loginPassword"</span>, ConfigTools.decrypt(loginPassword));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否能够重置数据.</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个：filterRegistrationBean</span></span><br><span class="line"><span class="comment">     * 内置监控中的Web关联监控的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加过滤规则.</span></span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排除一些不必要的url</span></span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        <span class="comment">//缺省sessionStatMaxCount是1000个,这里设置了3000个</span></span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"sessionStatMaxCount"</span>, <span class="string">"3000"</span>);</span><br><span class="line">        <span class="comment">//可以配置principalCookieName，使得druid知道指定的sessionName是谁</span></span><br><span class="line"><span class="comment">//        filterRegistrationBean.addInitParameter("principalSessionName", "sessionId");</span></span><br><span class="line">        <span class="comment">//druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表。</span></span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"profileEnable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个:druidStatInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public DruidStatInterceptor druidStatInterceptor()&#123;</span></span><br><span class="line"><span class="comment">        return new DruidStatInterceptor();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个：beanNameAutoProxyCreator</span></span><br><span class="line"><span class="comment">     * 内置监控中的spring关联监控的配置</span></span><br><span class="line"><span class="comment">     * 该方法使用的是按照BeanId来拦截配置，还有2种方法，分别是</span></span><br><span class="line"><span class="comment">     * 按类型拦截配置</span></span><br><span class="line"><span class="comment">     * 方法名正则匹配拦截配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public BeanNameAutoProxyCreator beanNameAutoProxyCreator()&#123;</span></span><br><span class="line"><span class="comment">        BeanNameAutoProxyCreator beanNameAutoProxyCreator = new BeanNameAutoProxyCreator();</span></span><br><span class="line"><span class="comment">        beanNameAutoProxyCreator.setProxyTargetClass(true);</span></span><br><span class="line"><span class="comment">        beanNameAutoProxyCreator.setBeanNames("*Controller");</span></span><br><span class="line"><span class="comment">        beanNameAutoProxyCreator.setInterceptorNames("druidStatInterceptor");</span></span><br><span class="line"><span class="comment">        return beanNameAutoProxyCreator;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="application-dev"><a href="#application-dev" class="headerlink" title="application-dev:"></a>application-dev:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#druid配置</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=G11Jor+OrLz9MFztdkOfqRnrJKVrFCDdBbYJFmB0qGjUARxPr2tiyRzUn4xbnk/XqPgM8PMjdIJ/pO8UF4aeVg==</span><br><span class="line">spring.datasource.username=bNVOqb7WKLX5Bjnw+LMv92taj25KOxDimXxILPQjw42wgv+1lHzOH8kr97xDwWdhpY67QuYCS7sWN4W46YbkFA==</span><br><span class="line">spring.datasource.password=l65GeQaXVXxx2ogcQeZLAFM7VcPwgzc9202vxql4hjCbjM8dVm/sD4osdvaBdVkC+BiYdnYL2EzpaCysXAZ5Gw==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 下面为连接池的补充设置，应用到上面所有数据源中</span><br><span class="line"># 初始化大小，最小，最大</span><br><span class="line">spring.datasource.initialSize=10</span><br><span class="line">spring.datasource.minIdle=25</span><br><span class="line">spring.datasource.maxActive=250</span><br><span class="line"></span><br><span class="line"># 配置获取连接等待超时的时间</span><br><span class="line">spring.datasource.maxWait=60000</span><br><span class="line"></span><br><span class="line"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis=1200000</span><br><span class="line"></span><br><span class="line"># 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis=1800000</span><br><span class="line"></span><br><span class="line">spring.datasource.validationQuery=SELECT &apos;x&apos;</span><br><span class="line"></span><br><span class="line">#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br><span class="line">spring.datasource.testWhileIdle=true</span><br><span class="line"></span><br><span class="line">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br><span class="line">spring.datasource.testOnBorrow=false</span><br><span class="line"></span><br><span class="line">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br><span class="line">spring.datasource.testOnReturn=false</span><br><span class="line"></span><br><span class="line"># 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。</span><br><span class="line">spring.datasource.poolPreparedStatements=true</span><br><span class="line"></span><br><span class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙,&apos;stat&apos;用于监控，‘log4j’用于日志,&apos;config&apos;是指ConfigFilter</span><br><span class="line">spring.datasource.filters=wall,stat,config</span><br><span class="line"></span><br><span class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录,超过3秒就是慢sql</span><br><span class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=3000;config.decrypt=true</span><br><span class="line"></span><br><span class="line"># 合并多个DruidDataSource的监控数据,缺省多个DruidDataSource的监控数据是各自独立的，在Druid-0.2.17版本之后，支持配置公用监控数据</span><br><span class="line">spring.datasource.useGlobalDataSourceStat=true</span><br><span class="line"></span><br><span class="line">#druid登陆用户名</span><br><span class="line">spring.druid.loginUsername=lCzd9geWAuAuJtLhpaG/J+d28H8KiMFAWopxXkYpMNdUai6Xe/LsPqMQeg5MIrmvtMa+hzycdRhWs29ZUPU1IQ==</span><br><span class="line"></span><br><span class="line">#druid登录密码</span><br><span class="line">spring.druid.loginPassword=hf96/2MU+Q12fdb9oZN9ghub1OHmUBa8YuW7NJf8Pll/sawcaRVscHTpr4t5SB39+KbJn31Lqy76uEDvj+sgMw==</span><br></pre></td></tr></table></figure>
<h2 id="集成Mybatis"><a href="#集成Mybatis" class="headerlink" title="集成Mybatis"></a>集成Mybatis</h2><h3 id="MyBatisConfig"><a href="#MyBatisConfig" class="headerlink" title="MyBatisConfig"></a>MyBatisConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/8/8.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.mybatis</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> * DataSource 交由Druid自动根据配置创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> <span class="keyword">implements</span> <span class="title">TransactionManagementConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setTypeAliasesPackage(<span class="string">"cn.lfdevelopment.www.app.**.pojo"</span>);</span><br><span class="line">        <span class="comment">//支持属性使用驼峰的命名,mapper配置不需要写字段与属性的配置，会自动映射。</span></span><br><span class="line">        org.apache.ibatis.session.Configuration configuration = <span class="keyword">new</span> org.apache.ibatis.session.Configuration();</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        bean.setConfiguration(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line">        PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">/* 3.3.0版本可用 - 分页参数合理化，默认false禁用</span></span><br><span class="line"><span class="comment">         启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页</span></span><br><span class="line"><span class="comment">         禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据</span></span><br><span class="line"><span class="comment">         在EXTjs里面配置与否无所谓，因为在前台传过来的分页数据已经进行合理化了 */</span></span><br><span class="line">        properties.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"supportMethodsArguments"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"returnPageInfo"</span>, <span class="string">"check"</span>);</span><br><span class="line">       <span class="comment">/* 3.5.0版本可用 - 为了支持startPage(Object params)方法</span></span><br><span class="line"><span class="comment">         增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值</span></span><br><span class="line"><span class="comment">         可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值</span></span><br><span class="line"><span class="comment">         不理解该含义的前提下，不要随便复制该配置 --&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        properties.setProperty("params", "count=countSql");</span></span><br><span class="line">        pageHelper.setProperties(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加插件</span></span><br><span class="line">        bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pageHelper&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加XML目录</span></span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath*:mapperxml/**/*Mapper.xml"</span>));</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MyBatisMapperScannerConfig"><a href="#MyBatisMapperScannerConfig" class="headerlink" title="MyBatisMapperScannerConfig"></a>MyBatisMapperScannerConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis扫描接口，使用的tk.mybatis.spring.mapper.MapperScannerConfigurer，如果你不使用通用Mapper，可以改为org.xxx...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//由于MapperScannerConfigurer执行的比较早</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"cn.lfdevelopment.www.app.**.mapper"</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"mappers"</span>, <span class="string">"cn.lfdevelopment.www.sys.base.BaseMapper"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"notEmpty"</span>, <span class="string">"false"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"IDENTITY"</span>, <span class="string">"MYSQL"</span>);</span><br><span class="line">        mapperScannerConfigurer.setProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集成Redis"><a href="#集成Redis" class="headerlink" title="集成Redis"></a>集成Redis</h2><h3 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/9/5.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.redis</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (target, method, params) -&gt; &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(target.getClass().getName());</span><br><span class="line">            sb.append(method.getName());</span><br><span class="line">            <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StringRedisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redisTemplateForShiro</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;<span class="keyword">byte</span>[], Object&gt; redisTemplateForShiro(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="keyword">byte</span>[], Object&gt; redisTemplateForShiro = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplateForShiro.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplateForShiro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集成Shiro"><a href="#集成Shiro" class="headerlink" title="集成Shiro"></a>集成Shiro</h2><h3 id="ShiroConfiguration"><a href="#ShiroConfiguration" class="headerlink" title="ShiroConfiguration"></a>ShiroConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/9/13.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.shiro</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FilterRegistrationBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistration.setFilter(<span class="keyword">new</span> DelegatingFilterProxy(<span class="string">"shiroFilter"</span>));</span><br><span class="line">        filterRegistration.addInitParameter(<span class="string">"targetFilterLifecycle"</span>,<span class="string">"true"</span>);</span><br><span class="line">        filterRegistration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        filterRegistration.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line"><span class="comment">//        filterRegistration.setAsyncSupported(true);</span></span><br><span class="line">        filterRegistration.setDispatcherTypes(DispatcherType.REQUEST);</span><br><span class="line">        <span class="keyword">return</span> filterRegistration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/main"</span>);</span><br><span class="line">        <span class="comment">//验证不具备权限后的转向页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/main"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filters.put(<span class="string">"authc"</span>,shiroFormAuthenticationFilter());</span><br><span class="line">        filters.put(<span class="string">"session"</span>,sessionFilter());</span><br><span class="line">        filters.put(<span class="string">"rolesOr"</span>,rolesAuthorizationFilter());</span><br><span class="line">        bean.setFilters(filters);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; chains = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        chains.put(<span class="string">"/favicon.ico"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/index"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/blog"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/blog/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/weixin"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/weixin/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/static/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/getGifCode"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/404"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/druid/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        chains.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"></span><br><span class="line">        chains.put(<span class="string">"/login"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        chains.put(<span class="string">"/main"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        chains.put(<span class="string">"/**"</span>, <span class="string">"session,user"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(chains);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.apache.shiro.mgt.SecurityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(userRealm());</span><br><span class="line">        manager.setCacheManager(redisCacheManager());</span><br><span class="line">        manager.setSessionManager(defaultWebSessionManager());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> DefaultWebSessionManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"sessionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">defaultWebSessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setCacheManager(redisCacheManager());</span><br><span class="line">        sessionManager.setGlobalSessionTimeout(<span class="number">1800000</span>);</span><br><span class="line">        sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">        sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">        sessionManager.setSessionValidationInterval(<span class="number">600000</span>);</span><br><span class="line">        sessionManager.setSessionIdUrlRewritingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn</span>(value=&#123;<span class="string">"lifecycleBeanPostProcessor"</span>, <span class="string">"shrioRedisCacheManager"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizingRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizingRealm userRealm = <span class="keyword">new</span> AuthorizingRealm();</span><br><span class="line">        userRealm.setCacheManager(redisCacheManager());</span><br><span class="line">        userRealm.setCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        userRealm.setAuthenticationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        userRealm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"shrioRedisCacheManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(value=<span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShrioRedisCacheManager <span class="title">redisCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ShrioRedisCacheManager cacheManager = <span class="keyword">new</span> ShrioRedisCacheManager(redisTemplate);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"authcFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormAuthenticationFilter <span class="title">shiroFormAuthenticationFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthcFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionFilter <span class="title">sessionFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"rolesOrFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RolesAuthorizationFilter <span class="title">rolesAuthorizationFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RolesAuthorizationFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Subject subject = getSubject(request, response);</span><br><span class="line">                String[] rolesArray = (String[]) mappedValue;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((rolesArray == <span class="keyword">null</span>) || (rolesArray.length == <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (String aRolesArray : rolesArray) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (subject.hasRole(aRolesArray)) &#123;</span><br><span class="line">                        <span class="comment">//用户只要拥有任何一个角色则验证通过</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ShiroRedisCache"><a href="#ShiroRedisCache" class="headerlink" title="ShiroRedisCache"></a>ShiroRedisCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by LiuFa on 2016/9/13.</span></span><br><span class="line"><span class="comment"> * cn.lfdevelopment.www.sys.shiro</span></span><br><span class="line"><span class="comment"> * DevelopmentApp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShrioRedisCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> org.slf4j.Logger log = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">byte</span>[], V&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"shiro_redis:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShrioRedisCache</span><span class="params">(RedisTemplate&lt;<span class="keyword">byte</span>[], V&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShrioRedisCache</span><span class="params">(RedisTemplate&lt;<span class="keyword">byte</span>[], V&gt; redisTemplate, String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(redisTemplate);</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Key: &#123;&#125;"</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bkey = getByteKey(key);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(bkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Key: &#123;&#125;, value: &#123;&#125;"</span>, key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bkey = getByteKey(key);</span><br><span class="line">        redisTemplate.opsForValue().set(bkey, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Key: &#123;&#125;"</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bkey = getByteKey(key);</span><br><span class="line">        ValueOperations&lt;<span class="keyword">byte</span>[], V&gt; vo = redisTemplate.opsForValue();</span><br><span class="line">        V value = vo.get(bkey);</span><br><span class="line">        redisTemplate.delete(bkey);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        redisTemplate.getConnectionFactory().getConnection().flushDb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long len = redisTemplate.getConnectionFactory().getConnection().dbSize();</span><br><span class="line">        <span class="keyword">return</span> len.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bkey = (prefix+<span class="string">"*"</span>).getBytes();</span><br><span class="line">        Set&lt;<span class="keyword">byte</span>[]&gt; set = redisTemplate.keys(bkey);</span><br><span class="line">        Set&lt;K&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(set)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span>[] key: set) &#123;</span><br><span class="line">            result.add((K)key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; keys = keys();</span><br><span class="line">        List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(keys.size());</span><br><span class="line">        <span class="keyword">for</span>(K k: keys) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bkey = getByteKey(k);</span><br><span class="line">            values.add(redisTemplate.opsForValue().get(bkey));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getByteKey(K key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String preKey = <span class="keyword">this</span>.prefix + key;</span><br><span class="line">            <span class="keyword">return</span> preKey.getBytes();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> SerializeUtils.serialize(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>本文暂未完结，后续将持续集成更多第三方框架，或接着更新，或另起新篇</li>
<li>详细代码内容可在GitHub上follow</li>
</ul>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 探索篇]]></title>
      <url>http://blog.joylau.cn/2017/03/14/SpringBoot-Research/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/SpringBootStart-Main.png-image1" alt="SpringBootStart-Main"></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我们开发任何一个Spring Boot项目，都会用到如下的启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(JoylauApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。</p>
<h2 id="SpringBootApplication背后的秘密"><a href="#SpringBootApplication背后的秘密" class="headerlink" title="SpringBootApplication背后的秘密"></a>SpringBootApplication背后的秘密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class,</span><br><span class="line">        attribute = <span class="string">"exclude"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class,</span><br><span class="line">        attribute = <span class="string">"excludeName"</span></span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然定义使用了多个Annotation进行了原信息标注，但实际上重要的只有三个Annotation：</p>
<ul>
<li><code>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）</code></li>
<li><code>@EnableAutoConfiguration</code></li>
<li><code>@ComponentScan</code><br>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>每次写这3个比较累，所以写一个@SpringBootApplication方便点。接下来分别介绍这3个Annotation。</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>这里的@Configuration对我们来说不陌生，它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。<br>举几个简单例子回顾下，XML跟config配置方式的区别：</p>
<ul>
<li>表达形式层面<br>基于XML配置的方式是这样：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--bean定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而基于JavaConfig的配置方式是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">  <span class="comment">//bean定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类。</p>
<ul>
<li>注册bean定义层面<br>基于XML的配置形式是这样：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockService"</span> <span class="attr">class</span>=<span class="string">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而基于JavaConfig的配置形式是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p>
<ul>
<li>表达依赖注入关系层面<br>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockService"</span> <span class="attr">class</span>=<span class="string">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">propery</span> <span class="attr">name</span> =<span class="string">"dependencyService"</span> <span class="attr">ref</span>=<span class="string">"dependencyService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dependencyService"</span> <span class="attr">class</span>=<span class="string">"DependencyServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而基于JavaConfig的配置形式是这样的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl(dependencyService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DependencyService <span class="title">dependencyService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DependencyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p>
<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的<a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p>
<p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p>
<blockquote>
<p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p>
</blockquote>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>个人感觉@EnableAutoConfiguration这个Annotation最为重要，所以放在最后来解读，大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，借助@Import的支持，收集和注册特定场景相关的bean定义。</p>
<ul>
<li>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li>
<li>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。<br>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</li>
</ul>
<p>@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。就像一只“八爪鱼”一样</p>
<h3 id="深入探索SpringApplication执行流程"><a href="#深入探索SpringApplication执行流程" class="headerlink" title="深入探索SpringApplication执行流程"></a>深入探索SpringApplication执行流程</h3><p>SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：</p>
<p>1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：</p>
<ul>
<li>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。</li>
<li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。</li>
<li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。</li>
<li>推断并设置main方法的定义类。<br>2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</li>
</ul>
<p>3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</p>
<p>4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</p>
<p>5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。</p>
<p>6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</p>
<p>7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。</p>
<p>8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。</p>
<p>9） 最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</p>
<p>10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。</p>
<p>11） 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</p>
<p>12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</p>
<p>13） 正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）<br>去除事件通知点后，整个流程如下：<br><img src="//image.joylau.cn/blog/SpringBoot-start-model.jpg" alt="SpringBoot-start-model"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>大部分参考了《SpringBoot揭秘快速构建为服务体系》这本书</p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 基础篇]]></title>
      <url>http://blog.joylau.cn/2017/03/13/SpringBoot-Basic/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/springbootstart.png" alt="SpringBoot-Start"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>玄铁重剑是神雕侠侣中杨过的兵器，外表看似笨重无比，但内在却精致有细。</li>
<li>在脚本语言和敏捷开发大行其道的时代，JavaEE的开发显得尤为笨重，这使得很多开发人员本应该如此，Spring在提升JavaEE的开发效率上从未停止过努力，SpringBoot的出现时具有颠覆性和划时代意义的。</li>
</ul>
</blockquote>
<h2 id="开始准备"><a href="#开始准备" class="headerlink" title="开始准备"></a>开始准备</h2><ul>
<li>JDK1.7+</li>
<li>Maven3.x+</li>
<li>Tomcat8.5+</li>
<li>Spring4.3.x+</li>
<li>IntelliJ IDEA / MyEclipse（强烈推荐IDEA，我认为IDEA目前所有 IDE 中最具备沉浸式的 IDE，<strong>没有之一</strong>）</li>
</ul>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><code>习惯优于配置</code>：使用SpringBoot只需要很少的配置，在绝大部分时候我们只需要使用默认配置</li>
<li>项目极速搭建，可无配置整合其他第三方框架,极大提高开发效率</li>
<li>完全不使用XML配置，只使用自动配置和JavaConfig</li>
<li>内嵌Servlet容器，可打成jar包独立运行</li>
<li>强大的运行时监控</li>
<li>浑然天成的集成云计算</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><img src="//tb2.bdstatic.com/tb/editor/images/face/i_f10.png?t=20140803" alt="流汗">没有</li>
</ul>
<h2 id="优雅的开始"><a href="#优雅的开始" class="headerlink" title="优雅的开始"></a>优雅的开始</h2><ul>
<li>Spring 官方网站搭建<ol>
<li>访问：<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></li>
<li>选择构建工具Maven Project、Spring Boot版本1.5.1以及一些工程基本信息，可参考下图所示<br> <img src="//image.joylau.cn/blog/SpringInitializr.png" alt="SpringInitializr"></li>
<li>点击Generate Project下载项目压缩包</li>
<li>导入到你的工程，如果是IDEA，则需要：<br>a.菜单中选择<code>File–&gt;New–&gt;Project from Existing Sources...</code><br>b.选择解压后的项目文件夹，点击OK<br>c.点击<code>Import project from external model</code>并选择Maven，点击Next到底为止。<br>d.若你的环境有多个版本的JDK，注意到选择Java SDK的时候请选择Java 7以上的版本</li>
</ol>
</li>
</ul>
<ul>
<li>IntelliJ IDEA创建（<strong>强烈推荐</strong>）<br>在File菜单里面选择 New &gt; Project,然后选择Spring Initializr，接着如下图一步步操作即可。<br><img src="//image.joylau.cn/blog/SpringInitializr-IDEA.png" alt="SpringInitializr"><br><img src="//image.joylau.cn/blog/SpringInitializr-IDEA-2.png" alt="SpringInitializr-2"><br><img src="//image.joylau.cn/blog/SpringInitializr-IDEA-3.png" alt="SpringInitializr-3"><br><img src="//image.joylau.cn/blog/SpringInitializr-IDEA-4.png" alt="SpringInitializr-4"></li>
</ul>
<p>若上述步骤步骤没有出现网络错误导致的无法搭建，基本上已经没有什么问题了</p>
<h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>根据上面的操作已经初始化了一个Spring Boot的框架了，项目结构如下：<br><img src="//image.joylau.cn/blog/SpringBootProject-view.png" alt="SpringBootProject-view"></p>
<p>项目里面基本没有代码，除了几个空目录外，还包含如下几样东西。</p>
<ul>
<li><code>pom.xml</code>：Maven构建说明文件。</li>
<li><code>JoylauApplication.java</code>：一个带有main()方法的类，用于启动应用程序（关键）。</li>
<li><code>JoylauApplicationTests.java</code>：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。</li>
<li><code>application.properties</code>：一个空的properties文件，你可以根据需要添加配置属性。(还推荐一种yml文件的配置方式)</li>
</ul>
<h3 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h3><p>我们来看pom.xml文件<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这块配置就是Spring Boot父级依赖，有了这个，当前的项目就是Spring Boot项目了，spring-boot-starter-parent是一个特殊的starter,它用来提供相关的Maven默认依赖，使用它之后，常用的包依赖可以省去version标签。</p>
<p>并不是每个人都喜欢继承自spring-boot-starter-parent POM。也有可能我们需要使用的自己的公司标准parent，或者我们更喜欢显式声明所有的Maven配置。<br>如果不想使用spring-boot-starter-parent，仍然可以通过使用scope = import依赖关系来保持依赖关系管理：<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>该设置不允许使用<code>spring-boot-dependencies</code>所述的属性(properties)覆盖各个依赖项，要实现相同的结果，需要在<code>spring-boot-dependencies</code>项之前的项目的dependencyManagement中添加一个配置，例如，要升级到另一个Spring Data版本系列，可以将以下内容添加到pom.xml中。<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Override Spring Data release train provided by Spring Boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-releasetrain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><h4 id="起步依赖-spring-boot-starter-xx"><a href="#起步依赖-spring-boot-starter-xx" class="headerlink" title="起步依赖 spring-boot-starter-xx"></a>起步依赖 spring-boot-starter-xx</h4><p>Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。举个例子来说明一下这个起步依赖的好处，比如组装台式机和品牌机，自己组装的话需要自己去选择不同的零件，最后还要组装起来，期间有可能会遇到零件不匹配的问题。耗时又消力，而品牌机就好一点，买来就能直接用的，后续想换零件也是可以的。相比较之下，后者带来的效果更好点（这里就不讨论价格问题哈），起步依赖就像这里的品牌机，自动给你封装好了你想要实现的功能的依赖。就比如我们之前要实现web功能，引入了spring-boot-starter-web这个起步依赖。我们来看看spring-boot-starter-web到底依赖了哪些,如下图：<br><img src="//image.joylau.cn/blog/SpringBoot-starter-web-dependencies.png" alt="SpringBoot-starter-web-dependencies"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="项目启动的三种方式"><a href="#项目启动的三种方式" class="headerlink" title="项目启动的三种方式"></a>项目启动的三种方式</h3><ol>
<li><code>main</code>方法<br><img src="//image.joylau.cn/blog/SpringBoot-Start1.png" alt="SpringBoot-Start1"></li>
<li>使用命令 <code>mvn spring-boot:run</code>在命令行启动该应用，IDEA中该命令在如下位置<br><img src="//image.joylau.cn/blog/SpringBoot-Start2.png" alt="SpringBoot-Start2"></li>
<li>运行<code>mvn package</code>进行打包时，会打包成一个可以直接运行的 JAR 文件，使用<code>java -jar</code>命令就可以直接运行<br><img src="//image.joylau.cn/blog/SpringBoot-Start3.png" alt="SpringBoot-Start3"><br><img src="//image.joylau.cn/blog/SpringBoot-Start4.png" alt="SpringBoot-Start4"></li>
</ol>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重剑无锋,大巧不工 SpringBoot --- 添加监控端点Actuator]]></title>
      <url>http://blog.joylau.cn/2017/03/01/SpringBoot-Actuator/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/screenshot-metrics.png" alt="screenshot-metrics"></p>]]></content>
      
        <categories>
            
            <category> SpringBoot篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- 视图界面]]></title>
      <url>http://blog.joylau.cn/2017/02/23/Linux-GUI/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/desktop.png" alt="MATE Desktop"></p>
<blockquote>
<p>上面的截图是我安装好之后界面，安装的是MATE桌面</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>1.阿里云官网默认的Linux Centos7系统镜像，都是没有安装桌面环境的，用户如果要使用桌面，需要自己在服务器上进行安装</li>
<li>2.生产环境下不要安装桌面，毕竟生产环境下的资源都是很紧张的</li>
<li><code>groups</code>是Centos7才有的命令</li>
</ul>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ul>
<li>登录服务器，执行命令安装桌面环境（537M）  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groups install <span class="string">"MATE Desktop"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>安装好MATE Desktop 后，再安装X Window System（19M）   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groups install <span class="string">"X Window System"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>设置服务器默认启动桌面   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  <span class="built_in">set</span>-default  graphical.target</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li>重启服务器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在ECS控制台,用管理终端登录服务器,进入到服务器系统登录界面，用root密码登录服务器。</p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum groupremove <span class="string">'X Window System'</span> -y</span><br><span class="line">yum groupremove <span class="string">'MATE Desktop'</span> -y</span><br><span class="line">// 恢复至默认启动界面</span><br><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> MATE Desktop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- 常用命令备忘]]></title>
      <url>http://blog.joylau.cn/2017/02/23/Linux-Command/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">////////////////////////////////////////////////////////////////////</span><br><span class="line">//                          _ooOoo_                               //</span><br><span class="line">//                         o8888888o                              //</span><br><span class="line">//                         88<span class="string">" . "</span>88                              //</span><br><span class="line">//                         (| ^_^ |)                              //</span><br><span class="line">//                         O\  =  /O                              //</span><br><span class="line">//                      ____/`---<span class="string">'\____                           //</span></span><br><span class="line"><span class="string">//                    .'</span>  \\|     |//  `.                         //</span><br><span class="line">//                   /  \\|||  :  |||//  \                        //</span><br><span class="line">//                  /  _||||| -:- |||||-  \                       //</span><br><span class="line">//                  |   | \\\  -  /// |   |                       //</span><br><span class="line">//                  | \_|  <span class="string">''</span>\---/<span class="string">''</span>  |   |                       //</span><br><span class="line">//                  \  .-\__  `-`  ___/-. /                       //</span><br><span class="line">//                ___`. .<span class="string">'  /--.--\  `. . ___                     //</span></span><br><span class="line"><span class="string">//              ."" '</span>&lt;  `.___\_&lt;|&gt;_/___.<span class="string">'  &gt;'</span><span class="string">""</span>.                  //</span><br><span class="line">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span><br><span class="line">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span><br><span class="line">//      ========`-.____`-.___\_____/___.-`____.-<span class="string">'========         //</span></span><br><span class="line"><span class="string">//                           `=---='</span>                              //</span><br><span class="line">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span><br><span class="line">//                    佛祖保佑       永无BUG                        //</span><br><span class="line">////////////////////////////////////////////////////////////////////</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>有一些命令是centos7特有的，在低版本的可能无法使用</li>
</ul>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul>
<li>查看防火墙状态：  <code>systemctl status firewalld</code></li>
<li>开启防火墙 ：  <code>systemctl start  firewalld</code></li>
<li>停止防火墙：  <code>systemctl disable firewalld</code></li>
<li>重启防火墙：  <code>systemctl restart firewalld.service</code></li>
<li>开启80端口：  <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></li>
<li>禁用防火墙：  <code>systemctl stop firewalld</code></li>
<li>查看防火墙开放的端口号：  <code>firewall-cmd --list-ports</code></li>
</ul>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ul>
<li>查看tomcat运行状态：<code>ps -ef |grep tomcat</code></li>
<li>看到tomcat的pid之后：<code>kill -9 pid</code> 可以强制杀死tomcat的进程</li>
</ul>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul>
<li>查看cpu及内存使用情况：<code>top</code>(停止刷新 <code>-q</code>)</li>
<li>查看内存使用情况 ：<code>free</code></li>
</ul>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>删除文件里机器子文件夹的内容：<code>rm -rf /var/lib/mysql</code></li>
<li>查找某个文件所在目录：<code>find / -name filename</code></li>
</ul>
<h3 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h3><ul>
<li>解压zip压缩文件：<code>unzip file.zip</code>，相反的，压缩文件 zip file （需安装<code>yum install unzip zip</code>,），解压到指定目录可加参数-d,如：<code>unzip file.zip -d /root/</code></li>
<li>将 test.txt 文件压缩为 test.zip，<code>zip test.zip test.txt</code>,当然也可以指定压缩包的目录，例如 /root/test.zip ,后面的test.txt也可以换成文件夹</li>
<li>linux下是不支持直接解压rar压缩文件，建议将要传输的文件压缩成zip文件</li>
<li><code>yum install p7zip</code> 安装7z解压，支持更多压缩格式（卸载<code>yum remove p7zip</code>）</li>
</ul>
<h3 id="快速删除文件夹-文件"><a href="#快速删除文件夹-文件" class="headerlink" title="快速删除文件夹/文件"></a>快速删除文件夹/文件</h3><ul>
<li>有时我们的文件夹里有很多文件，默认的删除方式是递归删除，文件夹深了及文件多了，删除会非常的慢，这时候：</li>
<li>先建立一个空目录<br><code>mkdir /data/blank</code></li>
<li>用rsync删除目标目录<br><code>rsync–delete-before -d /data/blank/ /var/spool/clientmqueue/</code></li>
<li>同样的对于大文件：创建空文件<br><code>touch /data/blank.txt</code></li>
<li>用rsync清空文件<br><code>rsync-a –delete-before –progress –stats /root/blank.txt /root/nohup.out</code></li>
</ul>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul>
<li>查看6379端口是否占用：<code>netstat -tunpl | grep 6379</code> (注意，redis服务需要 root 权限才能查看，不然只能检查到6379被某个进程占用，但是看不到进程名称。)</li>
</ul>
<h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><ul>
<li>修改主机名：<code>hostnamectl set-hostname 新主机名</code></li>
</ul>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul>
<li>列出所有可更新的软件清单命令：<code>yum check-update</code></li>
<li>更新所有软件命令：<code>yum update</code></li>
<li>仅安装指定的软件命令：<code>yum install &lt;package_name&gt;</code></li>
<li>仅更新指定的软件命令：<code>yum update &lt;package_name&gt;</code></li>
<li>列出所有可安裝的软件清单命令：<code>yum list</code></li>
<li>删除软件包命令：<code>yum remove &lt;package_name&gt;</code></li>
<li>查找软件包 命令：<code>yum search &lt;keyword&gt;</code></li>
<li>清除缓存命令:   </li>
<li><code>yum clean packages</code>: 清除缓存目录下的软件包</li>
<li><code>yum clean headers</code>: 清除缓存目录下的 headers</li>
<li><code>yum clean oldheaders</code>: 清除缓存目录下旧的 headers</li>
</ul>
<h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul>
<li><code>systemctl restart nginx</code> : 重启nginx</li>
<li><code>systemctl start nginx</code> : 开启nginx</li>
<li><code>systemctl stop nginx</code> : 关闭nginx</li>
<li><code>systemctl enable nginx</code> : nginx开机启动</li>
<li><code>systemctl disable nginx</code> : 禁用nginx开机启动</li>
<li><code>systemctl status nginx</code> : 查看nginx服务信息</li>
<li><code>systemctl is-enabled nginx</code> ： 查看服务是否开机启动</li>
<li><code>systemctl list-unit-files|grep enabled</code> ： 查看已启动的服务列表</li>
<li><code>systemctl --failed</code> ： 查看启动失败的服务列表</li>
<li><code>systemctl daemon-reload</code> ： 重新加载service文件</li>
<li><code>systemctl reboot</code> : 重启</li>
<li><code>systemctl poweroff</code> : 关机</li>
</ul>
<h3 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h3><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><ul>
<li>tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg</li>
<li>tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li>
<li>tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li>
<li>tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li>
<li>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux</li>
<li>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</li>
</ul>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><ul>
<li>tar –xvf file.tar //解压 tar包</li>
<li>tar -xzvf file.tar.gz //解压tar.gz</li>
<li>tar -xjvf file.tar.bz2   //解压 tar.bz2</li>
<li>tar –xZvf file.tar.Z   //解压tar.Z</li>
<li>unrar e file.rar //解压rar</li>
<li>unzip file.zip //解压zip</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>.tar 用 tar –xvf 解压</li>
<li>.gz 用 gzip -d或者gunzip 解压</li>
<li>.tar.gz和*.tgz 用 tar –xzf 解压</li>
<li>.bz2 用 bzip2 -d或者用bunzip2 解压</li>
<li>.tar.bz2用tar –xjf 解压</li>
<li>.Z 用 uncompress 解压</li>
<li>.tar.Z 用tar –xZf 解压</li>
<li>.rar 用 unrar e解压</li>
<li>.zip 用 unzip 解压</li>
</ul>
<h3 id="yum更换为阿里源"><a href="#yum更换为阿里源" class="headerlink" title="yum更换为阿里源"></a>yum更换为阿里源</h3><ul>
<li><p>备份 ：mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p>
</li>
<li><p>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p>
</li>
</ul>
<p>CentOS 5 ：</p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-5.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-5.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-5.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-5.repo</a></p>
<p>CentOS 6 ： </p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-6.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-6.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-6.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-6.repo</a></p>
<p>CentOS 7 ： </p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
<ul>
<li>之后运行 yum makecache 生成缓存</li>
</ul>
<h2 id="创建用户，权限，密码等"><a href="#创建用户，权限，密码等" class="headerlink" title="创建用户，权限，密码等"></a>创建用户，权限，密码等</h2><ul>
<li>adduser es -s /bin/bash  : 创建用户为 es ,shell指定为bash</li>
<li>passwd es 更改 es 用户的密码</li>
<li>chown -R es:es /project/elasticsearch-5.6.3 循环遍历更改 /project/elasticsearch-5.6.3 目录下的文件拥有者及用户组</li>
<li>su - es : 切换成es用户重新登录系统</li>
<li>su es : 表示与 es 建立一个连接，通过 es 来执行命令</li>
</ul>
<p>注： 以上命令在安装 elasticsearch 时都会用的到</p>
<h2 id="2018-06-22-更新"><a href="#2018-06-22-更新" class="headerlink" title="2018-06-22 更新"></a>2018-06-22 更新</h2><ol>
<li><p>vim 永久显示行号 vim /etc/vimrc 添加 <code>set nu</code> 或者 <code>set number</code></p>
</li>
<li><p>最小化安装 centos 是没有 tab 键补全提示的， 需要安装 <code>yum install bash-completion</code></p>
</li>
<li><p>tab 补全提示不区分大小写 ： vim /etc/inputrc 添加 <code>set completion-ignore-case on</code></p>
</li>
</ol>
<p>注： 以上 增加配置是全局的，只对当前用户的话，可以在当前目录下新建相应的文件，再添加配置，例如： ~/.inputrc</p>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMD </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- 生产环境的搭建]]></title>
      <url>http://blog.joylau.cn/2017/02/23/Linux-BuildingEnvironment/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/server.jpg" alt="Server"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>本次搭建<code>Java</code>和<code>Tomcat</code>的运行环境，后续将接着搭建Mysql，Git,Nginx,Redis,Docker…环境</li>
</ul>
<h2 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h2><ul>
<li>1.在/usr/目录下创建java目录  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@JoyLau ~]<span class="comment"># mkdir/usr/java</span></span><br><span class="line">[root@JoyLau ~]<span class="comment"># cd /usr/java</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>2.官网下载jdk,拷贝到服务器上，然后解压  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@JoyLau java]<span class="comment"># tar -zxvf jdk-8u121-linux-x64.gz</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>3.设置环境变量  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@JoyLau java]<span class="comment"># vi /etc/profile</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>4.在profile中添加如下内容:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_121</span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>5.让修改生效:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@JoyLau java]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>6.验证  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@JoyLau ~]<span class="comment"># java --version</span></span><br><span class="line">java version <span class="string">"1.8.0_121"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>还有2中方法可以安装jdk：<ul>
<li>1.用<code>yum</code>安装jdk</li>
<li>2.<code>Ubuntu</code> 上使用<code>apt-get</code>安装jdk</li>
</ul>
</li>
</ul>
<h3 id="yum-安装jdk"><a href="#yum-安装jdk" class="headerlink" title="yum 安装jdk"></a>yum 安装jdk</h3><ul>
<li>yum search jdk ： 查看yum源上的jdk版本信息</li>
<li>选择一个jdk8的来安装： yum install java-1.8.0-openjdk.x86_64</li>
<li>等待即可</li>
</ul>
<p>注意的是默认安装的只是 Java JRE，而不是 JDK，为了开发方便，我们还是需要通过 yum 进行安装 JDK<br>yum install java-1.8.0-openjdk-devel.x86_64</p>
<p>之后就可以直接使用 Java javac 命令了</p>
<p>配置 JAVA_HOME变量:</p>
<p>vim ~/.bashrc<br>在文件最后面添加如下单独一行（指向 JDK 的安装位置），并保存：<br>export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk<br>接着还需要让该环境变量生效，执行如下代码：<br>source ~/.bashrc    # 使变量设置生效<br>设置好后我们来检验一下是否设置正确：<br>echo $JAVA_HOME     # 检验变量值<br>java -version<br>$JAVA_HOME/bin/java -version  # 与直接执行 java -version 一样<br>如果设置正确的话，$JAVA_HOME/bin/java -version 会输出 java 的版本信息，且和 java -version 的输出结果一样</p>
<h3 id="rpm-安装jdk"><a href="#rpm-安装jdk" class="headerlink" title="rpm 安装jdk"></a>rpm 安装jdk</h3><ol>
<li>官网下载 jdk rpm包</li>
<li>rpm -ivh jdk_xxxxx.rpm</li>
<li>配置环境变量（和上述配置一致）</li>
<li>卸载： rpm -qa|grep jdk ， 查出什么，就使用 rpm -e –nodeps java_xxx 来卸载</li>
</ol>
<h2 id="Tomcat环境搭建"><a href="#Tomcat环境搭建" class="headerlink" title="Tomcat环境搭建"></a>Tomcat环境搭建</h2><h3 id="先配置"><a href="#先配置" class="headerlink" title="先配置"></a>先配置</h3><ul>
<li>配置catalina.sh,加入以下配置  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add JAVA and TOMCAT config</span></span><br><span class="line">JAVA_OPTS=<span class="string">"-Xms512m -Xmx1024m -Xss1024K -XX:PermSize=512m -XX:MaxPermSize=1024m"</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/project/apache-tomcat-8.5.11</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/project/apache-tomcat-8.5.11</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/java/jdk1.8.0_121/jre</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class="line"></span><br><span class="line"><span class="comment">#add tomcat pid</span></span><br><span class="line">CATALINA_PID=<span class="string">"<span class="variable">$TOMCAT_HOME</span>/tomcat.pid"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>增加tomcat.service在<code>/usr/lib/systemd/system</code>目录下增加<code>tomcat.service</code>，目录必须是绝对目录。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/project/apache-tomcat-8.5.11/tomcat.pid</span><br><span class="line">ExecStart=/project/apache-tomcat-8.5.11/bin/startup.sh </span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="再使用"><a href="#再使用" class="headerlink" title="再使用"></a>再使用</h3><ul>
<li>配置开机启动 <code>systemctl enable tomcat</code></li>
<li>启动tomcat <code>systemctl start tomcat</code></li>
<li>停止tomcat <code>systemctl stop tomcat</code></li>
<li>重启tomcat <code>systemctl restart tomcat</code></li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>因为配置pid，在启动的时候会再tomcat根目录生成tomcat.pid文件，停止之后删除</li>
<li>同时tomcat在启动时候，执行start不会启动两个tomcat，保证始终只有一个tomcat服务在运行</li>
<li>多个tomcat可以配置在多个目录下，互不影响。</li>
</ul>
<h3 id="遇到2个很尴尬的问题"><a href="#遇到2个很尴尬的问题" class="headerlink" title="遇到2个很尴尬的问题"></a>遇到2个很尴尬的问题</h3><ul>
<li>这个问题我尝试过很多次，那就是Tomcat启动的特别慢，后来查看日志发现是部署项目的时候花费时间特别长，详细看<a href="http://bbs.qcloud.com/thread-25271-1-1.html" target="_blank" rel="noopener">这里</a></li>
<li>遇到无法启动的问题，最后是<code>startup.sh</code>没有权限，你知道该怎么做的~~</li>
</ul>
<h3 id="使用yum安装的tomcat注意"><a href="#使用yum安装的tomcat注意" class="headerlink" title="使用yum安装的tomcat注意"></a>使用yum安装的tomcat注意</h3><ul>
<li>安装位置   <em>/etc/tomcat</em></li>
<li>主程序/软件存放webapp位置   <em>/var/lib/tomcat/webapps</em></li>
<li>在Centos使用yum安装后，Tomcat相关的目录都已采用符号链接到/usr/share/tomcat6目录，包含webapps等，这很方便我们配置管理   <em>/usr/share/tomcat</em></li>
<li>日志记录位置   <em>/var/log/tomcat</em></li>
<li>查看全部tomcat安装目录   <em>rpm -ql tomcat6 | cat -n</em></li>
</ul>
<h2 id="Mysql5-7数据库安装"><a href="#Mysql5-7数据库安装" class="headerlink" title="Mysql5.7数据库安装"></a>Mysql5.7数据库安装</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul>
<li>mysql主要有2种方式安装<ul>
<li>1.本文要说明的</li>
<li>2.<a href="http://blog.sina.com.cn/s/blog_16392bde40102wol6.html" target="_blank" rel="noopener">点击这里查看</a></li>
</ul>
</li>
</ul>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul>
<li>在mysql的官网上找到mysql的源链接</li>
</ul>
<p><img src="//image.joylau.cn/blog/mysqlsourceLink.jpg" alt="Mysql官网截图"></p>
<ul>
<li>找到原链接：<code>https://repo.mysql.com//mysql57-community-release-el7-9.noarch.rpm</code></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>安装命令  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://repo.mysql.com//mysql57-community-release-el7-9.noarch.rpm</span></span><br><span class="line"><span class="comment"># rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum install mysql-community-server</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>安装过程中有确认操作，一律<strong><em>y</em></strong></li>
<li>接下来就是漫长的下载，只需要等待即可。<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3></li>
<li>安装完成后： <code>systemctl start mysqld</code> 启动mysqld服务</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>查看<code>/var/log/mysqld.log</code>里的日志(可以查找<strong>password</strong>关键字)<br><img src="//image.joylau.cn/blog/mysqllog.jpg" alt="mysqlLog"></li>
<li>可以看到创建的临时密码</li>
<li>登录MySQL：<code>mysql -u root -p</code></li>
<li>输入刚才在日志里看到的临时密码</li>
<li>这个时候我输入任何的命令都会提示<code>You must reset your password using ALTER USER statement before executing this statement.</code><br><img src="//image.joylau.cn/blog/alertTips.jpg" alt="alterTips"></li>
<li>通过 <code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;root&#39;</code> 命令，修改 root 用户的密码为 root，注意修改的密码不能过于简单</li>
<li>退出，重新以root用户和刚设置的密码进行登录即可</li>
</ul>
<h3 id="MySql配置文件"><a href="#MySql配置文件" class="headerlink" title="MySql配置文件"></a>MySql配置文件</h3><ul>
<li>将所有权限赋给root用户并提供外网访问  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@<span class="string">'%'</span>identified by <span class="string">'root'</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>紧接着就可以在自己的机器上用<strong>Navicat</strong>了</li>
<li>配置my.cnf：<code>/etc/my.cnf</code>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="line"><span class="comment"># changes to the binary log between backups.</span></span><br><span class="line"><span class="comment"># log_bin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span><br><span class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></span><br><span class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="comment"># join_buffer_size = 128M</span></span><br><span class="line"><span class="comment"># sort_buffer_size = 2M</span></span><br><span class="line"><span class="comment"># read_rnd_buffer_size = 2M</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">//设置端口号</span><br><span class="line">port= 3333</span><br><span class="line"></span><br><span class="line">//设置服务器端编码</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">//Linux下表名是严格区分大小写的，设置为0表示区分，设置为1表示不区分</span><br><span class="line">lower_case_table_names= 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h3><ul>
<li><code>yum remove  mysql mysql-server mysql-libs mysql-server;</code></li>
<li><code>rpm -qa|grep mysql</code>(查询出来的东东yum remove掉)</li>
<li><code>find / -name mysql</code> (将找到的相关东西delete掉；)</li>
</ul>
<h3 id="值得注意的是："><a href="#值得注意的是：" class="headerlink" title="值得注意的是："></a>值得注意的是：</h3><ul>
<li>1.<code>show variables like &#39;character%&#39;;</code>可以看到数据库的编码方式<ul>
<li><code>其中，character_set_client为客户端编码方式；</code></li>
<li><code>character_set_connection为建立连接使用的编码；</code></li>
<li><code>character_set_database数据库的编码；</code></li>
<li><code>character_set_results结果集的编码；</code></li>
<li><code>character_set_server数据库服务器的编码；</code></li>
<li><code>只要保证以上四个采用的编码方式一样，就不会出现乱码问题。</code></li>
</ul>
</li>
<li>2.暂时能配置只有这些，以后有更新，我会加上的</li>
</ul>
<h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><h4 id="Linux安装redis是需要在官网下载redis的源码然后再编译的"><a href="#Linux安装redis是需要在官网下载redis的源码然后再编译的" class="headerlink" title="Linux安装redis是需要在官网下载redis的源码然后再编译的"></a>Linux安装redis是需要在官网下载redis的源码然后再编译的</h4><ul>
<li>redis的官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></li>
<li>redis中文网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></li>
<li>我已将编译好直接可以使用的Redis上传到GitHub: <a href="https://github.com/JoyLau/Redis-3.2.8-Linux" target="_blank" rel="noopener">https://github.com/JoyLau/Redis-3.2.8-Linux</a></li>
<li>请结合本篇博客和项目里的README文件使用</li>
</ul>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>下载linux版的压缩包,截止到我写博客的时间，官网给的稳定版是3.2.8，我们就下载<code>redis-3.2.8.tar.gz</code></li>
<li><code>tar -zxvf redis-3.2.8.tar.gz</code></li>
<li>进入src目录：<code>cd redis-3.2.8/src</code></li>
<li><code>make</code> 编译</li>
<li>这时我们不执行<code>make intsall</code>,因为该操作会把编译生成的<strong><em>重要的文件</em></strong>拷贝到<code>user/local/bin</code>下，我们想要自定义配置路径</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>中间可能报<code>/bin/sh: cc:未找到命令</code>,对于这样的情况只需要  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc </span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>这里的重要文件指的是下图所示的8个文件，在redis以前版本好像是7个文件（没具体试过）</li>
<li>注意文件和文件夹的权限</li>
</ul>
<h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3><ul>
<li><code>ls</code>查看src下的文件，你会看到有些文件是绿色的，这些事重要的文件，也正是我们所需要的，我们将这些文件单独存下来<br><img src="//image.joylau.cn/blog/redisimportantfile.png" alt="Redis源码编译后的重要文件"></li>
<li>我们来看看编译出来的几个程序分别是干什么的：<pre><code>redis-server：顾名思义，redis服务
redis-cli：redis client，提供一个redis客户端，以供连接到redis服务，进行增删改查等操作
redis-sentinel：redis实例的监控管理、通知和实例失效备援服务
redis-benchmark：redis的性能测试工具
redis-check-aof：若以AOF方式产生日志，当意外发生时用来快速修复
redis-check-rdb：若以RDB方式产生日志，当意外发生时用来快速修复
</code></pre></li>
<li>保存好之后我们的路径如下：<br><img src="//image.joylau.cn/blog/redisfloder.png" alt="Redis根目录"><br><img src="//image.joylau.cn/blog/redisbin.png" alt="Redis-bin"><br><img src="//image.joylau.cn/blog/redisetc.png" alt="Redis-etc"></li>
</ul>
<h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><ul>
<li>redis.conf我只修改了以下配置<ul>
<li><code>port</code> : 端口</li>
<li><code>requirepass</code> 密码</li>
<li><code>bind 0.0.0.0</code> ： 配置外网可访问</li>
<li><code>daemonize yes</code> : 将redis服务作为守护进程,作为开机启动</li>
</ul>
</li>
<li>有了基本配置，redis还需要有一个管理启动、关闭、重启的一个脚本。redis源码里其实已经提供了一个初始化脚本<code>redis_init_script</code>,这是我的配置  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 90 10 </span></span><br><span class="line"><span class="comment"># description: Redis is a persistent key-value database</span></span><br><span class="line"><span class="comment"># Simple Redis init.d script conceived to work on Linux systems</span></span><br><span class="line"><span class="comment"># as it does use of the /proc filesystem.</span></span><br><span class="line"><span class="comment"># 如果redis设置了密码，则$CLIEXEC -a $PASSWORD -p $REDISPORT shutdown 需要加一个参数</span></span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">PASSWORD=123</span><br><span class="line">EXEC=/project/redis3.2.8/bin/redis-server</span><br><span class="line">CLIEXEC=/project/redis3.2.8/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis_<span class="variable">$&#123;REDISPORT&#125;</span>.pid</span><br><span class="line">CONF=/project/redis3.2.8/etc/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></span><br><span class="line">                <span class="variable">$CLIEXEC</span> -a <span class="variable">$PASSWORD</span> -p <span class="variable">$REDISPORT</span> shutdown</span><br><span class="line">                <span class="keyword">while</span> [ -x /proc/<span class="variable">$&#123;PID&#125;</span> ]</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></span><br><span class="line">                    sleep 1</span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Please use start or stop as first argument"</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>头部的chkconfig的添加是为了保证<code>chkconfig redis on</code>能够执行</li>
<li>接着将<strong>redis_init_script</strong>脚本拷贝到<strong>/etc/init.d/redis</strong>，这里重命名为redis  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp /project/redis-3.2.8/utils/redis_init_script /etc/init.d/redis</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>现在还缺一个系统启动时的配置:<code>chkconfig redis on</code></li>
<li>执行之后，redis便是以系统服务启动、关闭了  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis;</span><br><span class="line">systemctl stop redis;</span><br><span class="line">systemctl restart redis;</span><br></pre></td></tr></table></figure>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> JDK </tag>
            
            <tag> Tomcat </tag>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux菜鸟到熟悉 --- 数据盘的格式化和挂载]]></title>
      <url>http://blog.joylau.cn/2017/02/23/Linux-MountDisk/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/Thymeleaf.png" alt="Thymeleaf"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>云服务器 <strong>ECS</strong> 仅支持对<strong>数据盘</strong>进行二次分区，而不支持对 <strong>系统盘</strong> 进行二次分区（不管是 <strong>Windows</strong> 还是 <strong>Linux</strong> 系统）</li>
<li>强行使用第三方工具对系统盘进行二次分区操作，可能引发未知风险，如系统崩溃、数据丢失等。</li>
<li>对新购的数据盘可以选择分区或者不分区，这个根据自身的情况而定</li>
<li>下面内容的<code>xvdb</code>和 <code>vdb</code>分别对应非 I/O优化I/O 优化；非 I/O 优化和 I/O 优化的区别在于，前者比后者多一个字母 x</li>
<li>新数据盘的挂载可以自定义文件夹，本示例中用的是/mnt</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul>
<li>运行 <code>fdisk -l</code> 命令查看数据盘。注意：在没有分区和格式化数据盘之前，使用 <code>df -h</code> 命令是无法看到数据盘的。在下面的示例中，有一个 5 GB 的数据盘需要挂载。</li>
<li>如果执行了 <code>fdisk -l</code> 命令后，没有发现 /dev/xvdb，则表示您的实例没有数据盘，因此无需挂载</li>
</ul>
<p><img src="//image.joylau.cn/blog/linux1.jpg" alt="Image1"></p>
<h3 id="需要进行分区的情况"><a href="#需要进行分区的情况" class="headerlink" title="需要进行分区的情况"></a>需要进行分区的情况</h3><ul>
<li>运行 <code>fdisk /dev/xvdb</code>，对数据盘进行分区。根据提示，依次输入 n，p，1，两次回车，wq，分区就开始了。</li>
</ul>
<p><img src="//image.joylau.cn/blog/linux2.jpg" alt="Image2"></p>
<ul>
<li>运行 <code>fdisk -l</code> 命令，查看新的分区。新分区 xvdb1 已经创建好。如下面示例中的/dev/xvdb1。</li>
</ul>
<p><img src="//image.joylau.cn/blog/linux3.jpg" alt="Image3"></p>
<h3 id="不需要进行分区的情况"><a href="#不需要进行分区的情况" class="headerlink" title="不需要进行分区的情况"></a>不需要进行分区的情况</h3><blockquote>
<p>一般情况下我都是直接格式化一整块数据盘，然后挂载的。</p>
</blockquote>
<ul>
<li>运行 <code>mkfs.ext3 /dev/xvdb1</code>，对新分区进行格式化。格式化所需时间取决于数据盘大小。您也可自主决定选用其他文件格式，如 <code>ext4</code> 等。</li>
</ul>
<p><img src="//image.joylau.cn/blog/linux4.jpg" alt="Image4"></p>
<ul>
<li>运行 <code>echo /dev/xvdb1 /mnt ext3 defaults 0 0 &gt;&gt; /etc/fstab</code> 写入新分区信息。完成后，可以使用 <code>cat /etc/fstab</code> 命令查看。</li>
</ul>
<p><img src="//image.joylau.cn/blog/linux5.jpg" alt="Image5"></p>
<blockquote>
<p>Ubuntu 12.04 不支持 barrier，所以对该系统正确的命令是：<code>echo /dev/xvdb1 /mnt ext3 defaults 0 0 &gt;&gt; /etc/fstab</code><br>  如果需要把数据盘单独挂载到某个文件夹，比如单独用来存放网页，可以修改以上命令中的 /mnt 部分。</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li><p>运行   <code>mount /dev/xvdb1 /mnt</code> 挂载新分区，然后执行 <code>df -h</code> 查看分区。如果出现数据盘信息，说明挂载成功，可以使用新分区了。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/xvdb1 /mnt</span><br><span class="line">df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/xvda1       40G  1.5G   36G   4% /</span><br><span class="line">tmpfs           498M     0  498M   0% /dev/shm</span><br><span class="line">/dev/xvdb1      5.0G  139M  4.6G   3% /mnt</span><br></pre></td></tr></table></figure>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> Linux篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 磁盘挂载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重新拾起我曾抛弃的Thymeleaf]]></title>
      <url>http://blog.joylau.cn/2017/02/20/Thymeleaf/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/Thymeleaf.png" alt="Thymeleaf"></p>
<h2 id="历史篇"><a href="#历史篇" class="headerlink" title="历史篇"></a>历史篇</h2><h3 id="曾经交往过"><a href="#曾经交往过" class="headerlink" title="曾经交往过"></a>曾经交往过</h3><ul>
<li>说是历史，也就是在去年，但我感觉已经过了很久。去年我在写<code>SpringBoot</code>项目的时候，想找一套前端的模板引擎，看到<code>SpringBoot</code>官网推荐使用<code>Thymeleaf</code>，就用了它</li>
<li>在写了几个页面之后，我在项目里写下了这样一段话<br><img src="//image.joylau.cn/blog/thyemeleafhistory.png" alt="曾经学习的历史记录"></li>
</ul>
<h3 id="没好印象，我甩了她"><a href="#没好印象，我甩了她" class="headerlink" title="没好印象，我甩了她"></a>没好印象，我甩了她</h3><ul>
<li>可以看到我放弃了它，选择了我熟悉的 <code>Freemarker</code>（不要问我为什么不选择JSP）</li>
</ul>
<h2 id="重逢篇"><a href="#重逢篇" class="headerlink" title="重逢篇"></a>重逢篇</h2><h3 id="相遇在spring"><a href="#相遇在spring" class="headerlink" title="相遇在spring"></a>相遇在spring</h3><ul>
<li><code>Spring</code>一直都是我崇尚和追求的项目，没事都会翻翻<code>Spring</code>的文档查阅查阅</li>
<li>无意中我发现<code>Spring</code>的官方文档，很多都是用<code>Thymeleaf</code>渲染的，这使我重新提起了兴趣</li>
</ul>
<h2 id="交往篇"><a href="#交往篇" class="headerlink" title="交往篇"></a>交往篇</h2><h3 id="决定重新尝试交往"><a href="#决定重新尝试交往" class="headerlink" title="决定重新尝试交往"></a>决定重新尝试交往</h3><ul>
<li>我决定重新学习一下</li>
</ul>
<h3 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h3><ul>
<li><code>Thymeleaf</code> 官网: <a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">http://www.thymeleaf.org/</a></li>
<li><code>Thymeleaf</code>是一个页面模板，类似于<code>Freemarker</code>、<code>Velocity</code>等，但<code>Thymeleaf</code>可以在服务器环境和静态环境下都能正常运行的页面模板，深受前后端分离开发的团队人员的青睐。</li>
<li><code>Thymeleaf</code>的数据展现全部通过以th:开头的html自定义标签来完成。当运行在服务器环境时将会按规则替换th:对应的地方显示出服务器上的数据，当运行在静态环境时，html会自动过虑th:开头的属性，显示默认的数据，从而达到两者都能正常运行。</li>
<li>整合SpringBoot  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如此简单</p>
<p>……..  未完待更   ……..</p>]]></content>
      
        <categories>
            
            <category> 模板引擎篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSL证书部署]]></title>
      <url>http://blog.joylau.cn/2017/02/20/SSL/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/https.jpg" alt="SSL"></p>
<h2 id="Apache-2-x-证书部署"><a href="#Apache-2-x-证书部署" class="headerlink" title="Apache 2.x 证书部署"></a>Apache 2.x 证书部署</h2><h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><p><img src="//image.joylau.cn/blog/apachessl.png" alt="Apache"></p>
<h3 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h3><ul>
<li>Apache文件夹内获得证书文件 1_root_bundle.crt，2_<a href="http://www.domain.com_cert.crt" target="_blank" rel="noopener">www.domain.com_cert.crt</a> 和私钥文件 3_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a>,</li>
<li>1_root_bundle.crt 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,</li>
<li>2_<a href="http://www.domain.com_cert.crt" target="_blank" rel="noopener">www.domain.com_cert.crt</a> 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,</li>
<li>3_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a> 文件包括一段私钥代码“—–BEGIN RSA PRIVATE KEY—–”和“—–END RSA PRIVATE KEY—–”。</li>
</ul>
<h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><ul>
<li>编辑Apache根目录下 conf/httpd.conf 文件，</li>
<li>找到 #LoadModule ssl_module modules/mod_ssl.so 和 #Include conf/extra/httpd-ssl.conf，去掉前面的#号注释；</li>
<li>编辑Apache根目录下 conf/extra/httpd-ssl.conf 文件，修改如下内容：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost www.domain.com:443&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/var/www/html"</span></span><br><span class="line">    ServerName www.domain.com</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateFile /usr/<span class="built_in">local</span>/apache/conf/2_www.domain.com_cert.crt</span><br><span class="line">    SSLCertificateKeyFile /usr/<span class="built_in">local</span>/apache/conf/3_www.domain.com.key</span><br><span class="line">    SSLCertificateChainFile /usr/<span class="built_in">local</span>/apache/conf/1_root_bundle.crt</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>配置完成后，重新启动 Apache 就可以使用<a href="https://www.domain.com" target="_blank" rel="noopener">https://www.domain.com</a>来访问了<br>注：<ul>
<li><code>SSLEngine on</code> ： 启用SSL功能</li>
<li><code>SSLCertificateFile</code> ：证书文件</li>
<li><code>SSLCertificateKeyFile</code> ： 私钥文件</li>
<li><code>SSLCertificateChainFile</code> : 证书链文件</li>
</ul>
</li>
</ul>
<h2 id="Nginx-证书部署"><a href="#Nginx-证书部署" class="headerlink" title="Nginx 证书部署"></a>Nginx 证书部署</h2><h3 id="文件准备-1"><a href="#文件准备-1" class="headerlink" title="文件准备"></a>文件准备</h3><p><img src="//image.joylau.cn/blog/Nginxssl.png" alt="Nginx"></p>
<h3 id="获取证书-1"><a href="#获取证书-1" class="headerlink" title="获取证书"></a>获取证书</h3><ul>
<li>Nginx文件夹内获得SSL证书文件 1_<a href="http://www.domain.com_bundle.crt" target="_blank" rel="noopener">www.domain.com_bundle.crt</a> 和私钥文件 2_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a>,</li>
<li>1_<a href="http://www.domain.com_bundle.crt" target="_blank" rel="noopener">www.domain.com_bundle.crt</a> 文件包括两段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,</li>
<li>2_<a href="http://www.domain.com.key" target="_blank" rel="noopener">www.domain.com.key</a> 文件包括一段私钥代码“—–BEGIN RSA PRIVATE KEY—–”和“—–END RSA PRIVATE KEY—–”。</li>
</ul>
<h3 id="证书安装-1"><a href="#证书安装-1" class="headerlink" title="证书安装"></a>证书安装</h3><ul>
<li>将域名 <a href="http://www.domain.com" target="_blank" rel="noopener">www.domain.com</a> 的证书文件1_<a href="http://www.domain.com_bundle.crt" target="_blank" rel="noopener">www.domain.com_bundle.crt</a> 、私钥文件2_<a href="http://www.domain.com.key保存到同一个目录，例如/usr/local/nginx/conf目录下。" target="_blank" rel="noopener">www.domain.com.key保存到同一个目录，例如/usr/local/nginx/conf目录下。</a></li>
<li>更新Nginx根目录下 conf/nginx.conf 文件如下：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.domain.com; <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_www.domain.com_bundle.crt;</span><br><span class="line">        ssl_certificate_key 2_www.domain.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; <span class="comment">#站点目录</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>配置完成后，先用bin/nginx –t来测试下配置是否有误，正确无误的话，重启nginx。就可以使 <a href="https://www.domain.com" target="_blank" rel="noopener">https://www.domain.com</a> 来访问了。<br>注：<ul>
<li><code>listen 443</code>    SSL访问端口号为443</li>
<li><code>ssl on</code>    启用SSL功能</li>
<li><code>ssl_certificate</code>    证书文件</li>
<li><code>ssl_certificate_key</code>    私钥文件</li>
<li><code>ssl_protocols</code>    使用的协议</li>
<li><code>ssl_ciphers</code>    配置加密套件，写法遵循openssl标准</li>
</ul>
</li>
</ul>
<h3 id="使用全站加密，http自动跳转https（可选）"><a href="#使用全站加密，http自动跳转https（可选）" class="headerlink" title="使用全站加密，http自动跳转https（可选）"></a>使用全站加密，http自动跳转https（可选）</h3><ul>
<li>对于用户不知道网站可以进行https访问的情况下，让服务器自动把http的请求重定向到https。</li>
<li>在服务器这边的话配置的话，可以在页面里加js脚本，也可以在后端程序里写重定向，当然也可以在web服务器来实现跳转。Nginx是支持rewrite的（只要在编译的时候没有去掉pcre）</li>
<li>在http的server里增加<code>rewrite ^(.*) https://$host$1 permanent</code>;</li>
<li>这样就可以实现80进来的请求，重定向为https了。</li>
</ul>
<h2 id="Tomcat-证书部署"><a href="#Tomcat-证书部署" class="headerlink" title="Tomcat 证书部署"></a>Tomcat 证书部署</h2><h3 id="文件准备-2"><a href="#文件准备-2" class="headerlink" title="文件准备"></a>文件准备</h3><p><img src="//image.joylau.cn/blog/Tomcatssl.png" alt="Nginx"></p>
<h3 id="获取证书-2"><a href="#获取证书-2" class="headerlink" title="获取证书"></a>获取证书</h3><ul>
<li>如果申请证书时有填写私钥密码，下载可获得Tomcat文件夹，其中有密钥库 <a href="http://www.domain.com.jks；" target="_blank" rel="noopener">www.domain.com.jks；</a></li>
<li>如果没有填写私钥密码，不提供Tomcat证书文件的下载，需要用户手动转换格式生成。</li>
<li>可以通过 Nginx 文件夹内证书文件和私钥文件生成jks格式证书</li>
<li>转换工具：<a href="https://www.trustasia.com/tools/cert-converter.htm" target="_blank" rel="noopener">https://www.trustasia.com/tools/cert-converter.htm</a></li>
<li>使用工具时注意填写 密钥库密码 ，安装证书时配置文件中需要填写。</li>
</ul>
<h3 id="证书安装-2"><a href="#证书安装-2" class="headerlink" title="证书安装"></a>证书安装</h3><ul>
<li>配置SSL连接器，将<a href="http://www.domain.com.jks文件存放到conf目录下，然后配置同目录下的server.xml文件：" target="_blank" rel="noopener">www.domain.com.jks文件存放到conf目录下，然后配置同目录下的server.xml文件：</a>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"443"</span> protocol=<span class="string">"HTTP/1.1"</span> SSLEnabled=<span class="string">"true"</span></span><br><span class="line">    maxThreads=<span class="string">"150"</span> scheme=<span class="string">"https"</span> secure=<span class="string">"true"</span></span><br><span class="line">    keystoreFile=<span class="string">"conf\www.domain.com.jks"</span></span><br><span class="line">    keystorePass=<span class="string">"changeit"</span></span><br><span class="line">    clientAuth=<span class="string">"false"</span> sslProtocol=<span class="string">"TLS"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注：</p>
<ul>
<li><code>clientAuth</code>        如果设为true，表示Tomcat要求所有的SSL客户出示安全证书，对SSL客户进行身份验证</li>
<li><code>keystoreFile</code>    指定keystore文件的存放位置，可以指定绝对路径，也可以指定相对于 （Tomcat安装目录）环境变量的相对路径。如果此项没有设定，默认情况下，Tomcat将从当前操作系统用户的用户目录下读取名为 “.keystore”的文件。</li>
<li><code>keystorePass</code>    密钥库密码，指定keystore的密码。（如果申请证书时有填写私钥密码，密钥库密码即私钥密码）</li>
<li><code>sslProtocol</code>     指定套接字（Socket）使用的加密/解密协议，默认值为TLS</li>
</ul>
<h3 id="http自动跳转https的安全配置"><a href="#http自动跳转https的安全配置" class="headerlink" title="http自动跳转https的安全配置"></a>http自动跳转https的安全配置</h3><ul>
<li>到conf目录下的web.xml。在后面，，也就是倒数第二段里，加上这样一段  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-resource-collection &gt;</span><br><span class="line">    &lt;web-resource-name &gt;SSL&lt;/web-resource-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/web-resource-collection&gt;</span><br><span class="line">&lt;user-data-constraint&gt;</span><br><span class="line">    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;</span><br><span class="line">&lt;/user-data-constraint&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>这步目的是让非ssl的connector跳转到ssl的connector去。所以还需要前往server.xml进行配置：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">    connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">    redirectPort=<span class="string">"443"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>redirectPort改成ssl的connector的端口443，重启后便会生效。</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>由于我域名是托管到腾讯云上的，各个服务器的SSL文件均在腾讯云平台上下载的。</li>
<li>各个服务器亲测可用</li>
</ul>]]></content>
      
        <categories>
            
            <category> 服务器篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Tomcat </tag>
            
            <tag> SSL </tag>
            
            <tag> HTTPS </tag>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat服务器添加多个Root项目]]></title>
      <url>http://blog.joylau.cn/2017/02/20/TomcatMulti-Root/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/tomcat.jpg" alt="Tomcat"></p>
<h2 id="事发起因"><a href="#事发起因" class="headerlink" title="事发起因"></a>事发起因</h2><ul>
<li>只有一台云服务器</li>
<li>服务器配置较低，只能开一台Server</li>
<li>对外只想提供80及443端口</li>
<li>想把2个项目放到一个更目录下</li>
<li>2个项目想用不同的二级域名来访问：<ul>
<li><a href="http://www.joylau.cn" target="_blank" rel="noopener">http://www.joylau.cn</a>想放我的个人主页</li>
<li><a href="http://blog.joylau.cn">http://blog.joylau.cn</a>想放我的博客</li>
<li><a href="http://life.joylau.cn" target="_blank" rel="noopener">http://life.joylau.cn</a>想放我的生活站</li>
</ul>
</li>
</ul>
<h2 id="事发经过"><a href="#事发经过" class="headerlink" title="事发经过"></a>事发经过</h2><h3 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h3><ul>
<li>在Tomcat的根目录下建立blog文件夹<br><img src="//image.joylau.cn/blog/floder1.png" alt="blog文件夹"></li>
<li>在blog文件夹下建立ROOT文件夹，用作新项目的根路径<br><img src="//image.joylau.cn/blog/folder2.png" alt="ROOT文件夹"></li>
</ul>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul>
<li>修改server.xml配置文件,多加一对<host></host>配置  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;Engine name=<span class="string">"Catalina"</span> defaultHost=<span class="string">"localhost"</span>&gt;</span><br><span class="line">      &lt;Realm className=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span><br><span class="line">        &lt;Realm className=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span><br><span class="line">               resourceName=<span class="string">"UserDatabase"</span>/&gt;</span><br><span class="line">      &lt;/Realm&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Host name=<span class="string">"localhost"</span>  appBase=<span class="string">"webapps"</span></span><br><span class="line">            unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;Valve className=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> directory=<span class="string">"logs"</span></span><br><span class="line">               prefix=<span class="string">"localhost_access_log"</span> suffix=<span class="string">".txt"</span></span><br><span class="line">               pattern=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">	  </span><br><span class="line">	  &lt;Host name=<span class="string">"blog.joylau.cn"</span>  appBase=<span class="string">"blog"</span></span><br><span class="line">            unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">	    &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="事发结果"><a href="#事发结果" class="headerlink" title="事发结果"></a>事发结果</h2><ul>
<li>重启服务器，问题解决。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>建立新的文件夹的时候一定要保证和webapps在同一级目录，以备在server.xml文件里路径被识别</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="Tomcat开启压缩资源文件功能"><a href="#Tomcat开启压缩资源文件功能" class="headerlink" title="Tomcat开启压缩资源文件功能"></a>Tomcat开启压缩资源文件功能</h3><ul>
<li>原理<br>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求服务器对应资源后，从服务器端将资源文件压缩，再输出到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML ,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率也很高。</li>
<li>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"80"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">               connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">               redirectPort=<span class="string">"443"</span> compression=<span class="string">"on"</span></span><br><span class="line">                    compressionMinSize=<span class="string">"2048"</span></span><br><span class="line">                    noCompressionUserAgents=<span class="string">"gozilla,traviata"</span></span><br><span class="line">                    compressableMimeType=<span class="string">"text/html,text/xml,text/javascript,application/x-javascript,application/javascript,text/css,text/plain"</span>/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>参数说明<ul>
<li>compression=”on” 打开压缩功能</li>
<li>compressionMinSize=”50” 启用压缩的输出内容大小，默认为2KB </li>
<li>noCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩 </li>
<li>compressableMimeType=”text/html,text/xml,text/javascript,text/css,text/plain”　哪些资源类型需要压缩</li>
</ul>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> 服务器篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> GZIP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://blog.joylau.cn/2017/01/01/HelloWorld/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="//image.joylau.cn/blog/world.jpg" alt="HelloWorld"></p>
<h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><h3 id="搭建一个自己博客的想法"><a href="#搭建一个自己博客的想法" class="headerlink" title="搭建一个自己博客的想法"></a>搭建一个自己博客的想法</h3><ul>
<li>其实在老早以前自己就有搭建一个自己博客的想法，中途也搭建尝试自己动手操作过，但是好几次都半途而废了。<br>在这期间主要的原因是自己平时没有那么多的时间，这也许跟我自己的想法有关系，原先我认为搭建一个博客就类似于开发一套管理系统，要有前台页面，后台管理…</li>
<li>我本身是做Java后端开发的，虽然说在实际的项目中大部分都是Web项目，但是要我自己真正的写一套前台页面，对我来说真的是很难。</li>
<li>我也从网站找过很多的博客类模板，并自己动手开发过，花了不少的时间，时间越久，发现很多都是不符合自己的想法的。这时我意识到之前的想法错了，或者说过于陈旧了。</li>
</ul>
<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><ul>
<li>再后来自己动手搭过很出名的<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>博客系统，<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>是基于<code>PHP</code>开发的。<br>期间还研究了一段时间的<code>PHP</code>，搭好过后换着主题玩了一段时间，后来想二次开发一些自己的东西，但是无从下手啊…..于是这个就没再玩了…</li>
</ul>
<h3 id="Solo"><a href="#Solo" class="headerlink" title="Solo"></a>Solo</h3><ul>
<li><a href="https://github.com/b3log/solo" target="_blank" rel="noopener">Solo</a>这个词儿肯定很熟悉，当然了不是LOL里面的solo，这个一个完全开源的Java博客系统，在GitHub上找一下就知道，<br>Solo 是目前 GitHub 上关注度最高的 Java 开源博客系统，在GitHub上是start最多的。clone下来用着还真算不错。后来在里面发现一款主题，和我现在博客使用的很像。<br>顺藤摸瓜，于是有了现在的这套博客系统….</li>
</ul>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><ul>
<li>Hexo 的中文官网：<a href="http://hexo.io/zh-cn/" target="_blank" rel="noopener">http://hexo.io/zh-cn/</a></li>
<li>官网的介绍是这样的：<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
</li>
<li>而我是这么理解的：<blockquote>
<p>用Github + Hexo + Nodejs搭建的博客,把逼格一下提到了凡人不可企及的高度。</p>
</blockquote>
</li>
<li>当我打开官网的文档查阅后，发现了这个很有意思的搭建方式，不需要花那么多的时间去做开发，直接专注的写好自己的技术博客就可以，而且还可以基于<code>Bootstrap</code>生成移动端和网页端都可以兼容的页面。</li>
<li>我觉得很有搞头，于是决定马上动手搭建起来……</li>
</ul>
<h2 id="动手干活"><a href="#动手干活" class="headerlink" title="动手干活"></a>动手干活</h2><h3 id="所需工具软件"><a href="#所需工具软件" class="headerlink" title="所需工具软件"></a>所需工具软件</h3><ul>
<li>git : <a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a></li>
<li>Nodejs : <a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a></li>
<li>Hexo ： <a href="http://hexo.io/zh-cn/" target="_blank" rel="noopener">http://hexo.io/zh-cn/</a></li>
</ul>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><ul>
<li>git和Nodejs的下载和安装过程就不说了</li>
</ul>
<ul>
<li>Node.js 官方源默认是：<a href="http://registry.npmjs.org，" target="_blank" rel="noopener">http://registry.npmjs.org，</a>  但是由于在国外，说不定你使用的时候就抽风无法下载任何软件。所以我们决定暂时使用淘宝提供的源，淘宝源官网：<a href="http://npm.taobao.org/，" target="_blank" rel="noopener">http://npm.taobao.org/，</a> (然而比较坑爹的是公司的网络将与taobao相关的域名都和谐掉了)<br>在 Git Bash 中我们执行下面这一句<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>接下来就是使用cnmp命令了，值得注意的是：cnmp这个命令是临时的，当窗口关闭下次再打开就不会再生效了，于是每次你都需要执行以下这个命令。</li>
<li>检测安装是否成功 <code>cnpm info express</code>,若成功会有一大串的信息提示。</li>
<li>安装Hexo  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建Hexo项目  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//打开到hexo的根目录</span><br><span class="line"><span class="built_in">cd</span> h:/hexo</span><br><span class="line">hexo init</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>启动Hexo服务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h3><ul>
<li>浏览器访问：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li>
<li>搭建结束搭建完之后可以修改自定义的配置文件 <code>_config.yml</code> ，以及更换成自己想要的主题 <code>themes</code>。</li>
</ul>
<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><ul>
<li>编辑这个文件：<code>node_modules/hexo-generator-index/lib/generator.js</code></li>
<li>覆盖原文件内容，采用下面内容：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>然后在文章头部的：Front-matter 位置加上一个：top: 1000 的内容。数值越大，越靠前</li>
</ul>
<h3 id="文章推送"><a href="#文章推送" class="headerlink" title="文章推送"></a>文章推送</h3><ul>
<li>安装git插件 ： npm install hexo-deployer-git –save</li>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/JoyLau/blog-public.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<ul>
<li>使用方式： hexo g -d ,会自动推送到上面配置的github地址,分支名为 master 默认的分支名为gh-page</li>
</ul>
<h2 id="博客建设"><a href="#博客建设" class="headerlink" title="博客建设"></a>博客建设</h2><h3 id="博客用途"><a href="#博客用途" class="headerlink" title="博客用途"></a>博客用途</h3><ul>
<li>整理一些在项目中用到的小知识或者技术点做一个总结及叙述，希望通过这些记录，能够将自己的学习成果归纳出来，与大家分享交流，同时能够对这些技术进行备忘，以便日后查询</li>
</ul>
<h3 id="以后建设"><a href="#以后建设" class="headerlink" title="以后建设"></a>以后建设</h3><ul>
<li>这个博客只用作技术记录。</li>
<li>自己打算再开一个专门记录生活的博客站，域名都起好了：<a href="http://life.joylau.cn" target="_blank" rel="noopener">http://life.joylau.cn</a>  (<strong><code>已弃用</code></strong>，发现真心没那么多时间去搞很多东西)</li>
</ul>]]></content>
      
        <categories>
            
            <category> 开始篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Nodejs </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
