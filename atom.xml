<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2017-10-20T01:03:34.326Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源许可证</title>
    <link href="http://blog.joylau.cn/2017/10/20/Open-Source-License/"/>
    <id>http://blog.joylau.cn/2017/10/20/Open-Source-License/</id>
    <published>2017-10-20T01:02:28.000Z</published>
    <updated>2017-10-20T01:03:34.326Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><blockquote><p>本文转自 <a href="http://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html" target="_blank" rel="external">阮一峰- 开源许可证教程</a></p></blockquote></blockquote><h2 id="开源许可证教程"><a href="#开源许可证教程" class="headerlink" title="开源许可证教程"></a>开源许可证教程</h2><p>作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。</p><p>许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （<a href="https://opensource.com/article/17/9/9-open-source-software-rules-startups" target="_blank" rel="external">1</a>，<a href="https://opensource.com/article/17/9/open-source-licensing" target="_blank" rel="external">2</a>）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017101101.jpg" alt=""></p><h2 id="一、什么是开源许可证"><a href="#一、什么是开源许可证" class="headerlink" title="一、什么是开源许可证"></a>一、什么是开源许可证</h2><p>开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。</p><p>版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。</p><h2 id="二、开源许可证的种类"><a href="#二、开源许可证的种类" class="headerlink" title="二、开源许可证的种类"></a>二、开源许可证的种类</h2><p>目前，国际公认的开源许可证共有<a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">80多种</a>。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。</p><p>如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入“公共领域”（public domain）。</p><p>根据使用条件的不同，开源许可证分成两大类。</p><blockquote><ul><li>宽松式（permissive）许可证</li><li>Copyleft 许可证</li></ul></blockquote><h2 id="三、宽松式许可证"><a href="#三、宽松式许可证" class="headerlink" title="三、宽松式许可证"></a>三、宽松式许可证</h2><h3 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h3><p>宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。</p><p>它有三个基本特点。</p><p><strong>（1）没有使用限制</strong></p><p>用户可以使用代码，做任何想做的事情。</p><p><strong>（2）没有担保</strong></p><p>不保证代码质量，用户自担风险。</p><p><strong>（3）披露要求（notice requirement）</strong></p><p>用户必须披露原始作者。</p><h3 id="3-2-常见许可证"><a href="#3-2-常见许可证" class="headerlink" title="3.2 常见许可证"></a>3.2 常见许可证</h3><p>常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。</p><p><strong>（1）BSD（二条款版）</strong></p><p>分发软件时，必须保留原始的许可证声明。</p><p><strong>（2） BSD（三条款版）</strong></p><p>分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。</p><p><strong>（3）MIT</strong></p><p>分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。</p><p><strong>（4）Apache 2</strong></p><p>分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。</p><h2 id="四、Copyleft-许可证"><a href="#四、Copyleft-许可证" class="headerlink" title="四、Copyleft 许可证"></a>四、Copyleft 许可证</h2><h3 id="4-1-Copyleft-的含义"><a href="#4-1-Copyleft-的含义" class="headerlink" title="4.1 Copyleft 的含义"></a>4.1 Copyleft 的含义</h3><p>Copyleft 是<a href="http://www.ruanyifeng.com/blog/2005/03/post_112.html" target="_blank" rel="external">理查德·斯托曼</a>发明的一个词，作为 Copyright （版权）的反义词。</p><p>Copyright 直译是“复制权”，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。</p><p>但是，它带有前提条件，比宽松式许可证的限制要多。</p><blockquote><ul><li>如果分发二进制格式，必须提供源码</li><li>修改后的源码，必须与修改前保持许可证一致</li><li>不得在原始许可证以外，附加其他限制</li></ul></blockquote><p>上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。 </p><h3 id="4-2-常见许可证"><a href="#4-2-常见许可证" class="headerlink" title="4.2 常见许可证"></a>4.2 常见许可证</h3><p>常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。</p><p><strong>（1）Affero GPL (AGPL)</strong></p><p>如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。</p><p><strong>（2）GPL</strong></p><p>如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证。</p><p><strong>（3）LGPL</strong></p><p>如果项目采用动态链接调用该许可证的库，项目可以不用开源。</p><p><strong>（4）Mozilla（MPL）</strong></p><p>只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源。</p><h2 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h2><p>本节回答一些开源许可证的常见问题。</p><h3 id="5-1-什么叫分发（distribution）？"><a href="#5-1-什么叫分发（distribution）？" class="headerlink" title="5.1 什么叫分发（distribution）？"></a>5.1 什么叫分发（distribution）？</h3><p>除了 Affero GPL (AGPL) ，其他许可证都规定只有在“分发”时，才需要遵守许可证。换言之，如果不“分发”，就不需要遵守。</p><p>简单说，分发就是指将版权作品从一个人转移到另一个人。这意味着，如果你是自己使用，不提供给他人，就没有分发。另外，这里的“人”也指“法人”，因此如果使用方是公司，且只在公司内部使用，也不需要遵守许可证。</p><p>云服务（SaaS）是否构成“分发”呢？答案是不构成。所以你使用开源软件提供云服务，不必提供源码。但是，Affero GPL (AGPL) 许可证除外，它规定云服务也必须提供源码。</p><h3 id="5-2-开源软件的专利如何处理？"><a href="#5-2-开源软件的专利如何处理？" class="headerlink" title="5.2 开源软件的专利如何处理？"></a>5.2 开源软件的专利如何处理？</h3><p>某些许可证（Apache 2 和 GPL v3）包含明确的条款，授予用户许可，使用软件所包含的所有专利。</p><p>另一些许可证（BSD、MIT 和 GPL v2）根本没提到专利。但是一般认为，它们默认给予用户专利许可，不构成侵犯专利。</p><p>总得来说，除非有明确的“保留专利”的条款，使用开源软件都不会构成侵犯专利。</p><h3 id="5-3-什么是披露要求？"><a href="#5-3-什么是披露要求？" class="headerlink" title="5.3 什么是披露要求？"></a>5.3 什么是披露要求？</h3><p>所有的开源许可证都带有“披露要求”（notice requirement），即要求软件的分发者必须向用户披露，软件里面有开源代码。</p><p>一般来说，你只要在软件里面提供完整的原始许可证文本，并且披露原始作者，就满足了“披露要求”。</p><h3 id="5-4-GPL-病毒是真的吗？"><a href="#5-4-GPL-病毒是真的吗？" class="headerlink" title="5.4  GPL 病毒是真的吗？"></a>5.4  GPL 病毒是真的吗？</h3><p>GPL 许可证规定，只要你的项目包含了 GPL 代码，整个项目就都变成了 GPL。有人把这种传染性比喻成“GPL 病毒”。</p><p>很多公司希望避开这个条款，既使用 GPL 软件，又不把自己的专有代码开源。理论上，这是做不到的。因为 GPL 的设计目的，就是为了防止出现这种情况。</p><p>但是实际上，不遵守 GPL，最坏情况就是被起诉。如果你向法院表示无法履行 GPL 的条件，法官只会判决你停止使用 GPL 代码（法律上叫做“停止侵害”），而不会强制要求你将源码开源，因为《版权法》里面没有相应的规定。</p>]]></content>
    
    <summary type="html">
    
      作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）
    
    </summary>
    
      <category term="开源篇" scheme="http://blog.joylau.cn/categories/%E5%BC%80%E6%BA%90%E7%AF%87/"/>
    
    
      <category term="license" scheme="http://blog.joylau.cn/tags/license/"/>
    
  </entry>
  
  <entry>
    <title>Maven --- 一款打包压缩 js css html 的Maven插件</title>
    <link href="http://blog.joylau.cn/2017/10/16/Maven-ResourceCompressor/"/>
    <id>http://blog.joylau.cn/2017/10/16/Maven-ResourceCompressor/</id>
    <published>2017-10-16T06:38:14.000Z</published>
    <updated>2017-10-16T06:41:55.046Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>pom 中引入插件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-compressor-plugins<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>resource-compressor<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>resource-compressor<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">cssConfigs</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">cssConfig</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/static/css<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.min.css<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">cssConfig</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">cssConfigs</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jsConfigs</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">jsConfig</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/static/js<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.min.js<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">munge</span>&gt;</span>true<span class="tag">&lt;/<span class="name">munge</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">jsConfig</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">jsConfigs</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">htmlConfigs</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">htmlConfig</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/templates<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">removeIntertagSpaces</span>&gt;</span>true<span class="tag">&lt;/<span class="name">removeIntertagSpaces</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">compressJavaScript</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compressJavaScript</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">compressCss</span>&gt;</span>true<span class="tag">&lt;/<span class="name">compressCss</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">htmlConfig</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">htmlConfigs</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h2><ul><li><code>phase</code> : compile 表明该插件在 compile 时调用</li><li><code>goal</code> ： 固定为 resource-compressor 不需要改变</li><li><code>cssConfigs</code> , 可配置多个 cssConfig<ul><li>cssConfig <ul><li>dir： css文件目录</li><li>include：包含的css文件，支持通配符</li><li>exclude：排除的css文件，支持通配符</li></ul></li></ul></li></ul><ul><li><code>jsConfigs</code> , 可配置多个 jsConfig<ul><li>jsConfig <ul><li>dir： js文件目录</li><li>include：包含的js文件，支持通配符</li><li>exclude：排除的js文件，支持通配符</li><li>munge: 是否进行代码混淆，缺省值为 false</li><li>preserveAllSemiColons : 保留所有的分号，缺省值为 false</li><li>disableOptimizations : 禁用自带的所有优化措施，缺省值为 false</li></ul></li></ul></li></ul><ul><li><code>htmlConfigs</code> , 可配置多个 htmlConfig<ul><li>htmlConfig <ul><li>dir： js文件目录</li><li>include：包含的js文件，支持通配符</li><li>exclude：排除的js文件，支持通配符</li><li>removeComments: 是否移除注释，缺省值为 true</li><li>removeIntertagSpaces : 是否移除标签之间的空格，缺省值为 false</li><li>compressJavaScript : 是否对html里的js代码进行压缩，缺省值为 false</li><li>compressCss : 是否对html里的css代码进行压缩，缺省值为 false</li></ul></li></ul></li></ul><h2 id="压缩信息"><a href="#压缩信息" class="headerlink" title="压缩信息"></a>压缩信息</h2><p>当看到以下图片所示的信息后，则压缩成功</p><p><img src="http://image.joylau.cn/blog/resource-compressor.png" alt="joylau-compressor-plugins"></p><p>例如 ：[INFO] common.js(8.71KB==&gt;4.58KB,47.39%)</p><p>表示 ：common.js 源文件大小8.71KB，压缩后大小 4.58KB，压缩率47.39%</p><h2 id="GitHub-地址"><a href="#GitHub-地址" class="headerlink" title="GitHub 地址"></a>GitHub 地址</h2><p>源码已开源，地址 ： <a href="https://github.com/JoyLau/joylau-compressor-plugins" target="_blank" rel="external">https://github.com/JoyLau/joylau-compressor-plugins</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://image.joylau.cn/blog/resource-compressor.png&quot; alt=&quot;joylau-compressor-plugins&quot;/&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Maven篇" scheme="http://blog.joylau.cn/categories/Maven%E7%AF%87/"/>
    
    
      <category term="Maven" scheme="http://blog.joylau.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>当鼠标移入图片上慢慢放大的效果</title>
    <link href="http://blog.joylau.cn/2017/10/13/CSS3-Image-Scale/"/>
    <id>http://blog.joylau.cn/2017/10/13/CSS3-Image-Scale/</id>
    <published>2017-10-13T07:07:54.000Z</published>
    <updated>2017-10-13T07:23:38.735Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li>今天在浏览网站时，<a href="http://ai.baidu.com/" target="_blank" rel="external">http://ai.baidu.com/</a> ，看到一个CSS3的效果:将鼠标放到图片上，图片会稍稍方大一点，当时很好奇是怎么做的</li><li>当即百度了一下，有人用js做的，有人用css做的，首先js做的肯定不够好，一看效果就是css3的效果</li><li>于是自己查看了下 这块 div 的效果</li><li>将压缩的css展开来</li><li>原来是这样的：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 鼠标移上去各浏览器的延时效果</div><div class="line"><span class="selector-class">.solution-img</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-moz-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-ms-transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-webkit-transition</span>: -webkit-transform .<span class="number">2s</span>;</div><div class="line">    <span class="attribute">transition</span>: -webkit-transform .<span class="number">2s</span>;</div><div class="line">    <span class="attribute">-moz-transition</span>: transform .<span class="number">2s</span>,-moz-transform .<span class="number">2s</span>;</div><div class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>;</div><div class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>,-webkit-transform .<span class="number">2s</span>,-moz-transform .<span class="number">2s</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 鼠标移上去各浏览器的放大倍数</div><div class="line"><span class="selector-class">.solution-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.solution-img</span> &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;http://image.joylau.cn/blog/image-scale.gif&#39; alt=&#39;image-scale&#39;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="CSS3篇" scheme="http://blog.joylau.cn/categories/CSS3%E7%AF%87/"/>
    
    
      <category term="CSS3" scheme="http://blog.joylau.cn/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Java 代码中使用 Scala</title>
    <link href="http://blog.joylau.cn/2017/09/26/Java-Scala/"/>
    <id>http://blog.joylau.cn/2017/09/26/Java-Scala/</id>
    <published>2017-09-26T03:46:26.000Z</published>
    <updated>2017-09-27T02:03:55.483Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>将 Scala 依赖 scala-library 和插件 scala-maven-plugin 添加到 Maven 项目中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-compile-first<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure><p>更新完上面的内容之后，你需要等待Maven下载完所有的依赖。</p><p>安装IDEA插件 <code>Scala</code><br>现在可以在Java工程中使用Scala代码了<br>创建新的文件夹src/main/scala；<br>Scala Maven插件将会识别这些目录，并且编译其中的Scala文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">object BooksProcessor &#123;</div><div class="line">  <span class="function">def <span class="title">filterByAuthor</span><span class="params">(author: String)</span><span class="params">(implicit books: util.ArrayList[Book])</span> </span>= &#123;</div><div class="line">    books.filter(book =&gt; book.getAuthor == author)</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
       Maven 项目中使用 Scala 代码编程
    
    </summary>
    
      <category term="Scala篇" scheme="http://blog.joylau.cn/categories/Scala%E7%AF%87/"/>
    
    
      <category term="Scala" scheme="http://blog.joylau.cn/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 推荐使用CaffeineCache</title>
    <link href="http://blog.joylau.cn/2017/09/19/SpringBoot-CaffeineCache/"/>
    <id>http://blog.joylau.cn/2017/09/19/SpringBoot-CaffeineCache/</id>
    <published>2017-09-19T10:01:43.000Z</published>
    <updated>2017-09-26T03:47:37.730Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="今天没有图片"><a href="#今天没有图片" class="headerlink" title="今天没有图片"></a>今天没有图片</h2><p>在做单系统的情况下，我还是比较喜欢使用Google 的 Guava 来做缓存的，结合 SpringBoot 使用非常简单 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>再配置 yml ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spirng:</div><div class="line">    cache:</div><div class="line">        type: guava</div><div class="line">        cache-names: api_cache</div><div class="line">        guava:</div><div class="line">          spec: maximumSize=300,expireAfterWrite=2m</div></pre></td></tr></table></figure><p>上述配置了一个 缓存名为 api_cache 的缓存 ，最大数量为300，超时时间为2分钟</p><p>接下来，在类中使用注解 @CacheConfig(cacheNames = “api_cache”) 来配置整个类的配置<br>@Cacheable() 注解在方法上来 开启方法的注解</p><p>使用很透明</p><p>今天再次使用时发现guava.spec提示过期了，查了下文档,文档原话是这样说的：</p><blockquote><blockquote><p>@Deprecated<br>           @DeprecatedConfigurationProperty(<br>               reason = “Caffeine will supersede the Guava support in Spring Boot 2.0”,<br>               replacement = “spring.cache.caffeine.spec”<br>           )</p></blockquote></blockquote><p>原来，在SpringBoot2.0中推荐使用Caffeine，表达式就是spring.cache.caffeine.spec</p><p>更改的方法很简单，改下依赖包，换个配置名，又可以愉快的额使用了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>更新配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spirng:</div><div class="line">    cache:</div><div class="line">        <span class="built_in">type</span>: caffeine</div><div class="line">        cache-names: api_cache</div><div class="line">        caffeine:</div><div class="line">          spec: maximumSize=300,expireAfterWrite=2m</div></pre></td></tr></table></figure><p>通常SpringBoot默认的keyGenerator 是SimpleKeyGenerator，这个策略是以参数作为key值，如果参数为空的，就会返回SimpleKey[]字符串，这对于很多无参的方法的就有问题了<br>我们需要重新这个keyGenerator，实现 <code>org.springframework.cache.interceptor.keyGenerator</code> 这个接口即可，将key值设置为类名+方法名+参数名，这样就不会冲突了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">caffeineKeyGenerator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (target, method, params) -&gt; &#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(target.getClass().getName());</div><div class="line">        sb.append(method.getName());</div><div class="line">        <span class="keyword">for</span> (Object obj : params) &#123;</div><div class="line">            sb.append(obj.toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>感觉无缝切换，继续使用吧！！！</p>]]></content>
    
    <summary type="html">
    
      在做单系统的情况下，我还是比较喜欢使用Google 的 Guava 来做缓存的，结合 SpringBoot 使用非常简单
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JoyGame --- 一个情怀游戏平台</title>
    <link href="http://blog.joylau.cn/2017/09/11/JoyGame/"/>
    <id>http://blog.joylau.cn/2017/09/11/JoyGame/</id>
    <published>2017-09-11T06:26:53.000Z</published>
    <updated>2017-09-11T08:01:34.957Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="制作背景"><a href="#制作背景" class="headerlink" title="制作背景"></a>制作背景</h2><ul><li>有时候宅在家里实在不知道玩什么游戏</li><li>英雄联盟都玩烂了</li><li>哥们提议玩红警</li><li>红警是单机啊，一个人玩另一个人怎么办，一个人打电脑有啥意思 =_=|</li><li>找对战平台啊，首先下载安装了红警玩家自制的战网对战平台</li><li>我个人电脑从来不安装杀毒软件，Windows Defender 一直报毒搞个不停</li><li>战网的平台体验也很不好，消息弹个不停，感觉像广告软件</li><li>后来换了腾讯对战平台，进入红警起个名字老说含有敏感信息，结果起了半个小时，MDZZ</li><li>决定自己了解下对战平台的原理，打算自己写个简单好用的玩</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过socket hook + udp，针对war3来说，支持tcp，先在本地通过hook模拟建立tcp连接，然后将tcp的数据转成外网udp数据发给外网服务器转发给其他客户端，客户端接收到后通过本地tcp模拟连接转发到游戏进程。这个过程中通过中转服务器协助进行p2p。</p><center><img src="//image.joylau.cn/blog/JoyGame-zhihu.jpg" alt="JoyGame-zhihu"></center><p>上面是知乎上的回答<br>用我自己的话说就是</p><blockquote><blockquote><p>使用JoyGameClient客户端，在本地创建了一个虚拟的IP地址，每一个客户端通过连接远程服务器形成了一个虚拟局域网，这样在游戏的【局域网】选择项中就能找到彼此，这样自然一方创建一个游戏，其他人都可以加入进来了就能愉快的玩耍了。底层通信使用的就是TCP和UDP连接，在同一个房间的玩家都会向服务器发送和下载游戏的实时数据。服务器会向房间里的玩家的客户端上转发数据包，这样就间接形成了一个局域网，就能在一起玩游戏啦。</p></blockquote></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>解压，打开JoyGameClient.exe</li><li>选择中间的网络服务器,因为你本地肯定是没有服务端的，只能连接远程部署好的服务器<center><img src="//image.joylau.cn/blog/JoyGame-login.png" alt="JoyGame-Login"></center></li><li>没有账号，就注册一个账号，注册成功后登录平台<center><img src="//image.joylau.cn/blog/JoyGame-main.png" alt="JoyGame-Login"></center></li><li>这是主界面</li><li>接下来进入一个你想玩的游戏的房间</li><li>设置你的游戏启动主程序<center><img src="//image.joylau.cn/blog/JoyGame-setGamePath.png" alt="JoyGame-Login"></center></li><li>下面可以设置启动时游戏的参数，比如玩红警时，加入参数 -win，可以窗口启动</li><li>之后点启动，进入游戏就可找到在一个房间的小伙伴了</li><li>使用都很简单，看一遍就会</li></ul><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul><li>可以聊天，发表情，可以加好友。。。额，这些好像没有什么特色</li><li><strong><code>可以作弊</code></strong>！！！ 该平台只实现了虚拟局域网的互通，并没有考虑游戏的平衡性，因此你可以在网上下载相应的修改器进行作弊，哥们跟我玩红警，到现在他都不知道为什么盘盘都输给我，<center><img src="//image.joylau.cn/aodamiao/02.jpg" alt="JoyGame-Login"></center></li></ul><h2 id="我想说"><a href="#我想说" class="headerlink" title="我想说"></a>我想说</h2><p>如果你想玩玩以前的一些怀旧游戏，或者你想看看该平台是如何操作实现联机的，还等什么，跟着Joy一起来玩吧<br>私聊我可以给你开个 VIP 、等级直接升到将军哦！虽然没什么用，纯粹装*</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>JoyGame平台下载： <a href="http://image.joylau.cn/blog/JoyGameClient.rar" target="_blank" rel="external">JoyGameClient.rar</a></li><li>魔兽争霸3冰封王座v1.26绿色版： <a href="https://pan.baidu.com/share/link?shareid=3779529435&amp;uk=1077172855" target="_blank" rel="external">百度网盘</a></li><li>红警2共和国之辉：<a href="https://pan.baidu.com/s/1pKQ0aaJ" target="_blank" rel="external">百度网盘</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;//image.joylau.cn/blog/JoyGame-login.png&quot; alt=&quot;JoyGame&quot;&gt;&lt;/center&gt;  &lt;br&gt;最近和哥们玩起了以前的很多经典单机游戏，比如红警2，魔兽...&lt;br&gt;像这些游戏都支持局域网对战&lt;br&gt;于是有了这样一个平台的诞生 ---- JoyGame
    
    </summary>
    
      <category term="程序员篇" scheme="http://blog.joylau.cn/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AF%87/"/>
    
    
      <category term="程序员" scheme="http://blog.joylau.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="技能" scheme="http://blog.joylau.cn/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>人生从未写过如此有趣的代码</title>
    <link href="http://blog.joylau.cn/2017/09/04/An-Interesting-Code/"/>
    <id>http://blog.joylau.cn/2017/09/04/An-Interesting-Code/</id>
    <published>2017-09-04T02:02:58.000Z</published>
    <updated>2017-09-11T06:59:24.338Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><center><br><img src="//image.joylau.cn/blog/an-interesting-code-img1.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code-img2.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code-img3.png" alt="an-interesting-code"><br><img src="//image.joylau.cn/blog/an-interesting-code.png" alt="an-interesting-code"><br></center><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.joylau.code.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by JoyLau on 2017/9/4.</div><div class="line"> * cn.joylau.code.test</div><div class="line"> * 2587038142@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">/*定义老妈对象*/</span></div><div class="line">        Mother mother = <span class="keyword">new</span> Mother();</div><div class="line">        <span class="comment">/*定义老婆对象*/</span></div><div class="line">        Wife wife = <span class="keyword">new</span> Wife();</div><div class="line">        <span class="comment">/*开始解释昨晚发生的事情*/</span></div><div class="line">        <span class="comment">//返回老婆解释的结果（成功 或者失败）</span></div><div class="line">        <span class="keyword">boolean</span> w_success = explainToMotherOrWife(wife);</div><div class="line">        <span class="comment">//返回老妈解释的结果（成功 或者失败）</span></div><div class="line">        <span class="keyword">boolean</span> m_success = explainToMotherOrWife(mother);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 如果解释都成功了</span></div><div class="line">            <span class="keyword">if</span> (w_success &amp;&amp; m_success)&#123;</div><div class="line">                <span class="comment">// 愉快的吃晚饭</span></div><div class="line">            &#125; <span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">// 如果有一方解释失败</span></div><div class="line">                <span class="comment">//开始开家庭会议，已达成一致意见</span></div><div class="line">                familyMetting();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// 如果过程中出现任何异常，程序将无法处理，抛出异常，你将会很痛苦</span></div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="comment">// 这个时候为了缓解你的痛苦，程序为你准备了一种放松的方法</span></div><div class="line">            <span class="comment">// 和法哥来一把激动人心的 LOL</span></div><div class="line">            playLOLWithFa();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向 老妈 或者 老婆 解释 昨晚发生的事情</div><div class="line">     * <span class="doctag">@param</span> object 老妈 或者 老婆</div><div class="line">     * <span class="doctag">@return</span> 解释是否成功</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">explainToMotherOrWife</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">        <span class="comment">// 如果对象是 老妈,则向老妈开始解释</span></div><div class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Mother) &#123;</div><div class="line">            Mother mother = (Mother)object;</div><div class="line">            <span class="comment">// 解释过程</span></div><div class="line">            <span class="comment">// ......</span></div><div class="line">            <span class="comment">// 返回向老妈解释的结果</span></div><div class="line">            <span class="keyword">return</span> mother.acceptExplain();</div><div class="line">        <span class="comment">// 如果对象是老婆,则向老婆开始解释</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Wife wife = (Wife)object;</div><div class="line">            <span class="comment">// 解释过程</span></div><div class="line">            <span class="comment">// ......</span></div><div class="line">            <span class="comment">// 返回向老婆解释的结果</span></div><div class="line">            <span class="keyword">return</span> wife.acceptExplain();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开家庭会议</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">familyMetting</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"balabala"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  与法哥一起玩游戏</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">playLOLWithFa</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"PentaKill"</span>);</div><div class="line">        System.out.println(<span class="string">"66666!~"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;//image.joylau.cn/blog/an-interesting-code.png&quot; alt=&quot;an-interesting-code&quot;&gt;&lt;/center&gt;  &lt;br&gt;哥们向我请教家庭问题的解决办法，我给了他这样的代码
    
    </summary>
    
      <category term="程序员篇" scheme="http://blog.joylau.cn/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AF%87/"/>
    
    
      <category term="程序员" scheme="http://blog.joylau.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="算法" scheme="http://blog.joylau.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Maven --- 将 SpringBoot 项目做成Windows服务(Windows Service)</title>
    <link href="http://blog.joylau.cn/2017/09/04/Maven-MakeWinServiceForJar/"/>
    <id>http://blog.joylau.cn/2017/09/04/Maven-MakeWinServiceForJar/</id>
    <published>2017-09-03T17:42:26.000Z</published>
    <updated>2017-09-05T01:38:27.342Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="一款将-SpringBoot-项目做成Windows-Service-的-Maven-插件"><a href="#一款将-SpringBoot-项目做成Windows-Service-的-Maven-插件" class="headerlink" title="一款将 SpringBoot 项目做成Windows Service 的 Maven 插件"></a>一款将 SpringBoot 项目做成Windows Service 的 Maven 插件</h1><blockquote><blockquote><p>包括但不限于 SpringBoot ,任何打成 java jar 包运行的 Maven 项目都可以使用</p></blockquote></blockquote><h2 id="编写初衷"><a href="#编写初衷" class="headerlink" title="编写初衷"></a>编写初衷</h2><ul><li>公司有个项目</li><li>Java 部分的全部使用的是SpringBoot</li><li>该项目的部署环境是 Windows</li><li>公司想把 各个 SpringBoot 的模块托管一下</li><li>托管的使用方式要简单，易用，测试在打包部署的时候要很容易上手</li><li>期间尝试过 Spring Boot Admin 和 Jenkins,都说不好用…</li><li>于是就想着 将Spring Boot 的服务制作成 Windows 服务，这样基本上会操作电脑的人都会使用了，够简单易用的了吧</li><li>花了一上午时间将其中一个 Spring Boot 模块制作成了 Windows Service</li><li>发现再做其他的模块的时候，很多工作都是重复的，心想着能够将这个功能提取出来就好了</li><li>于是就写了这个 Maven 插件</li></ul><h2 id="使用演示地址："><a href="#使用演示地址：" class="headerlink" title="使用演示地址："></a>使用演示地址：</h2><center><video src="http://image.joylau.cn/blog/joylau-springboot-daemon-service-video.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center><h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><ul><li>使用方法很简单，和普通的 Maven 插件一样使用就可以了，如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-springboot-daemon-windows<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>注意：</p><ol><li>这里的 phase 写的是 package,意思是该插件在 mvn package 的时候调用,你也可以根据不同的需求来更改，比如 install, test等等</li><li>goal 写 make-win-service 就可以了，不需要改动</li><li>一般情况下我们的SpringBoot项目会有其他父项目，这时打包会使用 spring-boot-maven-plugin 插件的 repackage,这样的情况的话，请将该插件放置最后面,否则服务运行的话将提示没有主属性</li></ol><ul><li>在你的项目中按照以上的方式引入插件后，现在可以 打包了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package</div></pre></td></tr></table></figure></li></ul><p>打包过程中，看到如下日志信息，便制作成功了：<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-package-info.jpg" alt="joylau-springboot-daemon-windows-package-info"></p><p>此时，在你项目的target目录下会生成一个 jar 包名字 一样的压缩包<br>进入文件夹，解压这个压缩包，你会看见如下内容的文件<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-package-file.jpg" alt="joylau-springboot-daemon-windows-package-file"><br>注意：</p><ol><li>5个 bat 文件，请右键以管理员的身份运行</li><li>各文件的文件名无特殊情况，不需要修改</li><li>一旦安装成了 Windows 服务，目录下的文件就不要移动了</li><li>命令运行时，可能会提示安装.NET,安装完成就可运行命令了，不过现在大部分的 Windows 服务器或者个人电脑都会默认安装了.NET,没有的话启用一下就好了，如下图：<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-windows-.net.jpg" alt="joylau-springboot-daemon-windows-.NET"></li><li>运行各个命令是注意提示信息，例如卸载完服务都的状态为NonExistent，刚安装完服务后的状态为Stopped，服务成功启动的状态为Started…等等<br><img src="http://image.joylau.cn/blog/joylau-springboot-daemon-service-status.jpg" alt="joylau-springboot-daemon-windows-service-status"></li></ol><h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><p>想要在服务启动时添加自定义参数,如 SpringBoot 的配置参数或者 JMV 参数？<br>像如下配置即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.joylau.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joylau-springboot-daemon-windows<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>make-win-service<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>--server.port=9090<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p><p>上面配置了一个 Spring Boot 应用的启动端口9090</p><h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul><li>打包使用过程中需要联网</li><li>文档中有些图片可能看不到，再次刷新下页面就可以</li><li>服务的id为artifactId，服务的名称为artifactId+version，服务的描述为description</li></ul><h2 id="GitHub-地址"><a href="#GitHub-地址" class="headerlink" title="GitHub 地址"></a>GitHub 地址</h2><p>源码已开源，地址 ： <a href="https://github.com/JoyLau/joylau-springboot-daemon-windows" target="_blank" rel="external">https://github.com/JoyLau/joylau-springboot-daemon-windows</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;video src=&quot;http://image.joylau.cn/blog/joylau-springboot-daemon-service-video.mp4&quot; loop=&quot;true&quot; controls=&quot;controls&quot;&gt;您的浏览器版本太低，无法观看本视频&lt;/video&gt;&lt;/center&gt;  &lt;br&gt;一款将 SpringBoot 项目做成Windows Service 的 Maven 插件&lt;br&gt;包括但不限于 SpringBoot ,任何打成 java jar 包运行的 Maven 项目都可以使用
    
    </summary>
    
      <category term="Maven篇" scheme="http://blog.joylau.cn/categories/Maven%E7%AF%87/"/>
    
    
      <category term="Maven" scheme="http://blog.joylau.cn/tags/Maven/"/>
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ NoReferer篇 ）</title>
    <link href="http://blog.joylau.cn/2017/08/29/SpringBoot-JoyMedia-NoReferer/"/>
    <id>http://blog.joylau.cn/2017/08/29/SpringBoot-JoyMedia-NoReferer/</id>
    <published>2017-08-29T03:13:24.000Z</published>
    <updated>2017-08-30T08:25:48.308Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><center><br><img src="//image.joylau.cn/blog/joymusic-mv-noreferer.png" alt="JoyMusic-NoReferer"><br><img src="//image.joylau.cn/blog/joymusic-mv-video-small.gif" alt="JoyMusic-NoReferer"><br><img src="//image.joylau.cn/blog/joymusic-mv-video-url.gif" alt="JoyMusic-NoReferer"><br></center><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul><li><a href="//music.joylau.cn">JoyMusic</a></li></ul><h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><ul><li>为什么解析的 MV 地址无法直接播放，在上一篇文章上我也说明了</li><li>相应的解决办法我在上一篇文章上也说明了</li><li>这样的方法有很明显的缺点，在上一篇文章也说明了</li><li>这个方法只能实现播放的功能，但是距离完美或者说好的展示效果来说，并不满意</li><li>我自己就很不满意</li></ul><h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><h3 id="先说下我是怎么解决的"><a href="#先说下我是怎么解决的" class="headerlink" title="先说下我是怎么解决的"></a>先说下我是怎么解决的</h3><ul><li>解决的方法还是一样：去除referer</li><li>同时去除了原来使用的jPlayer播放器，因为这个播放器在移动设备下的表现并不是很好，现在改为浏览器自带的视频播放空控件</li><li>这个东西就没有什么兼容性了，只要IE10 以上支持HTML5 的都可以观看</li><li>正如上面我截图所示的那样，我使用的是 Safari 浏览器，表现效果还是很好的</li><li>同时也加入了一些比较棒的小功能：比如下滑看评论的时候，会出现小视频框在右下角</li><li>我个人是比较喜欢看评论的，一些音乐或者 MV 页面打开后并不是先听或者先看，都是翻到下面看看评论</li><li>这也正是我喜欢网易云音乐的原因之一，网易云音乐的评论大部分都很精彩，有时候听歌不如看评论</li></ul><h3 id="现在是怎么在页面上去除referer的？"><a href="#现在是怎么在页面上去除referer的？" class="headerlink" title="现在是怎么在页面上去除referer的？"></a>现在是怎么在页面上去除referer的？</h3><ul><li>动态生成一个iframe,我本身是比较反对使用iframe的，因为以前使用的extjs使用的多了，都用吐了，而且性能还不是很好</li><li>但是在这里它可就起了大作用了</li><li>iframe 里的页面就放一个<code>&lt;video&gt;</code></li><li>iframe 的宽度高度及video的宽度高度都要调节好，其实这一步花了我不少时间，因为并不是所有的MV宽高的比例是一样的</li><li>iframe 的src不能直接写MV的MP4地址，因为那样的话就没有作用了</li><li>在src里写js脚本动态生成html页面，页面里面包括的之前提到的video</li><li>使用这种方法就可将网站的referer去除掉</li><li>这就类似于直接在浏览器的地址栏上输入MP4的地址然后播放</li><li>在前一篇的文章分析中，我们知道，这种方法是可以播放的</li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="动态渲染iframe："><a href="#动态渲染iframe：" class="headerlink" title="动态渲染iframe："></a>动态渲染iframe：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="string">'&lt;iframe \</span></div><div class="line">style="border 1px solid #ff0000" \</div><div class="line">scrolling="no" \</div><div class="line">frameborder="no" \</div><div class="line">allowtransparency="true" ' +</div><div class="line"><span class="comment">/*-- Adding style attribute --*/</span></div><div class="line">objectToHtmlAttributes( iframeAttributes ) +</div><div class="line"><span class="string">'id="'</span> + id + <span class="string">'" '</span> +</div><div class="line"><span class="string">'src="javascript:\'\</span></div><div class="line">&lt;!doctype html&gt;\</div><div class="line">&lt;html&gt;\</div><div class="line">&lt;head&gt;\</div><div class="line">&lt;meta http-equiv=\\\'Content-Type\\\'; content=\\\'text/html\\\'; charset=\\\'utf-8\\\'&gt;\</div><div class="line">&lt;style&gt;*&#123;margin:0;padding:0;border:0;&#125;&lt;/style&gt;\</div><div class="line">&lt;/head&gt;' +</div><div class="line"><span class="comment">/*-- Function to adapt iframe's size to content's size --*/</span></div><div class="line"><span class="string">'&lt;script&gt;\</span></div><div class="line"> function resizeWindow() &#123;\</div><div class="line">var elems  = document.getElementsByTagName(\\\'*\\\'),\</div><div class="line">width  = parent.document.getElementById(\\\'panel-c\\\').offsetWidth-7,\</div><div class="line">height = 0,\</div><div class="line">first  = document.body.firstChild,\</div><div class="line">elem;\</div><div class="line">if (first.offsetHeight &amp;&amp; first.offsetWidth) &#123;\</div><div class="line">width = first.offsetWidth;\</div><div class="line">height = first.offsetHeight;\</div><div class="line">&#125; else &#123;\</div><div class="line">for (var i in elems) &#123;\</div><div class="line">elem = elems[i];\</div><div class="line">if (!elem.offsetWidth) &#123;\</div><div class="line">continue;\</div><div class="line">&#125;\</div><div class="line">width  = Math.max(elem.offsetWidth, width);\</div><div class="line">height = Math.max(elem.offsetHeight, height);\</div><div class="line">&#125;\</div><div class="line">&#125;\</div><div class="line">var ifr = parent.document.getElementById(\\\'' + id + <span class="string">'\\\');\</span></div><div class="line">ifr.height = height;\</div><div class="line">ifr.width  = width;\</div><div class="line">&#125;;\</div><div class="line">             &lt;/script&gt;' +</div><div class="line"><span class="string">'&lt;body onload=\\\'resizeWindow()\\\'&gt;\' + decodeURIComponent(\''</span> +</div><div class="line"><span class="comment">/*-- Content --*/</span></div><div class="line"><span class="built_in">encodeURIComponent</span>(html) +</div><div class="line"><span class="string">'\') +\'&lt;/body&gt;&lt;/html&gt;\'"&gt;&lt;/iframe&gt;'</span>;</div></pre></td></tr></table></figure><p>注意这里的反斜杠不要去掉，是用来转义的，代码的样式虽然丑了点，但是并不影响使用</p><ul><li>这里面有个方法是<code>encodeURIComponent(html)</code>，这个是转义了video里面的url链接</li><li>在iframe的body加载完成后会调用<code>resizeWindow()</code>函数自适应下iframe的宽高</li><li><code>html</code>里面写的就是要放入iframe的body里的代码，这里我们放的肯定是video</li><li>于是，可以将上述代码封装成一个函数，在父页面是直接调用</li><li>封装的时候我们还可以传一些参数，比如上面的iframe的初始的宽高，style，scrolling，frameborder等等</li></ul><h3 id="扩展一下"><a href="#扩展一下" class="headerlink" title="扩展一下"></a>扩展一下</h3><ul><li>这个方式使用的是video</li><li>那么<code>&lt;img&gt;</code>呢？现在有些网站的图片也是经过了防盗链处理，这种方法也是可以实现去掉referer，直接访问图片的额</li></ul><blockquote><blockquote><p>欢迎大家来看看试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="external">http://music.joylau.cn</a>  (当前版本 v1.5)</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;//image.joylau.cn/blog/joymusic-mv-noreferer.png&quot; alt=&quot;JoyMusic-NoReferer&quot;&gt;&lt;/center&gt;&lt;br&gt;JoyMedia --- 解决上篇文章 MV 防盗链加上 referer 认证的问题&lt;br&gt;同时加上下滑看 MV 评论时,将视频缩小化到右下角,一边看 MV 一边看热评两不误
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Node.js" scheme="http://blog.joylau.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ MV篇 ）</title>
    <link href="http://blog.joylau.cn/2017/08/20/SpringBoot-JoyMedia-MV/"/>
    <id>http://blog.joylau.cn/2017/08/20/SpringBoot-JoyMedia-MV/</id>
    <published>2017-08-20T02:09:04.000Z</published>
    <updated>2017-08-24T13:14:08.543Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><center><video src="//image.joylau.cn/blog/joymusic-mv.mp4" loop="true" controls="controls" poster="//image.joylau.cn/blog/joymusic-mv-poster.png">您的浏览器版本太低，无法观看本视频</video></center><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul><li><a href="//music.joylau.cn">JoyMusic</a></li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h3><ul><li>这次要解析的是 网易云音乐的 MV</li><li>需要准备的解析的有</li><li>获取 MV 信息列表</li><li>获取 MV 详细信息</li><li>获取 MV 播放地址</li><li>在线播放 MV</li><li>获取 MV 排行榜</li><li>获取最新 MV</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>大部分解析提供的接口都和我以前2篇文章类似,之前的文章有分析过,这里就不再多说了</li><li>这里重点说明下 MV 的播放问题</li></ul><h3 id="关于-MV-的播放"><a href="#关于-MV-的播放" class="headerlink" title="关于 MV 的播放"></a>关于 MV 的播放</h3><ul><li>解析 MV 详细信息,可获得 MV 的真实播放的 MP4 的地址</li><li>但是这个地址,网易云做了防盗链处理</li><li>什么是防盗链?</li><li>一般情况下,我的资源文件,比如 图片, css,js,视频,我们自己放到服务器上可以直接引用</li><li>同样的道理,别人可以访问你的服务器,也可以直接引用</li><li>那么,不想被别人引用怎么办呢?</li><li>这就引申出了防盗链的操作</li><li>最常见的防盗链的处理就是加上 referer识别,就是来源网址信息</li><li>referer 其实是个错误的拼写,这个就是有历史原因了,以前的开发人员在定义这个属性的时候,把这个单词写错了,后来没有人注意到,一直使用到他作为标准</li><li>后来,也没有人去特意改他了,就这么用着吧</li><li>这个是简单防盗链处理</li><li>还有更复杂的,比如 js 加密路径信息,每次请求路径都会变化,这个就复杂了</li><li>很幸运,网易云的 MV 采用的就是 referer 的识别方式</li><li>那么就有相应的破解方法了</li></ul><h3 id="关于-referer"><a href="#关于-referer" class="headerlink" title="关于 referer"></a>关于 referer</h3><ul><li>MP4 的地址在浏览器地址栏直接粘过去是可以播放的,但是由其他网站跳进去的则不能访问,因为带进了 rerferer</li><li>那么,要做的就是去除 请求的 rerferer </li><li>我找了很多资料也尝试了很多次,想在浏览器端把 rerferer 去除掉,基本是实现不了的,如果你实现在页面里单独请求 mp4 地址时不带referer, 请联系我</li><li>那么要做的就是在服务端操作了</li><li>在服务端操作很简单,就是伪造头信息进行请求</li></ul><p>这个是带 referer 的请求,被网易云直接拒绝了</p><p><img src="http://image.joylau.cn/blog/joymusic-mv-referer.png" alt="joymusic-mv-referer"></p><p>这个是复制地址到地址栏,则可以直接播放</p><p><img src="http://image.joylau.cn/blog/joymusic-mv-no-referer.png" alt="joymusic-mv-no-referer"></p><h2 id="服务单去除-referer"><a href="#服务单去除-referer" class="headerlink" title="服务单去除 referer"></a>服务单去除 referer</h2><ul><li>严格来说不能说去除 refere,我们需要将原本我们自己服务器的 referer 修改为网易云服务器的 referer<h3 id="Java-版"><a href="#Java-版" class="headerlink" title="Java 版"></a>Java 版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMV</span><span class="params">(HttpServletResponse res, String mvurl)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(mvurl))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        res.setContentType(<span class="string">"video/mpeg4; charset=utf-8"</span>);</div><div class="line">        URLConnection connection = <span class="keyword">new</span> URL(mvurl).openConnection();</div><div class="line">        connection.setRequestProperty(<span class="string">"referer"</span>, <span class="string">"http://music.163.com/"</span>);</div><div class="line">        connection.setRequestProperty(<span class="string">"cookie"</span>, <span class="string">"appver=1.5.0.75771;"</span>);</div><div class="line">        connection.connect();</div><div class="line">        InputStream is = connection.getInputStream();</div><div class="line">        OutputStream os = res.getOutputStream();</div><div class="line">        <span class="keyword">byte</span> bf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">        <span class="keyword">int</span> length;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> ((length = is.read(bf)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                os.write(bf, <span class="number">0</span>, length);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            is.close();</div><div class="line">            os.close();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        is.close();</div><div class="line">        os.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p>解释: </p><ol><li>首先我们请求的资源不是本地的资源,是存储在其他服务器上的,这里用到的是URL</li><li>这里我们需要设置 referer 和 cookie,结合前面使用的 URL, 这里使用的是URLConnection</li><li>后面的就很好理解了,相当于做了一个管道,将读取的文件流原封不动的通过Response返回给调用者</li><li>不要忘了设置 setContentType 为 MP4 的格式</li></ol><h3 id="nodejs-版"><a href="#nodejs-版" class="headerlink" title="nodejs 版"></a>nodejs 版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">const</span> router = express();</div><div class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"request"</span>);</div><div class="line"></div><div class="line">router.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> url = req.query.url;</div><div class="line">  <span class="keyword">const</span> headers = &#123;</div><div class="line">    <span class="string">"Referer"</span>: <span class="string">"http://music.163.com/"</span>,</div><div class="line">    <span class="string">"Cookie"</span>: <span class="string">"appver=1.5.0.75771;"</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'video/mp4'</span>,</div><div class="line">    <span class="string">'Location'</span>: url</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">const</span> options = &#123;</div><div class="line">    <span class="attr">header</span>: headers,</div><div class="line">    <span class="attr">url</span>: url</div><div class="line">  &#125;;</div><div class="line">  request(options).on(<span class="string">'error'</span>, err =&gt; &#123;</div><div class="line">      res.send(&#123; err &#125;)</div><div class="line">    &#125;).pipe(res)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>解释:<br>和上面的 Java 版代码是一个意思,主要是 pipe 流管道将文件流返回给调用者</p><h3 id="功能完成"><a href="#功能完成" class="headerlink" title="功能完成"></a>功能完成</h3><ul><li>那么这样解决了 MP4 地址防盗链的问题</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不足之处也暴露了</li><li>首先这段代码必须部署到服务端</li><li>部署到服务端就需要服务器去拉去 MV 的流信息,这无疑给服务器增加过多的流量压力</li><li>其次,由于使用的流传输,这个 MP4 的播放是不支持快进操作的</li></ul><h2 id="有个简单的解决方式"><a href="#有个简单的解决方式" class="headerlink" title="有个简单的解决方式"></a>有个简单的解决方式</h2><ul><li>在 html5 之后,想去除 referer 信息, a标签有个属性 rel </li><li>将 <code>rel=&quot;noreferrer&quot;</code> 即可在 a 标签的 href 的链接上去除 referer信息</li><li>这一属性已被我使用在播放器的右下角的一个小飞机的按钮上</li><li>点击小飞机按钮就可以直接看 MV 视频了,流量走的是网易云的CDN,不再试自己的服务器</li></ul><p><img src="http://image.joylau.cn/blog/joymusic-mv-no-referer-href.png" alt="joymusic-mv-no-referer-href"></p><h2 id="不完美"><a href="#不完美" class="headerlink" title="不完美"></a>不完美</h2><ul><li>总感觉这个解决不够完美</li><li>如果你看到这篇文章能有更好的解决办法,请联系我</li></ul><blockquote><blockquote><p>欢迎大家来看看试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="external">http://music.joylau.cn</a>  (当前版本 v1.4)</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;video src=&quot;//image.joylau.cn/blog/joymusic-mv.mp4&quot; loop=&quot;true&quot; controls=&quot;controls&quot; poster=&quot;//image.joylau.cn/blog/joymusic-mv-poster.png&quot;&gt;您的浏览器版本太低，无法观看本视频&lt;/video&gt;&lt;/center&gt;  &lt;br&gt;JoyMedia --- 观看海量 MV 视频
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Node.js" scheme="http://blog.joylau.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ 搜索篇 ）</title>
    <link href="http://blog.joylau.cn/2017/08/06/SpringBoot-JoyMedia-Search/"/>
    <id>http://blog.joylau.cn/2017/08/06/SpringBoot-JoyMedia-Search/</id>
    <published>2017-08-06T10:09:47.000Z</published>
    <updated>2017-08-09T07:49:48.850Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="//image.joylau.cn/blog/jquery-autocomplate.gif" alt="JoyMedia - Search"></p><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul><li><a href="//music.joylau.cn">JoyMusic</a><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3></li><li>正如文章图片那样,在搜索框中输入想听的音乐/歌手/专辑</li><li>在输入过程中及输入完成后,显示搜索结果的列表供用户选择<h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3></li><li>REST 接口</li><li>jquery-autocomplete插件</li></ul><h2 id="优美的开始"><a href="#优美的开始" class="headerlink" title="优美的开始"></a>优美的开始</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>引入插件 css: jquery.autocomplete.css</li><li>引入插件 js : jquery.autocomplete.min.js</li><li>写一个数据返回的 REST 接口<h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3></li><li>定义搜索的 input 的 id 值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left input-s-lg m-t m-l-n-xs hidden-xs"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">style</span>=<span class="string">"display: inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm bg-white btn-icon rounded"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"keywords"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control input-sm no-border rounded"</span> <span class="attr">placeholder</span>=<span class="string">"搜索  单曲/歌手/专辑..."</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>这里我定义的是 keywords</li><li>接下来在我们的 js 文件里调用 : $(“#keywords”).autocomplete</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#keywords"</span>).autocomplete(<span class="string">"/music/neteaseCloud/search"</span>, &#123;</div><div class="line">        <span class="attr">width</span> : <span class="number">350</span>, <span class="comment">// 提示的宽度，溢出隐藏</span></div><div class="line">        max : <span class="number">30</span>,<span class="comment">// 显示数量</span></div><div class="line">        scrollHeight: <span class="number">600</span>,</div><div class="line">        <span class="attr">resultsClass</span>: <span class="string">"ac_results animated fadeInUpBig"</span>,</div><div class="line">        <span class="attr">autoFill</span> : <span class="literal">false</span>,<span class="comment">//自动填充</span></div><div class="line">        highlight : <span class="literal">false</span>,</div><div class="line">        <span class="attr">highlightItem</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">scroll</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">matchContains</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">multiple</span> :<span class="literal">false</span>,</div><div class="line">        <span class="attr">matchSubset</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">        <span class="attr">formatItem</span>: <span class="function"><span class="keyword">function</span>(<span class="params">row, i, max</span>) </span>&#123;</div><div class="line">            <span class="comment">//自定义样式</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">formatMatch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">row, i, max</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> row.name + row.id;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">formatResult</span>: <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> row.id;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">parse</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">//解释返回的数据，把其存在数组里</span></div><div class="line">            <span class="keyword">if</span> (data.data.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> [];</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $.map(data.data, <span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> &#123;</div><div class="line">                        <span class="attr">data</span>: row</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;).result(<span class="function"><span class="keyword">function</span>(<span class="params">event, row, formatted</span>) </span>&#123;</div><div class="line">        jQuery(<span class="keyword">this</span>).val(row.name + <span class="string">' '</span> + row.author);</div><div class="line">        addSearchResult(row.id);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h3 id="接下来重点解释这个配置项"><a href="#接下来重点解释这个配置项" class="headerlink" title="接下来重点解释这个配置项"></a>接下来重点解释这个配置项</h3><ul><li>autocomplete 的第一个参数是url, 值得注意的是,这个 url 我们返回的结果数据是 JSON</li><li>后面要专门针对返回的 JSON 数据进行解析</li><li>再往后面来,看到的是一些配置项参数,一些简单的我就不在这多解释了,我这边主要说下我觉得比较重要的</li><li>resultsClass : 这个参数是生成的候选项的父 DIV,如下图所示:</li></ul><p><img src="//image.joylau.cn/blog/jquery-autocomplate-div.png" alt="JoyMedia - AutoComplate-Div"></p><ul><li>默认提供的样式很不好看,默认提供的样式都写在 jquery.autocomplete.css 里面</li><li>在这里面,能看到刚才截图的 div : ac_results</li><li>那么我们要美化的就是 这个 div 和其子元素 li 的样式了</li><li>为了跟契合本站的主题,我采用的黑色主题风格</li><li>给ac_results添加了黑色背景色:background-color: #232c32</li><li>在js文件里搜索ac_results,添加动画效果,并将这个配置写到配置项里:resultsClass: “ac_results animated fadeInUpBig”</li><li>ul 里的 li 是交替的样式的,class 分别为ac_odd和 ac_even,鼠标滑上去的效果为 ac_over,这几个地方自定义下样式</li><li>还有一个配置: matchSubset,设置为 false ,可以避免输入大小写转换的js错误</li><li>formatItem : 返回的每一个结果都会再次处理,这里要做的事是以自己想要的样式显示出来</li><li>formatMatch : 匹配自己在结果集中想要的属性</li><li>formatResult : 自己最终要取的数据是什么</li><li>parse : 针对返回的JSON 数据进行转换,这里通过$. map 转化为 数组</li><li>result : 点击了列表项以后要做什么事情</li></ul><h2 id="完美的结束"><a href="#完美的结束" class="headerlink" title="完美的结束"></a>完美的结束</h2><blockquote><blockquote><p>欢迎大家来听听试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="external">http://music.joylau.cn</a>  (当前版本 v1.3)</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/jquery-autocomplate.gif&#39; alt=&#39;JoyMedia-Search&#39;&gt;&lt;/center&gt;  &lt;br&gt;JoyMedia --- 搜索自己想听的音乐
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Jquery" scheme="http://blog.joylau.cn/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ Node篇 ）</title>
    <link href="http://blog.joylau.cn/2017/07/29/SpringBoot-JoyMedia-Node/"/>
    <id>http://blog.joylau.cn/2017/07/29/SpringBoot-JoyMedia-Node/</id>
    <published>2017-07-29T02:09:04.000Z</published>
    <updated>2017-08-09T07:49:48.850Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h3><ul><li><a href="//music.joylau.cn">JoyMusic</a><h3 id="Node-js-的学习"><a href="#Node-js-的学习" class="headerlink" title="Node.js 的学习"></a>Node.js 的学习</h3></li><li>入门是从这本书上开始的</li><li>结合Node中文网的文档开始探索开发</li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>利用 Node 来解析网易云音乐,其实质就是 跨站请求伪造 (CSRF),通过自己在本地代码中伪造网易云的请求头,来调用网易云的接口</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="以获取歌曲评论来分析"><a href="#以获取歌曲评论来分析" class="headerlink" title="以获取歌曲评论来分析"></a>以获取歌曲评论来分析</h3><ul><li>我们打开其中一首音乐,抓包看一下</li></ul><p><img src="//image.joylau.cn/blog/joylau-media-node-1.png" alt="JoyMedia - Node"></p><ul><li>绝大部分的请求都是 POST 的</li><li>我们找到其中关于评论的请求,如上图所示</li><li>链接中间的部分是歌曲的 id 值</li><li>在返回的 JSON 数据中包含了热评和最新评论</li><li>评论过多的话是分页来展示的</li><li>通过参数 limit 来显示评论数量, offset 来控制分页</li></ul><p><img src="//image.joylau.cn/blog/joylau-media-node-2.png" alt="JoyMedia - Node"></p><ul><li>再来看,这是我本地浏览器中的 cookies 值,现在为止知道有个 csrf 值用来加密</li></ul><p><img src="//image.joylau.cn/blog/joylau-media-node-3.png" alt="JoyMedia - Node"></p><ul><li>每个请求后面都会跟上csrf_token 值,其他的参数还有params 和 encSecKey</li><li>这些值的加密算法无非是2种,一种是前台 js 加密生成的,另一种是将参数传往后台,由后台加密完再传回来</li><li>想要测试一下很简单,将里面的值复制一下在 xhr 里找一下就知道了</li><li>推测是是 js 加密的,加密的 js 简直不能看,如下图</li></ul><p><img src="//image.joylau.cn/blog/joylau-media-node-4.png" alt="JoyMedia - Node"></p><ul><li>看到很多请求后面都返回了 md5 那么 md5 加密是肯定有的</li><li>其实仔细看加密的参数,很多都能靠猜出来</li><li>本地需要创建一个私钥secKey，十六位，之后aes加密生成，在通过rsa吧secKey加密作为参数一起传回</li><li>那么下面贴出加密代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> modulus = <span class="string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span>;</div><div class="line"><span class="keyword">const</span> nonce = <span class="string">'0CoJUm6Qyw8W8jud'</span>;</div><div class="line"><span class="keyword">const</span> pubKey = <span class="string">'010001'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSecretKey</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> keys = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</div><div class="line">  <span class="keyword">let</span> key = <span class="string">""</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">      <span class="keyword">let</span> pos = <span class="built_in">Math</span>.random() * keys.length;</div><div class="line">      pos = <span class="built_in">Math</span>.floor(pos);</div><div class="line">      key = key + keys.charAt(pos)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> key</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEncrypt</span>(<span class="params">text, secKey</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> _text = text;</div><div class="line">  <span class="keyword">const</span> lv = <span class="keyword">new</span> Buffer(<span class="string">'0102030405060708'</span>, <span class="string">"binary"</span>);</div><div class="line">  <span class="keyword">const</span> _secKey = <span class="keyword">new</span> Buffer(secKey, <span class="string">"binary"</span>);</div><div class="line">  <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">'AES-128-CBC'</span>, _secKey, lv);</div><div class="line">  <span class="keyword">let</span> encrypted = cipher.update(_text, <span class="string">'utf8'</span>, <span class="string">'base64'</span>);</div><div class="line">  encrypted += cipher.final(<span class="string">'base64'</span>);</div><div class="line">  <span class="keyword">return</span> encrypted</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">zfill</span>(<span class="params">str, size</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (str.length &lt; size) str = <span class="string">"0"</span> + str;</div><div class="line">    <span class="keyword">return</span> str</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rsaEncrypt</span>(<span class="params">text, pubKey, modulus</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> _text = text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line">  <span class="keyword">const</span> biText = bigInt(<span class="keyword">new</span> Buffer(_text).toString(<span class="string">'hex'</span>), <span class="number">16</span>),</div><div class="line">      biEx = bigInt(pubKey, <span class="number">16</span>),</div><div class="line">      biMod = bigInt(modulus, <span class="number">16</span>),</div><div class="line">      biRet = biText.modPow(biEx, biMod);</div><div class="line">  <span class="keyword">return</span> zfill(biRet.toString(<span class="number">16</span>), <span class="number">256</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> text = <span class="built_in">JSON</span>.stringify(obj);</div><div class="line">  <span class="keyword">const</span> secKey = createSecretKey(<span class="number">16</span>);</div><div class="line">  <span class="keyword">const</span> encText = aesEncrypt(aesEncrypt(text, nonce), secKey);</div><div class="line">  <span class="keyword">const</span> encSecKey = rsaEncrypt(secKey, pubKey, modulus);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">params</span>: encText,</div><div class="line">    <span class="attr">encSecKey</span>: encSecKey</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>挺复杂的,很多我也是参考网络上其他人的加密方式</li></ul><h3 id="伪造网易云头部请求"><a href="#伪造网易云头部请求" class="headerlink" title="伪造网易云头部请求"></a>伪造网易云头部请求</h3><ul><li>这一步就很简单了,主要需要注意的就是 referer 的地址一定要是网易云的地址</li><li>其他的想 cookie 和 User-Agent 直接复制浏览器的即可</li><li>那我们构造一个 POST 的请求</li><li>需要都回到函数和错误返回回调函数</li><li>贴下代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Encrypt = <span class="built_in">require</span>(<span class="string">'./crypto.js'</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebAPIRequest</span>(<span class="params">host, path, method, data, cookie, callback, errorcallback</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> music_req = <span class="string">''</span>;</div><div class="line">    <span class="keyword">const</span> cryptoreq = Encrypt(data);</div><div class="line">    <span class="keyword">const</span> http_client = http.request(&#123;</div><div class="line">        <span class="attr">hostname</span>: host,</div><div class="line">        <span class="attr">method</span>: method,</div><div class="line">        <span class="attr">path</span>: path,</div><div class="line">        <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4'</span>,</div><div class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">            <span class="string">'Referer'</span>: <span class="string">'http://music.163.com'</span>,</div><div class="line">            <span class="string">'Host'</span>: <span class="string">'music.163.com'</span>,</div><div class="line">            <span class="string">'Cookie'</span>: cookie,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'</span>,</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        res.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            errorcallback(err)</div><div class="line">        &#125;);</div><div class="line">        res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">        <span class="keyword">if</span> (res.statusCode !== <span class="number">200</span>) &#123;</div><div class="line">            createWebAPIRequest(host, path, method, data, cookie, callback);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">                music_req += chunk</div><div class="line">            &#125;);</div><div class="line">            res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (music_req === <span class="string">''</span>) &#123;</div><div class="line">                    createWebAPIRequest(host, path, method, data, cookie, callback);</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (res.headers[<span class="string">'set-cookie'</span>]) &#123;</div><div class="line">                    callback(music_req, res.headers[<span class="string">'set-cookie'</span>])</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    callback(music_req)</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    http_client.write(<span class="string">'params='</span> + cryptoreq.params + <span class="string">'&amp;encSecKey='</span> + cryptoreq.encSecKey);</div><div class="line">    http_client.end()</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>那么再结合我们刚才分析的评论API, 发出该请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">const</span> router = express();</div><div class="line"><span class="keyword">const</span> &#123; createWebAPIRequest &#125; = <span class="built_in">require</span>(<span class="string">"../common"</span>);</div><div class="line"></div><div class="line">router.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> rid=req.query.id;</div><div class="line">    <span class="keyword">const</span> cookie = req.get(<span class="string">'Cookie'</span>) ? req.get(<span class="string">'Cookie'</span>) : <span class="string">''</span>;</div><div class="line">    <span class="keyword">const</span> data = &#123;</div><div class="line">        <span class="string">"offset"</span>: req.query.offset || <span class="number">0</span>,</div><div class="line">        <span class="string">"rid"</span>: rid,</div><div class="line">        <span class="string">"limit"</span>: req.query.limit || <span class="number">20</span>,</div><div class="line">        <span class="string">"csrf_token"</span>: <span class="string">""</span></div><div class="line">    &#125;;</div><div class="line">    createWebAPIRequest(</div><div class="line">        <span class="string">'music.163.com'</span>,</div><div class="line">        <span class="string">`/weapi/v1/resource/comments/R_SO_4_<span class="subst">$&#123;rid&#125;</span>/?csrf_token=`</span>,</div><div class="line">        <span class="string">'POST'</span>,</div><div class="line">        data,</div><div class="line">        cookie,</div><div class="line">        music_req =&gt; &#123;</div><div class="line">            res.send(music_req)</div><div class="line">        &#125;,</div><div class="line">        err =&gt; res.status(<span class="number">502</span>).send(<span class="string">'fetch error'</span>)</div><div class="line">    )</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><ul><li>值得注意的是,这里我的 node 模板选择的 EJS 所使用的 js 语法格式也比较新,你需要将你 WebStorm 的 js 编译器的版本提升到ECMAScript 6,否则的话会报错,如下图所示:<br><img src="//image.joylau.cn/blog/joylau-media-node-5.png" alt="JoyMedia - Node"></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>我们写一个入口文件,可以直接运行期容器,以及提供 APIs</li><li>那么,这个就跟简单了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> v = <span class="string">'/apis/v1'</span>;</div><div class="line"></div><div class="line">app.listen(port, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`server starting <span class="subst">$&#123;port&#125;</span>`</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*APIs 列表*/</span></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//推荐歌单</span></div><div class="line">app.use(v + <span class="string">"/personalized"</span>, <span class="built_in">require</span>(<span class="string">"./apis/personalized"</span>));</div><div class="line"></div><div class="line"><span class="comment">//歌单评论</span></div><div class="line">app.use(v + <span class="string">'/comment/playlist'</span>, <span class="built_in">require</span>(<span class="string">'./apis/comment_playlist'</span>));</div><div class="line"></div><div class="line"><span class="comment">//获取歌单内列表</span></div><div class="line">app.use(v + <span class="string">'/playlist/detail'</span>, <span class="built_in">require</span>(<span class="string">'./apis/playlist_detail'</span>));</div><div class="line"></div><div class="line"><span class="comment">//获取音乐详情</span></div><div class="line">app.use(v + <span class="string">'/song/detail'</span>, <span class="built_in">require</span>(<span class="string">'./apis/song_detail'</span>));</div><div class="line"></div><div class="line"><span class="comment">//单曲评论</span></div><div class="line">app.use(v + <span class="string">'/comment/music'</span>, <span class="built_in">require</span>(<span class="string">'./apis/comment_music'</span>));</div><div class="line"></div><div class="line"><span class="comment">//获取音乐 url</span></div><div class="line">app.use(v + <span class="string">'/music/url'</span>, <span class="built_in">require</span>(<span class="string">'./apis/musicUrl'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 获取歌词</span></div><div class="line">app.use(v + <span class="string">'/lyric'</span>, <span class="built_in">require</span>(<span class="string">'./apis/lyric'</span>))</div><div class="line"></div><div class="line"></div><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">//打印出错误的调用栈方便调试</span></div><div class="line">    <span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = app;</div></pre></td></tr></table></figure><ul><li>引用 http 模块,开启 node 的默认3000 端口 </li><li>目前提供了上述注释里所写的 APIs</li><li>每一个 API 都会单独写一个模块,以在此调用</li><li>有一个地方值得注意的事</li><li>node 是单线程的异步 IO,这使得他在高并发方面得到很快相应速度,但是也有缺点</li><li>当其中一个操作出错异常了,就会导致整个服务挂掉</li><li>我在此的处理方式是:监听全局异常,捕到异常后将错误的堆栈信息打印出来,这样使得后续的操作不得进行以至于使整个服务挂掉</li><li>当然,还有其他的方式来处理,可以通过引用相应的模块,来守护 node 的进程,简单的来说就是挂掉我就给你重启</li><li>我觉得第二种方式不是我想要的,我是采取的第一种方式</li><li>况且我还真想看看是什么错误引起的</li><li>最后发现都是网络原因引起的错误 🤣🤣🤣🤣😂😂😂😂😂</li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>npm install</li><li>node app.js</li></ul><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p><img src="//image.joylau.cn/blog/joylau-media-node-7.png" alt="JoyMedia - Node"></p><p><img src="//image.joylau.cn/blog/joylau-media-node-6.png" alt="JoyMedia - Node"></p><blockquote><blockquote><p>欢迎大家来听听试试看!😘 <a href="http://music.joylau.cn" target="_blank" rel="external">http://music.joylau.cn</a>  (当前版本 v1.3)</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/joylau-media-node.png&#39; alt=&#39;JoyMedia-Node&#39;&gt;&lt;/center&gt;  &lt;br&gt;JoyMedia --- Node服务提供解析及 APIs
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Node.js" scheme="http://blog.joylau.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 实战项目 JoyMedia （ 分析篇 ）</title>
    <link href="http://blog.joylau.cn/2017/07/24/SpringBoot-JoyMedia/"/>
    <id>http://blog.joylau.cn/2017/07/24/SpringBoot-JoyMedia/</id>
    <published>2017-07-24T02:36:19.000Z</published>
    <updated>2017-08-09T07:49:48.851Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><center><br><br><img src="//image.joylau.cn/blog/JoyMedia.gif" alt="JoyMedia - Beta - 预览图"><br><img src="//image.joylau.cn/blog/JoyMedia.png" alt="JoyMedia - Beta - 系统结构"><br><br></center><h2 id="在线地址"><a href="#在线地址" class="headerlink" title="在线地址"></a>在线地址</h2><p><a href="http://media.joylau.cn" target="_blank" rel="external">JoyMedia - Beta 预览版</a></p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h3><ul><li>本人经常在写代码或者没事的时候会听一些音乐</li><li>以前大部分会选择本地安装客户端</li><li>其中最喜欢的认为做的比较好的音乐客户端实属网易云音乐了</li><li>无论是从 Mac 版的客户端,还是 IOS 版的客户端,界面都非常优美,简直是极客和码农的必备</li><li>最主要是的网易云的歌曲推荐功能,很强大,我一度认为2个人的歌单相似度超过90%,就可以在一起了,这样再也不怕找不到对象了,😆</li><li>但也有些问题,网易云有一些版权音乐,是无法听到的,有时候昨天还在听得音乐,今天就听不了了</li><li>这就很烦了</li></ul><h3 id="自己的想法"><a href="#自己的想法" class="headerlink" title="自己的想法"></a>自己的想法</h3><ul><li>最初想把这个版权音乐的 mp3 地址解析出来,这样就可以直接听了</li><li>恩,想法很 nice</li><li>那么,照着这个想法做吧</li></ul><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><ul><li>正如上述系统结构所示</li><li>我自己有2台云服务器,一台阿里云的,另一台是腾讯云的</li><li>这2台服务器,我是这样分配的: 阿里云只提供 WEB 服务,腾讯云为 WEB 访问提供各种服务</li><li>当然服务器上我还跑了其他服务</li></ul><h3 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h3><ul><li>Nginx 主要负责了 JoyMedia 的 负载均衡,在该台服务器上,我用 部署了2个 spring-boot 项目,以权重的方式配置了负载均衡,这样我在更新项目的时候可以保证另一个服务的可用性</li><li>当然 Nginx 还有个反向代理的作用, upstream 配置了其他项目的访问</li><li>还有台 Redis 服务了,爬到的数据会存到 Redis 了,以供 WEB 服务迅速读取,当然在有些地方不会读取 Redis ,比如单曲歌曲播放的 mp3地址的获取</li><li>在最开始的时候我会先在后台解析出来再存到 Redis 里,但是发现网易云的歌曲 mp3 地址失效太快了,有时会导致播放异常,不如实时解析来的实在</li><li>在比如单首歌曲的评论的获取,这个得是实时解析的</li></ul><h3 id="腾讯云服务器"><a href="#腾讯云服务器" class="headerlink" title="腾讯云服务器"></a>腾讯云服务器</h3><ul><li>提供网易云音乐解析的是一个 Node 服务，这个 Node 服务是如何解析地址的，这个需要单独再写一篇文章，先知道这个 Node 服务是干嘛的就好</li><li>然后部署了3个spring-boot服务，分别提供了各自的服务，有定时爬去网易云音乐的推荐歌单，爬取歌单的歌曲列表，爬取歌单评论</li><li>由于爬到的音乐信息很快就会失效，这个服务都要定时的爬取</li><li>爬取到的数据的落地存储，我是存到的MongoDB中，在这篇文章中：<a href="http://blog.joylau.cn/2017/07/18/SpringBoot-MongoDB/">重剑无锋,大巧不工 SpringBoot — 整合使用MongoDB</a> , 我说明了为什么要选择 MongoDB</li><li>这3个服务爬到的数据会实时存到 Redis 中,另一方面,会异步存到 MongoDB 中,我想着这些数据或许还能做什么数据分析之类的,😄</li></ul><h2 id="初版完成后"><a href="#初版完成后" class="headerlink" title="初版完成后"></a>初版完成后</h2><h3 id="等我搭建完这个服务后-发现了问题"><a href="#等我搭建完这个服务后-发现了问题" class="headerlink" title="等我搭建完这个服务后,发现了问题"></a>等我搭建完这个服务后,发现了问题</h3><ul><li>有版权控制的音乐根本解析不到 mp3 的实际地址</li><li>那么我想听的音乐,听不到还是听不到,突然变得很尴尬</li></ul><h3 id="又有了想法"><a href="#又有了想法" class="headerlink" title="又有了想法"></a>又有了想法</h3><ul><li>一般情况下,我们在一家音乐网站上找不到自己想要的音乐,就回去其他音乐网站上找</li><li>恩,就这么干</li><li>网易云找不到的音乐,我就去虾米音乐,去 QQ 音乐找</li><li>这2个网站的音乐我都小试了下,都是可以的</li><li>于是我现在把这些功能集中在页面的搜索框中,搜索这3个音乐网站的结果,然后实施解析来播放</li><li>这是我下步要做的事情</li></ul><h3 id="有些地方还有-BUG"><a href="#有些地方还有-BUG" class="headerlink" title="有些地方还有 BUG"></a>有些地方还有 BUG</h3><ul><li>有些地方还是有 BUG 的,需要修复</li></ul><h3 id="有些地方功能还没写好"><a href="#有些地方功能还没写好" class="headerlink" title="有些地方功能还没写好"></a>有些地方功能还没写好</h3><ul><li>比如右上角的用户登录,现在的想法是使用第三方登录,比如 QQ, 微信…,但是是登录网易云音乐呢,还是登录网站呢?</li><li>要是登录网易云音乐的话,估计账号安全是个问题,而且登录接口不能频繁调用</li><li>要是登录网站的,好像没什么卵用</li><li>再比如左下角的歌词界面,虽然能获取到歌词,但是怎么做到歌词随着歌曲的播放实时滚动,这个现在还没有头绪…</li></ul><blockquote><blockquote><p>还在继续开发中…</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/JoyMedia.gif&#39; alt=&#39;JoyMedia预览&#39;&gt;&lt;br&gt;&lt;p&gt;预览图&lt;/p&gt;&lt;img src=&#39;//image.joylau.cn/blog/JoyMedia.png&#39; alt=&#39;JoyMedia系统结构图&#39;&gt;&lt;/center&gt;  &lt;br&gt;JoyMedia --- 各种 SpringBoot 微服务实战
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 整合使用MongoDB</title>
    <link href="http://blog.joylau.cn/2017/07/18/SpringBoot-MongoDB/"/>
    <id>http://blog.joylau.cn/2017/07/18/SpringBoot-MongoDB/</id>
    <published>2017-07-18T04:15:24.000Z</published>
    <updated>2017-07-22T09:57:42.305Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><ul><li><code>yum install mongodb-server  mongodb</code></li><li><code>systemctl start mongod</code></li><li><code>whereis mongo</code></li></ul><h3 id="MongoDB-配置文件"><a href="#MongoDB-配置文件" class="headerlink" title="MongoDB 配置文件"></a>MongoDB 配置文件</h3><ul><li>修改 bind_ip为 0.0.0.0 即可外网可访问</li><li>修改 fork 为 true 即可后台运行</li><li>修改 auth为 true 即访问连接时需要认证</li><li>修改 port 修改端口号</li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><img src="//image.joylau.cn/blog/springboot-mongodb-config.png" alt="mongoDB配置"><br>还有种配置url方式: <code>spring.data.mongodb.uri=mongodb://name:pass@host:port/db_name</code></p><p>相比这种方式,我觉得第一种截图的方式要更直观一些</p><h3 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h3><ul><li>主要的一个接口<code>MongoRepository&lt;T,ID&gt;</code>,第一个是要存储的实体类,第二个参数是 ID 类型</li><li>自定义一个接口实现上述接口</li><li>定义实体类</li><li>自定义实现类可直接注入使用</li><li>默认的已经存在了增删改查的方法了,可以直接使用</li><li>想要更多的功能可以在接口中实现更多的自定义</li><li>下面截图所示:</li></ul><p>自定义一个 DAO :<br><img src="//image.joylau.cn/blog/springboot-mongodb-dao.png" alt="mongoDB-DAO"></p><p>查看如何使用 :<br><img src="//image.joylau.cn/blog/springboot-mongodb-method.png" alt="mongoDB-method"><br>有个 username 忘了配置了,得加上的</p><p>使用起来就是如此简单,感觉使用起来很像 mybatis 的 mapper 配置</p><h2 id="有一些注解的配置"><a href="#有一些注解的配置" class="headerlink" title="有一些注解的配置"></a>有一些注解的配置</h2><h3 id="有时候使用起来会有一些问题"><a href="#有时候使用起来会有一些问题" class="headerlink" title="有时候使用起来会有一些问题"></a>有时候使用起来会有一些问题</h3><ul><li>在默认策略下, Java 实体类叫什么名字,生成后的表名就叫什么,但我们可能并不想这样</li><li>同样的道理,有时属性名和字段也并不想一样的</li><li>有时一些属性我们也并不想存到 MongoDB<h3 id="注解解决这些问题"><a href="#注解解决这些问题" class="headerlink" title="注解解决这些问题"></a>注解解决这些问题</h3></li><li><code>@Id</code> : 标明表的 ID , 自带索引,无需维护</li><li><code>@Document</code> : 解决第一个问题</li><li><code>@Field</code> : 解决第二个问题</li><li><code>@Transient</code> : 解决第三个问题<h3 id="此外-还有其他的注解"><a href="#此外-还有其他的注解" class="headerlink" title="此外,还有其他的注解"></a>此外,还有其他的注解</h3>可能并不常用,在此也说明下</li><li><code>@Indexed(unique = true)</code> : 加在属性上,标明添加唯一索引</li><li><code>@CompoundIndex</code> : 复合索引</li></ul><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>查看下刚爬的网易云官网的歌曲信息吧</p><p><center> <img src="//image.joylau.cn/blog/springboot-mongoDB-preview.gif" alt="歌曲信息"> <center></center></center></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/SpringBoot-MongoDB.jpg&#39; alt=&#39;spring-boot-mongoDB&#39;&gt;&lt;/center&gt;  &lt;br&gt;我最近实现的一个音乐小站，深爬网易云音乐官网的音乐数据&lt;br&gt;数据的存储和快速读取采用的是redis&lt;br&gt;而爬到的数据想持久化存储下来，对于这种很结构化的数据来说MySQL已经并不适用了&lt;br&gt;使用MongoDB来异步存储，以后可以数据分析使用
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
      <category term="MongoDB" scheme="http://blog.joylau.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>ZeroC Ice --- 高性能RPC技术王者</title>
    <link href="http://blog.joylau.cn/2017/07/10/ZeroC-Ice/"/>
    <id>http://blog.joylau.cn/2017/07/10/ZeroC-Ice/</id>
    <published>2017-07-10T08:09:59.000Z</published>
    <updated>2017-07-18T05:49:07.972Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>ZeroC Ice 的背景我就不介绍了</li><li>ZeroC Ice 环境安装搭建，概念原理，技术基础，这些网络上都有，再介绍的话就是copy过来了，没有多大意义，不再赘述了</li><li>下面我们开始实战</li></ul><h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><ul><li>首先我们需要几个ice接口文件,比如说这几个：<br><img src="//image.joylau.cn/blog/ZeroC-Ice-1.png" alt="Ice 文件展示"></li><li>我们来看一下其中一个ice文件定义的接口说明<br><img src="//image.joylau.cn/blog/ZeroC-Ice-2.png" alt="Ice接口文件说明"><br>文件里定义了5个接口，可以很明显的的看到是区间的增删改查接口<br>刚好很适合我们对外提供增删改查的RESTFul API 接口<br>这里在对外提供 RESTFul API 是可以很清楚的 使用 POST GET PUT DELETE<br>可以说这里很好的提供了这样一个例子</li><li>命令 <code>slice2java xxx.ice</code> 生成 java 的 client，server类<br><img src="//image.joylau.cn/blog/ZeroC-Ice-3.png" alt="生成的Java类"><br>生成的Java文件很多，这个不用管，更不必更改里面的代码内容<br>你要是有兴趣的话，也可以将这些文件分为 client 和 server 分门别类的归纳好<br>打开看一下，里面的代码很混乱，无论是代码风格，样式，变量命名，对于我来说，简直不忍直视<br><img src="//image.joylau.cn/blog/ZeroC-Ice-5.png" alt="生成的Java代码"></li><li>编写client类<br><img src="//image.joylau.cn/blog/ZeroC-Ice-4.png" alt="client类"><br>代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ice"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String adapterName;</div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Logger _logger = LoggerFactory.getLogger(Client.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行操作</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> command 命令体</div><div class="line">     * <span class="doctag">@return</span> Result</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">execute</span><span class="params">(CommandBody command)</span> </span>&#123;</div><div class="line">        Ice.Communicator ic = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//初使化通信器</span></div><div class="line">            ic = Ice.Util.initialize();</div><div class="line">            <span class="comment">//传入远程服务单元的名称、网络协议、IP及端口，获取接口的远程代理，这里使用的stringToProxy方式</span></div><div class="line">            Ice.ObjectPrx base = ic.stringToProxy(getStringProxy());</div><div class="line">            <span class="comment">//通过checkedCast向下转换，获取接口的远程，并同时检测根据传入的名称获取的服务单元是否代理接口，如果不是则返回null对象</span></div><div class="line">            ZKRoadRangeAdminPrx interfacePrx = ZKRoadRangeAdminPrxHelper.checkedCast(base);</div><div class="line">            <span class="keyword">if</span> (interfacePrx == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"Invalid proxy"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//把接口的方法传给服务端，让服务端执行</span></div><div class="line">            Result result = executeCommand(command, interfacePrx);</div><div class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"暂无此操作命令"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            _logger.info(e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"连接错误！"</span> + e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (ic != <span class="keyword">null</span>) &#123;</div><div class="line">                ic.destroy();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行操作命令</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> command      命令体</div><div class="line">     * <span class="doctag">@param</span> interfacePrx 接口</div><div class="line">     * <span class="doctag">@return</span> ProgramResponse</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">executeCommand</span><span class="params">(CommandBody command, ZKRoadRangeAdminPrx interfacePrx)</span> </span>&#123;</div><div class="line">        CommandType type = command.getCommandType();</div><div class="line">        <span class="keyword">if</span> (type.equals(CommandType.addRange)) &#123;</div><div class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.AddRange(command.getZkRoadRange()));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.updateRange)) &#123;</div><div class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.UpdateRange(command.getZkRoadRange()));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.removeRange)) &#123;</div><div class="line">            <span class="keyword">return</span> returnMessage(interfacePrx.RemoveRange(command.getZkRoadRange().code));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.getRange)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, JSONObject.toJSONString(interfacePrx.GetRange(command.getZkRoadRange().code)));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(CommandType.listRanges)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, JSONObject.toJSONString(interfacePrx.ListRanges()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取配置的地址信息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> String</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getStringProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> adapterName + <span class="string">":tcp -h "</span> + host + <span class="string">" -p "</span> + port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">returnMessage</span><span class="params">(<span class="keyword">boolean</span> result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> result ? <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"success"</span>) : <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"failure"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>需要三个配置： 适配器名，IP地址，端口号，配置在SpringBoot项目里，如下：<br><img src="//image.joylau.cn/blog/ZeroC-Ice-6.png" alt="ICE配置信息"></li></ul><h3 id="再封装一下"><a href="#再封装一下" class="headerlink" title="再封装一下"></a>再封装一下</h3><ul><li>封装返回消息体<br><img src="//image.joylau.cn/blog/ZeroC-Ice-8.png" alt="ICE配置信息"></li><li>封装执行命令体<br><img src="//image.joylau.cn/blog/ZeroC-Ice-7.png" alt="ICE配置信息"></li></ul><h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><ul><li>调用 ice 里的接口方法：获取远程代理的 checkedCast </li><li>获取远程接口的 interfacePrx 可直接调用 ice 文件里的方法</li><li>服务端的 Ice 版本最好和 客户端的版本相同</li><li>服务端提供服务时需要创建一个 servant ，一般的我们会在接口名后面加一个I，以此命名作为Java文件类名</li><li>该servant继承 接口文件的Disp类，并重写接口中定义的方法，实现具体的业务逻辑</li><li>Server端创建一个适配器 adapter，将servant 放进去</li><li>服务退出前，一直对请求持续监听</li></ul><h3 id="听首歌回忆下"><a href="#听首歌回忆下" class="headerlink" title="听首歌回忆下"></a>听首歌回忆下</h3><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="250" height="86" src="//music.163.com/outchain/player?type=2&id=135728&auto=1&height=66"></iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/ZeroC-ICE.png&#39; alt=&#39;ZeroC-ICE&#39;&gt;&lt;/center&gt;&lt;br&gt;HTTP REST 风格的远程通信技术可谓风靡一时，但是其低效也为人诟病&lt;br&gt;高性能，多语言支持，跨平台，轻量级是ICE主打的特性&lt;br&gt;本篇文章我将自己总结一下自己使用ZeroC Ice的技术
    
    </summary>
    
      <category term="ZeroC Ice篇" scheme="http://blog.joylau.cn/categories/ZeroC-Ice%E7%AF%87/"/>
    
    
      <category term="ZeroC Ice" scheme="http://blog.joylau.cn/tags/ZeroC-Ice/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Git多仓库提交</title>
    <link href="http://blog.joylau.cn/2017/07/03/Git-Multi-Repo-Push/"/>
    <id>http://blog.joylau.cn/2017/07/03/Git-Multi-Repo-Push/</id>
    <published>2017-07-03T01:10:02.000Z</published>
    <updated>2017-07-03T01:26:56.084Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ul><li>新建一个项目</li><li>可先分别在码云和 GitHub 上建好仓库&lt;可选&gt;</li><li>将项目提交的码云上</li><li>项目提交到另一个仓库的时候重新 define remote &lt;可选&gt;</li><li>之后每次先提交到本地仓库，可以根据每次提交到本地仓库的不同，来选择定义的 remote 来分别提交</li><li>每次 pull 也可以选择仓库</li></ul><h2 id="遇到个问题"><a href="#遇到个问题" class="headerlink" title="遇到个问题"></a>遇到个问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>在我新建好码云的仓库后，提交项目，遇到  Git Pull Failed: fatal: refusing to merge unrelated histories</li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>原因：git拒绝合并两个不相干的东西</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>此时在命令行输入 ： git pull origin master –allow-unrelated-histories</li><li>要求我输入提交信息</li><li>输入完成后，按一下Esc,再输入:wq,然后回车就OK了</li><li>再回来提交就可以了</li></ul>]]></content>
    
    <summary type="html">
    
      拿OSChina的码云和GitHub用来做的实验
    
    </summary>
    
      <category term="Git篇" scheme="http://blog.joylau.cn/categories/Git%E7%AF%87/"/>
    
    
      <category term="Git" scheme="http://blog.joylau.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="http://blog.joylau.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>MacOS常用开发使用APP</title>
    <link href="http://blog.joylau.cn/2017/06/29/MacOS-Dev-App/"/>
    <id>http://blog.joylau.cn/2017/06/29/MacOS-Dev-App/</id>
    <published>2017-06-29T15:28:02.000Z</published>
    <updated>2017-06-30T03:17:24.558Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h2><ul><li><strong>BetterZip</strong> : mac上面的最好的解压工具</li><li><strong>CHM View</strong> : 查看chm类型的开发文档</li><li><strong>Easy New File Free</strong> : 右击桌面，可以像win一样新建文件</li><li><strong>Bartender 2</strong> : 任务栏menu图标整理</li><li><strong>iStat Menus</strong> : 系统网速、cpu、内存监控工具</li><li><strong>SwitchResX</strong> : 外接显示器，调节DPI</li><li><strong>Go2Shell</strong> : 在finder的任意文件夹下打开终端</li><li><strong>Aria2GUI</strong> : 突破百度限速</li><li><strong>Alfred 3</strong> : 效率神器,谁用谁知道</li><li><strong>PDF Expert</strong> : 查看pdf</li><li><strong>远程桌面连接</strong> : mac电脑上远程连接windows</li></ul><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><ul><li><strong>网易云音乐</strong> ：这个必备啊</li><li><strong>优酷</strong> ：这个可以免费看1080P视频，没广告，有时候出抽风的时候还可以看会员视频</li><li><strong>OBS</strong> : 视频直播、录制软件</li><li><strong>Movist</strong> : 视频播放器,支持的格式很多</li></ul><h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h2><ul><li><strong>CleanMyMac 3</strong> : 清理mac电脑垃圾</li><li><strong>ShadowsocksX</strong> : 翻墙必备</li><li><strong>TeamView</strong> : 桌面远程软件</li><li><strong>MacDown</strong> : 开源的markdown编辑器</li><li><strong>Path Finder</strong> : Finder增强版</li><li><strong>Parallels Desktop</strong> : 虚拟机</li><li><strong>FileZilla</strong> : ftp工具</li><li><strong>Foxmail</strong> : 邮箱客户端</li><li><strong>Folx</strong> : 下载工具</li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><strong>FireFox</strong> : 火狐</li><li><strong>Google Chrome</strong> : 必备</li><li><strong>IntelliJ IDEA</strong> : 必备IDE</li><li><strong>WebStorm</strong> : web开发必备</li><li><strong>DataGrip</strong> : 数据库管理软件</li><li><strong>Navicat Premium</strong> : 已经使用习惯的MySQL连接工具，也支持其他数据库</li><li><strong>XShell</strong> : SSH远程连接工具,我还是比较喜欢终端下的ssh命令连接，虽然有一个家族的系列产品</li><li><strong>Sublime Text3</strong> : 文本编辑器</li><li><strong>Beyond Compare</strong> : 文本比较工具</li><li><strong>GitHub Desktop</strong> : github GUI客户端</li><li><strong>rdm</strong> : redis可视化GUI界面</li><li><strong>HBuilder</strong> : h5开发工具</li><li><strong>iTerm</strong> : 终端</li></ul><blockquote><blockquote><p>自己暂时使用的工具都已归纳出来，以后有新的好用的工具，会加上的，Mac下大部分工具都是收费的，你可以偷偷点一下 <a href="http://xclient.info/s/" target="_blank" rel="external">xclient.info</a></p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/macos-soft.png&#39; alt=&#39;MacOS-Soft&#39;&gt;&lt;/center&gt;&lt;br&gt;记录一下自己常用的APP，以防不时之需
    
    </summary>
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
      <category term="MacBookPro" scheme="http://blog.joylau.cn/tags/MacBookPro/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro 2017 --- 不行！我要开箱</title>
    <link href="http://blog.joylau.cn/2017/06/24/MacBookPro-Unboxing/"/>
    <id>http://blog.joylau.cn/2017/06/24/MacBookPro-Unboxing/</id>
    <published>2017-06-24T02:30:22.000Z</published>
    <updated>2017-06-26T03:42:56.500Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="官方视频"><a href="#官方视频" class="headerlink" title="官方视频"></a>官方视频</h2><center><br><video src="//image.joylau.cn/blog/macbook-pro-design.mp4" loop="true" controls="controls" poster="//image.joylau.cn/blog/MacBookPro-unboxing-video.png">您的浏览器版本太低，无法观看本视频</video><br></center><h2 id="开始拆箱"><a href="#开始拆箱" class="headerlink" title="开始拆箱"></a>开始拆箱</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2180.JPG" alt="MacBook Pro"><br><br>先来看一下刚拿到手的包装是什么样的<br><br>一台主机<br><br>我在官网订购了一个 USB-typeC 转 USB 的转接口<br><br>那个小盒子就是<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2181.JPG" alt="MacBook Pro"><br><br>打开主机纸盒<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2182.JPG" alt="MacBook Pro"><br><br>掰开这个直接就可以把里面的主机盒抽出来,很方便<br><br>两边都是这样设计的<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2183.JPG" alt="MacBook Pro"><br><br>就2样东西<br><br>都摆放好了<br><br>准备拿剪刀拆开<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2184.JPG" alt="MacBook Pro"><br><br>来一张侧面照<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2185.JPG" alt="MacBook Pro"><br><br>拆开盒子保护膜<br><br>打开镂空设计的上盖，看到我们的主机真容<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2186.JPG" alt="MacBook Pro"><br><br>这样一看，真的很薄，起码比我以前用过得笔记本都要薄多了<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2187.JPG" alt="MacBook Pro"><br><br>2端都是 USB-C 接口的充电线<br><br>适配器感觉好大啊<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2188.JPG" alt="MacBook Pro"><br><br>靠近点看下USB-C的充电线<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2189.JPG" alt="MacBook Pro"><br><br>然后就什么都没有了<br><br>底下的盒子也打不开<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2190.JPG" alt="MacBook Pro"><br><br>苹果的LOGO贴纸<br><br>说明书<br><br>三包凭证<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2191.JPG" alt="MacBook Pro"><br><br>开始正式拆开主机的包装纸<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2192.JPG" alt="MacBook Pro"><br><br>一睹真容<br>15.6寸的<br></center><h2 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2193.JPG" alt="MacBook Pro"><br><br>盖子一打开就开机了<br><br>屏幕与键盘之间隔了一张纸<br><br>让我们拿开他<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2194.JPG" alt="MacBook Pro"><br><br>很快就进入了系统<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2195.JPG" alt="MacBook Pro"><br><br>重新设计的蝴蝶键盘<br><br>键程很短<br><br>按键很紧凑<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2196.JPG" alt="MacBook Pro"><br><br>来一张键盘的整体照<br><br>上面是全新的 Multi-Touch Bar ，替换了以前的一排功能按键，许多mac内置的应用在Touch Bar上都有支持<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2197.JPG" alt="MacBook Pro"><br><br>触摸板的占比实在是太大了<br><br>看我一只手放上去，刚好差不多<br><br>手有点丑，请忽略<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2198.JPG" alt="MacBook Pro"><br><br>迫不及待的想进入系统尝试一下了<br><br>先来连接家里的WIFI<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2199.JPG" alt="MacBook Pro"><br><br>老套路了<br><br>都是下一步<br><br>再下一步<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2200.JPG" alt="MacBook Pro"><br><br>在电源键上提供了和iPhone上一个的指纹支持<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2201.JPG" alt="MacBook Pro"><br><br>来录入我自己的指纹<br><br>不知道用的是什么材料，在这个TouchBar上面滑来滑去很舒服，很有感觉<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2202.JPG" alt="MacBook Pro"><br><br>正在设置指纹<br><br>稍等一下<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2203.JPG" alt="MacBook Pro"><br><br>终于正式进入系统了<br><br>屏幕的显示效果很震撼<br><br>特效动画的帧数很高，给人感觉很流畅<br></center><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2204.JPG" alt="MacBook Pro"><br><br>看一下系统信息<br><br><br><br><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2205.JPG" alt="MacBook Pro"><br><br>显示器信息<br><br>2G独立显存<br></center><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><h3 id="使用它也有一周多了，说一下自己的整体感受吧"><a href="#使用它也有一周多了，说一下自己的整体感受吧" class="headerlink" title="使用它也有一周多了，说一下自己的整体感受吧"></a>使用它也有一周多了，说一下自己的整体感受吧</h3><ul><li>Retina显示器的显示效果真的很好，真是惯坏了眼睛，现在再去看普通的显示器，就感觉有很强的颗粒感</li><li>macOS High Sierra字体渲染的很棒，系统中有很多适合编程的字体，在 IntelliJ IDEA 中编码很爽</li><li>更大的分辨率能看到更多的内容</li><li>系统安装软件什么的很方便，没有想Windows下那么碎片化</li><li>Multi-Touch Bar 有很多有意思的功能，除了官方宣传的和MacOS本身自带的，想滑动查看照片，添加emoji小表情，控制亮度。。。之类的，大量第三方的软件也进行了适配，网易云音乐，搜狗输入法就适配的很不错</li><li>系统触摸板真的是Windows平台无法比拟的，有很多手势，编码什么的，完全可以不用鼠标</li><li>键盘旁边2个喇叭的音质效果很震撼，而且声音特别大，看电影，听音乐很有感觉</li><li>耗电也比Windows系统的笔记本少多了，充满电的话，就拿我平时工作情况来说，开多个IDEA，起多个服务，多个浏览器，多个编辑器。。。什么什么的，大概能撑个8，9个小时，上班一天不充电….</li><li>颜值好，很符合现代化审美</li></ul><h3 id="缺点也还是有的"><a href="#缺点也还是有的" class="headerlink" title="缺点也还是有的"></a>缺点也还是有的</h3><ul><li>太贵</li></ul><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><center><br><img src="http://image.joylau.cn/blog/macbookpro/IMG_2212.PNG" alt="MacBook Pro"><br><br><strong><code>我和我老婆的对话</code></strong><br></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/MacBookPro-Unboxing.png&#39; alt=&#39;MacBookPro-Unboxing&#39;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
      <category term="MacBookPro" scheme="http://blog.joylau.cn/tags/MacBookPro/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- RESTful API</title>
    <link href="http://blog.joylau.cn/2017/06/18/SpringBoot-RESTfulAPI/"/>
    <id>http://blog.joylau.cn/2017/06/18/SpringBoot-RESTfulAPI/</id>
    <published>2017-06-18T02:36:21.000Z</published>
    <updated>2017-06-19T02:51:51.211Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>使用很简单</li><li>关注业务开发</li><li>熟悉提供的注解</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauSwagger2Application</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(JoylauSwagger2Application.class, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">.apiInfo(apiInfo())</div><div class="line">.select()</div><div class="line">.apis(RequestHandlerSelectors.basePackage(<span class="string">"cn.joylau.code"</span>))</div><div class="line">.paths(PathSelectors.any())</div><div class="line">.build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">.title(<span class="string">"Spring Boot构建RESTful APIs"</span>)</div><div class="line">.description(<span class="string">"将每一个注解的@RestController和@ResponseBody的类和方法生成API，点击即可展开"</span>)</div><div class="line">.termsOfServiceUrl(<span class="string">"http://blog.joylau.cn"</span>)</div><div class="line">.contact(<span class="keyword">new</span> Contact(<span class="string">"joylau"</span>,<span class="string">"http://blog.joylau.cn"</span>,<span class="string">"2587038142@qq.com"</span>))</div><div class="line">.license(<span class="string">"The Apache License, Version 2.0"</span>)</div><div class="line">.licenseUrl(<span class="string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span>)</div><div class="line">.version(<span class="string">"1.0"</span>)</div><div class="line">.build();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method= RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line">        users.put(user.getId(), user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> users.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</div><div class="line">        User u = users.get(id);</div><div class="line">        u.setName(user.getName());</div><div class="line">        u.setAge(user.getAge());</div><div class="line">        users.put(id, u);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        users.remove(id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><ul><li><code>@Api</code>：修饰整个类，描述Controller的作用</li><li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口</li><li><code>@ApiParam</code>：单个参数描述</li><li><code>@ApiModel</code>：用对象来接收参数</li><li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段</li><li><code>@ApiResponse</code>：HTTP响应其中1个描述</li><li><code>@ApiResponses</code>：HTTP响应整体描述</li><li><code>@ApiIgnore</code>：使用该注解忽略这个API </li><li><code>@ApiClass</code></li><li><code>@ApiError</code></li><li><code>@ApiErrors</code></li><li><code>@ApiParamImplicit</code></li><li><code>@ApiParamsImplicit</code></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>Swagger2默认将所有的Controller中的RequestMapping方法都会暴露，然而在实际开发中，我们并不一定需要把所有API都提现在文档中查看，这种情况下，使用注解@ApiIgnore来解决，如果应用在Controller范围上，则当前Controller中的所有方法都会被忽略，如果应用在方法上，则对应用的方法忽略暴露API</li></ul><p>或者重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        Predicate&lt;RequestHandler&gt; predicate = <span class="keyword">new</span> Predicate&lt;RequestHandler&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(RequestHandler input)</span> </span>&#123;</div><div class="line">                Class&lt;?&gt; declaringClass = input.declaringClass();</div><div class="line">                <span class="keyword">if</span> (declaringClass == BasicErrorController.class)<span class="comment">// 排除</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span>(declaringClass.isAnnotationPresent(RestController.class)) <span class="comment">// 被注解的类</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span>(input.isAnnotatedWith(ResponseBody.class)) <span class="comment">// 被注解的方法</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/spring-boot-swagger.png&#39; alt=&#39;spring-boot-swagger&#39;&gt;&lt;/center&gt;  &lt;br&gt;最近在写将ZeroC Ice接口包装成RESTful API以供其他端调用，接口太多奈何要写的文档也太多，想在提供接口时就展示相应的说明文档
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
      <category term="Swagger2" scheme="http://blog.joylau.cn/tags/Swagger2/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 整合RabbitMQ</title>
    <link href="http://blog.joylau.cn/2017/06/16/SpringBoot-RabbitMQ/"/>
    <id>http://blog.joylau.cn/2017/06/16/SpringBoot-RabbitMQ/</id>
    <published>2017-06-16T06:58:40.000Z</published>
    <updated>2017-06-16T09:15:07.509Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="本文说明"><a href="#本文说明" class="headerlink" title="本文说明"></a>本文说明</h3><ul><li>使用之前<code>rabbitMQ</code>的介绍我就不说了，我认为你已经了解了</li><li><code>rabbitMQ</code>和<code>activeMQ</code>的对比区别我也不说了，我认为你已经查过资料了</li><li><code>rabbitMQ</code>的安装，我也不说了，我认为你下载的时候已经看到了官网的安装说明，给一个Windows安装的链接：<a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="external">http://www.rabbitmq.com/install-windows.html</a></li><li><code>rabbitMQ</code>web插件的启用，我也不说，我认为你已经会了</li><li>那我们开始吧</li></ul><h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><h3 id="在使用之前先看一下rabbitMQ-client的使用"><a href="#在使用之前先看一下rabbitMQ-client的使用" class="headerlink" title="在使用之前先看一下rabbitMQ-client的使用"></a>在使用之前先看一下rabbitMQ-client的使用</h3><p>先引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</div><div class="line">        <span class="comment">// 创建连接工厂</span></div><div class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</div><div class="line">        <span class="comment">//设置RabbitMQ地址</span></div><div class="line">        factory.setHost(<span class="string">"localhost"</span>);</div><div class="line">        factory.setPort(<span class="number">5672</span>);</div><div class="line">        factory.setUsername(<span class="string">"guest"</span>);</div><div class="line">        factory.setPassword(<span class="string">"guest"</span>);</div><div class="line">        <span class="comment">//创建一个新的连接</span></div><div class="line">        Connection connection = factory.newConnection();</div><div class="line">        <span class="comment">//创建一个频道</span></div><div class="line">        Channel channel = connection.createChannel();</div><div class="line">        <span class="comment">//声明一个队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</span></div><div class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">        String message = <span class="string">"Hello World!"</span>;</div><div class="line">        <span class="comment">//发送消息到队列中</span></div><div class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">        System.out.println(<span class="string">"P [x] Sent '"</span> + message + <span class="string">"'"</span>);</div><div class="line">        <span class="comment">//关闭频道和连接</span></div><div class="line">        channel.close();</div><div class="line">        connection.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</div><div class="line">        <span class="comment">// 创建连接工厂</span></div><div class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</div><div class="line">        <span class="comment">//设置RabbitMQ地址</span></div><div class="line">        factory.setHost(<span class="string">"localhost"</span>);</div><div class="line">        factory.setPort(<span class="number">5672</span>);</div><div class="line">        factory.setUsername(<span class="string">"guest"</span>);</div><div class="line">        factory.setPassword(<span class="string">"guest"</span>);</div><div class="line">        <span class="comment">//创建一个新的连接</span></div><div class="line">        Connection connection = factory.newConnection();</div><div class="line">        <span class="comment">//创建一个频道</span></div><div class="line">        Channel channel = connection.createChannel();</div><div class="line">        <span class="comment">//声明要关注的队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</span></div><div class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">        System.out.println(<span class="string">"C [*] Waiting for messages. To exit press CTRL+C"</span>);</div><div class="line">        <span class="comment">//DefaultConsumer类实现了Consumer接口，通过传入一个频道，告诉服务器我们需要那个频道的消息，如果频道中有消息，就会执行回调函数handleDelivery</span></div><div class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                System.out.println(<span class="string">"C [x] Received '"</span> + message + <span class="string">"'"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//自动回复队列应答 -- RabbitMQ中的消息确认机制</span></div><div class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>代码的注释很详细</p><h2 id="SpringBoot中的使用"><a href="#SpringBoot中的使用" class="headerlink" title="SpringBoot中的使用"></a>SpringBoot中的使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> localhost</div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> guest</div><div class="line"><span class="attr">    password:</span> guest</div><div class="line"><span class="attr">  output:</span></div><div class="line"><span class="attr">    ansi:</span></div><div class="line"><span class="attr">      enabled:</span> always</div></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</div><div class="line">        System.out.println(<span class="string">"生产者发送信息 : "</span> + context);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建消息生产者Product。通过注入AmqpTemplate接口的实例来实现消息的发送，AmqpTemplate接口定义了一套针对AMQP协议的基础操作。在Spring Boot中会根据配置来注入其具体实现。在该生产者，我们会产生一个字符串，并发送到名为hello的队列中</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line">    <span class="meta">@RabbitHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"消费者接受信息 : "</span> + hello);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建消息消费者Consumer。通过@RabbitListener注解定义该类对hello队列的监听，并用@RabbitHandler注解来指定对消息的处理方法。所以，该消费者实现了对hello队列的消费，消费操作为输出消息的字符串内容。</p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoylauSpringBootRabbitmqApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Product product;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">product.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="再来一张图"><a href="#再来一张图" class="headerlink" title="再来一张图"></a>再来一张图</h3><p><img src="//image.joylau.cn/blog/spring-boot-rabbitmq-test.png" alt="示例截图"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>后面继续更新一些具体业务场景中复杂的使用….</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/spring-boot-rabbitMQ.png&#39; alt=&#39;spring-boot-rabbitMQ&#39;&gt;&lt;/center&gt;  &lt;br&gt;本文将整合SpringBoot和RabbitMQ一个DEMO，后面实现更多样的开发
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
      <category term="RabbitMQ" scheme="http://blog.joylau.cn/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
