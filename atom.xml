<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2019-04-08T09:25:25.379Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 启动报错： Error starting daemon： Error initializing network controller： list bridge addresses failed： no available network</title>
    <link href="http://blog.joylau.cn/2019/04/08/Docker-Start-Error/"/>
    <id>http://blog.joylau.cn/2019/04/08/Docker-Start-Error/</id>
    <published>2019-04-08T09:15:06.000Z</published>
    <updated>2019-04-08T09:25:25.379Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Docker 启动报错： Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</p><h2 id="错误详情"><a href="#错误详情" class="headerlink" title="错误详情"></a>错误详情</h2><p>查看错误日志： <code>journalctl -xe | grep docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@lenovo docker]<span class="comment"># journalctl -xe | grep docker</span></span><br><span class="line">-- Subject: Unit docker.socket has begun start-up</span><br><span class="line">-- Unit docker.socket has begun starting up.</span><br><span class="line">-- Subject: Unit docker.socket has finished start-up</span><br><span class="line">-- Unit docker.socket has finished starting up.</span><br><span class="line">-- Subject: Unit docker.service has begun start-up</span><br><span class="line">-- Unit docker.service has begun starting up.</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.909025064+08:00"</span> level=info msg=<span class="string">"parsed scheme: \"unix\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.909923898+08:00"</span> level=info msg=<span class="string">"scheme \"unix\" not registered, fallback to default scheme"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.910865280+08:00"</span> level=info msg=<span class="string">"parsed scheme: \"unix\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.910909267+08:00"</span> level=info msg=<span class="string">"scheme \"unix\" not registered, fallback to default scheme"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.928785984+08:00"</span> level=info msg=<span class="string">"ccResolverWrapper: sending new addresses to cc: [&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;]"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.928902169+08:00"</span> level=info msg=<span class="string">"ClientConn switching balancer to \"pick_first\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.929039549+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc420606e00, CONNECTING"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937533340+08:00"</span> level=info msg=<span class="string">"ccResolverWrapper: sending new addresses to cc: [&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;]"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937601232+08:00"</span> level=info msg=<span class="string">"ClientConn switching balancer to \"pick_first\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937707487+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc42015bf00, CONNECTING"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.950807950+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc42015bf00, READY"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.952160247+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc420606e00, READY"</span> module=grpc</span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:10.216864045+08:00"</span> level=info msg=<span class="string">"Graph migration to content-addressability took 0.00 seconds"</span></span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:10.218710988+08:00"</span> level=info msg=<span class="string">"Loading containers: start."</span></span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">-- Subject: Unit docker.service has failed</span><br><span class="line">-- Unit docker.service has failed.</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: docker.service failed.</span><br><span class="line">4月 08 16:42:13 lenovo systemd[1]: docker.service holdoff time over, scheduling restart.</span><br><span class="line">-- Subject: Unit docker.socket has begun shutting down</span><br><span class="line">-- Unit docker.socket has begun shutting down.</span><br><span class="line">-- Subject: Unit docker.socket has begun start-up</span><br><span class="line">-- Unit docker.socket has begun starting up.</span><br><span class="line">-- Subject: Unit docker.socket has finished start-up</span><br><span class="line">-- Unit docker.socket has finished starting up.</span><br><span class="line">-- Subject: Unit docker.service has begun start-up</span><br><span class="line">-- Unit docker.service has begun starting up.</span><br></pre></td></tr></table></figure><p>看到这样一句话： <strong>Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</strong></p><p>查看本机网络： <code>ip a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@lenovo docker]<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp7s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000</span><br><span class="line">    link/ether b8:70:f4:24:61:a7 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: wlp8s0b1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether cc:af:78:25:31:51 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.145/24 brd 192.168.10.255 scope global noprefixroute wlp8s0b1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::8de1:5b7d:b7d7:2788/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100</span><br><span class="line">    link/none </span><br><span class="line">    inet 192.168.255.10 peer 192.168.255.9/32 scope global tun0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::e41d:195:f566:33e1/64 scope link flags 800 </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>没有 docker0 的桥接网络</p><p>手动添加一个即可</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link add name docker0 <span class="built_in">type</span> bridge</span><br><span class="line">ip addr add dev docker0 172.17.0.1/16</span><br></pre></td></tr></table></figure><p>再看一下，多了一个 docker0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5: docker0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether a6:7d:d7:94:ab:f3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>重启 docker 即可</p>]]></content>
    
    <summary type="html">
    
      Error starting daemon： Error initializing network controller： list bridge addresses failed： no available network
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 读取数据流图片</title>
    <link href="http://blog.joylau.cn/2019/04/03/OpenCV-ByteImage/"/>
    <id>http://blog.joylau.cn/2019/04/03/OpenCV-ByteImage/</id>
    <published>2019-04-03T02:54:28.000Z</published>
    <updated>2019-04-03T08:18:19.104Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>OpenCV 提供的 API 是直接根据路径读取图片的, 在实际生产环境中,可能大部分情况下都是直接读取网络图片</p><p>在内存就完成图片和 opencv 的 Mat 对象的转换</p><p>那么该如何读取 byte[] 的图片呢?</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>openCV 提供的 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat src = Imgcodecs.imread(<span class="string">"/static/img/17.png"</span>);</span><br></pre></td></tr></table></figure><p>很简单的就转化为 Mat 对象</p><p>而 该方法后面还有一个参数, flags, 该参数可选项有:</p><ul><li><strong>IMREAD_UNCHANGED</strong> = -1,</li><li><strong>IMREAD_GRAYSCALE</strong> = 0,</li><li><strong>IMREAD_COLOR</strong> = 1,</li><li><strong>IMREAD_ANYDEPTH</strong> = 2,</li><li><strong>IMREAD_ANYCOLOR</strong> = 4,</li><li><strong>IMREAD_LOAD_GDAL</strong> = 8,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_2</strong> = 16,</li><li><strong>IMREAD_REDUCED_COLOR_2</strong> = 17,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_4</strong> = 32,</li><li><strong>IMREAD_REDUCED_COLOR_4</strong> = 33,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_8</strong> = 64,</li><li><strong>IMREAD_REDUCED_COLOR_8</strong> = 65,</li><li><strong>IMREAD_IGNORE_ORIENTATION</strong> = 128;</li></ul><p>IMREAD_UNCHANGED: 以图片原有的方式读入,不进行任何改变<br>IMREAD_GRAYSCALE: 以灰度图读取<br>IMREAD_COLOR: 以彩色图读取</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>为了支持 OpenCV 读取 byte[] 的图片,为此我查找了很多资料做了大量的实验,有很多失败报错了,也有读取成功的,下面我将一一列举出来….</p><h3 id="读取失败"><a href="#读取失败" class="headerlink" title="读取失败"></a>读取失败</h3><h4 id="Converters-类"><a href="#Converters-类" class="headerlink" title="Converters 类"></a>Converters 类</h4><p>我留意到 opencv 提供的 api 里有一个 <code>utils</code> 包, 里面有个转换类 <code>Converters</code>, 可以将 Mat 和 一些 java 的基本数据类型进行互相转换,其中有这样 2 个方法: <code>vector_uchar_to_Mat</code> 和 <code>vector_char_to_Mat</code><br>参数是 <code>List&lt;Byte&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testConvertChar2Mat</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;Byte&gt; bs = CollectionUtils.arrayToList(bytes);</span><br><span class="line">        <span class="keyword">return</span> Converters.vector_uchar_to_Mat(bs);</span><br><span class="line"><span class="comment">//        return Converters.vector_char_to_Mat(bs);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>vector_uchar_to_Mat</code>  指有符号</p><p>转换出来的图片是一个像素的竖直线,读取失败</p><h4 id="new-Mat"><a href="#new-Mat" class="headerlink" title="new Mat"></a>new Mat</h4><p>Mat 对象除了转化得到,还可以 new , 再利用 Mat 的 put 方法,来创建 Mat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">    data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换出来的图片也不对,一些花花绿绿的像素点</p><h4 id="new-BufferByte"><a href="#new-BufferByte" class="headerlink" title="new BufferByte"></a>new BufferByte</h4><p>Mat 对象还有个构造方法,最后一个参数是传入 BufferByte,这时只需要在上述步骤中再将 byte[] 转化为 BufferByte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewBuffer</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3,byteBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出异常: <strong>CvException [org.opencv.core.CvException: cv::Exception: OpenCV(4.1.0-pre) /Users/joylau/opencv4/opencv/modules/core/include/opencv2/core/mat.inl.hpp:548: error: (-215:Assertion failed) total() == 0 || data != NULL in function ‘Mat’</strong></p><h3 id="读取成功"><a href="#读取成功" class="headerlink" title="读取成功"></a>读取成功</h3><h4 id="BufferedImage-转换"><a href="#BufferedImage-转换" class="headerlink" title="BufferedImage 转换"></a>BufferedImage 转换</h4><p>一次我在调试代码时 发现<code>HighGui.waitKey();</code> 的实现是将 Mat 对象转化为 BufferedImage 的逻辑,于是我明白了,OpenCV 里操作的 Mat 在显示的时候也需要转化为 BufferedImage<br>源码里有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">toBufferedImage</span><span class="params">(Mat m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type = BufferedImage.TYPE_BYTE_GRAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m.channels() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        type = BufferedImage.TYPE_3BYTE_BGR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bufferSize = m.channels() * m.cols() * m.rows();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">    m.get(<span class="number">0</span>, <span class="number">0</span>, b); <span class="comment">// get all the pixels</span></span><br><span class="line">    BufferedImage image = <span class="keyword">new</span> BufferedImage(m.cols(), m.rows(), type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();</span><br><span class="line">    System.arraycopy(b, <span class="number">0</span>, targetPixels, <span class="number">0</span>, b.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,我逆向转化,将 byte[] 转 BufferedImage ,BufferedImage 再转 Mat 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getBufferedImageByte(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    BufferedImage bImage = ImageIO.read(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">    <span class="keyword">return</span> ((DataBufferByte) bImage.getRaster().getDataBuffer()).getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再将从 BufferedImage 得到的 byte[] 使用 new Mat 对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">    data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法成功读取显示了图片</p><p>于是又引发了我的思考: 为什么直接从文件读取的 byte[] 无法被转化,而 BufferedImage 中得到的 byte[] 却可以被转化</p><p>于是我将 BufferedImage 中得到的 byte[] 在使用,调用 <code>Converters.vector_char_to_Mat</code> 方法</p><p>可惜却失败了…..</p><h4 id="imdecode"><a href="#imdecode" class="headerlink" title="imdecode"></a>imdecode</h4><p>Imgcodecs 类中有一个编码的方法 <code>Imgcodecs.imdecode(Mat buf, int flags)</code><br>Mat 还有个子类 MatOfByte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testImdecode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Imgcodecs.imdecode(<span class="keyword">new</span> MatOfByte(bytes), Imgcodecs.IMREAD_COLOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法可成功转化</p><p>而且比上一个方法的优势是:</p><ol><li>byte[] 不需要再通过 BufferedImage 转化</li><li>不需要初始化 Mat 的长和宽</li></ol><p>为此还可以逆向得出 Mat 转换成 byte[] 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mat转换成byte数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix        要转换的Mat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileExtension 格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] mat2Byte(Mat matrix, String fileExtension) &#123;</span><br><span class="line">    MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">    Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">    <span class="keyword">return</span> mob.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以下是全部测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liuf on 2019-04-01.</span></span><br><span class="line"><span class="comment"> * cn.joylau.code</span></span><br><span class="line"><span class="comment"> * liuf@ahtsoft.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Byte2Mat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testImdecode(getImageByte());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testConvertChar2Mat(getBufferedImageByte(getImageByte()));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testNewBuffer(480,480,getImageByte());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testNewMat(480,480,getImageByte());</span></span><br><span class="line"></span><br><span class="line">        Mat mat = testNewMat(<span class="number">480</span>,<span class="number">480</span>,getBufferedImageByte(getImageByte()));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;,&#123;&#125;"</span>,mat.rows(),mat.cols());</span><br><span class="line">        HighGui.imshow(<span class="string">"byte2mat"</span>,mat);</span><br><span class="line">        HighGui.waitKey();</span><br><span class="line">        HighGui.destroyAllWindows();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getImageByte() <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        Resource resource = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/joylau/work/anhui-project/traffic-service-layer/src/main/resources/static/img/1.jpg"</span>);</span><br><span class="line">        <span class="keyword">return</span> IOUtils.toByteArray(resource.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getBufferedImageByte(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        BufferedImage bImage = ImageIO.read(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">        <span class="keyword">return</span> ((DataBufferByte) bImage.getRaster().getDataBuffer()).getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">        data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewBuffer</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3,byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testConvertChar2Mat</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;Byte&gt; bs = CollectionUtils.arrayToList(bytes);</span><br><span class="line">        <span class="keyword">return</span> Converters.vector_uchar_to_Mat(bs);</span><br><span class="line"><span class="comment">//        return Converters.vector_char_to_Mat(bs);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testImdecode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Imgcodecs.imdecode(<span class="keyword">new</span> MatOfByte(bytes), Imgcodecs.IMREAD_COLOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mat转换成byte数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix        要转换的Mat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileExtension 格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] mat2Byte(Mat matrix, String fileExtension) &#123;</span><br><span class="line">        MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">        Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">        <span class="keyword">return</span> mob.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      OpenCV 提供的 API 是直接根据路径读取图片的,那么该如何读取 byte[] 的图片呢?
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 基础知识与概念</title>
    <link href="http://blog.joylau.cn/2019/03/28/OpenCV-Basic/"/>
    <id>http://blog.joylau.cn/2019/03/28/OpenCV-Basic/</id>
    <published>2019-03-28T08:10:51.000Z</published>
    <updated>2019-04-03T02:48:24.772Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><h3 id="数字图像"><a href="#数字图像" class="headerlink" title="数字图像"></a>数字图像</h3><p>数字图像指的是现在的图像都是以二维数字表示，每个像素的灰度值均由一个数字表示，范围为0-255(2^8)</p><h3 id="二值图像"><a href="#二值图像" class="headerlink" title="二值图像"></a>二值图像</h3><p>图像中每个像素的灰度值仅可取0或1，即不是取黑，就是取白，二值图像可理解为黑白图像</p><h3 id="灰度图像"><a href="#灰度图像" class="headerlink" title="灰度图像"></a>灰度图像</h3><p>图像中每个像素可以由0-255的灰度值表示，具体表现为从全黑到全白中间有255个介于中间的灰色值可以取</p><h3 id="彩色图像"><a href="#彩色图像" class="headerlink" title="彩色图像"></a>彩色图像</h3><p>每幅图像是由三幅灰度图像组合而成，依次表示红绿蓝三通道的灰度值，即我们熟知的RGB，此时彩色图像要视为三维的 <code>[height，width, 3]</code></p><h2 id="CvType"><a href="#CvType" class="headerlink" title="CvType"></a>CvType</h2><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>OpenCV 中，图像可以分别为1，2，3，4 通道</p><ul><li>通道为灰度图；</li><li>通道的图像是RGB555和RGB565。2通道图在程序处理中会用到，如傅里叶变换，可能会用到，一个通道为实数，一个通道为虚数，主要是编程方便。RGB555是16位的，2个字节，5+6+5，第一字节的前5位是R，后三位+第二字节是G，第二字节后5位是B，可见对原图像进行压缩了</li><li>通道为彩色图（RGB）；</li><li>通道为 RGBA ，是RGB加上一个A通道，也叫alpha通道，表示透明度，PNG图像是一种典型的4通道图像。alpha通道可以赋值0到1，或者0到255，表示透明到不透明</li></ul><p>常使用的是1，3，4通道； 2通道不常见</p><h3 id="组合规则"><a href="#组合规则" class="headerlink" title="组合规则"></a>组合规则</h3><p><code>CV_[bite](U|S|F)C[channels]</code></p><p>bite : 比特数，位数。 有 8bite，16bite，32bite，64bite,对应在 Mat 中，每个像素的所占的空间大小，8位即 CV_8</p><p>U|S|F ：</p><pre><code>- U : unsigned int , 无符号整形- S : signed int , 有符号整形- F : float , 单精度浮点型,float类型本身即有符号</code></pre><p>这里的有符号、无符号是针对图像二进制编码来讲的。我在写的过程中大多数情况下都是使用的无符号，即 CV_8U ,CV_16U，当有计算时可能会介入有符号（存在负数），没学过 C++，对底层也一知半解，望高手解答。</p><p>C (channels)：图像的通道数</p><p>比如: <code>CV_8UC3</code> 即 8位无符号的3通道（RGB 彩色）图像</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>8U</p><pre><code>- 说明：无符号的8位图- 值：CV_8UC1,CV_8UC2,CV_8UC3,CV_8UC4- 通道取值范围：0~255</code></pre><p>8S</p><pre><code>- 说明：有符号的8位图- 值：CV_8SC1,CV_8SC2,CV_8SC3,CV_8SC4- 通道取值范围：-128~127</code></pre><p>16U</p><pre><code>- 说明：无符号的16位图- 值：CV_16UC1,CV_16UC2,CV_16UC3,CV_16UC4- 通道取值范围：0~65535</code></pre><p>16S</p><pre><code>- 说明：有符号的16位图- 值：CV_16SC1,CV_16SC2,CV_16SC3,CV_16SC4- 通道取值范围：-32768~32767</code></pre><p>32S</p><pre><code>- 说明：无符号的32位图- 值：CV_32SC1,CV_32SC2,CV_32SC3,CV_32SC4- 通道取值范围：2147483648~2147483647</code></pre><p>32F</p><pre><code>- 说明：浮点型32位图- 值：CV_32FC1,CV_32FC2,CV_32FC3,CV_32FC4- 通道取值范围：1.18*(10(-38次方))~3.40*(10(38次方))</code></pre><p>64F</p><pre><code>- 说明：浮点型64位图-值：CV_64FC1,CV_64FC2,CV_64FC3,CV_64FC4- 通道取值范围：2.23*(10(-308次方))~1.79*(10(308次方))</code></pre><p>1U</p><pre><code>- 说明：1位- 值：IPL_DEPTH_1U- 通道取值范围：0~1</code></pre><h2 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h2><h3 id="常见的色彩空间"><a href="#常见的色彩空间" class="headerlink" title="常见的色彩空间"></a>常见的色彩空间</h3><ul><li>RGB</li><li>HSV</li><li>HIS</li><li>YCRCB</li><li>YUV</li></ul><h3 id="HSV"><a href="#HSV" class="headerlink" title="HSV"></a>HSV</h3><p>HSV分别是色调（Hue），饱和度（Saturation）和亮度（Value）</p><p>H调整颜色；S越大，图像色彩越丰富，颜色越鲜艳；V越大，图像越亮</p><h4 id="HSV颜色取值范围"><a href="#HSV颜色取值范围" class="headerlink" title="HSV颜色取值范围"></a>HSV颜色取值范围</h4><ol><li><p>H:0— 180 : 之所以不是 360,是因为 8 位图 最大是 255,360 已经超出范围,以 180 为限定</p></li><li><p>S: 0— 255</p></li><li><p>V: 0— 255</p></li></ol><p>记住下面这张图, 可使用这张图中的范围来查找某种颜色</p><p><img src="http://image.joylau.cn/blog/OpenCV-HSV.png" alt="HSV"></p><h4 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h4><p><code>Imgproc.cvtColor(src,det,Imgproc.COLOR_BGR2HSV);</code></p>]]></content>
    
    <summary type="html">
    
      记录一下一些学习数字图像处理的基础知识与概念
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器挂载宿主机上的目录时出现 Permission denied</title>
    <link href="http://blog.joylau.cn/2019/03/21/Docker-MountVolumes/"/>
    <id>http://blog.joylau.cn/2019/03/21/Docker-MountVolumes/</id>
    <published>2019-03-21T08:27:48.000Z</published>
    <updated>2019-03-21T10:17:43.109Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>启动 docker 容器时挂载容器以前存在的数据文件时出现了 Permission denied 的错误</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>首先以为是挂载的文件夹有读写数据的权限问题 <code>chmod -R 777 xxxx</code> , 没有解决，依然报错</li><li>再分析是文件目录的所属者的问题： <code>chown -R gname:uname xxxx</code> , 没有解决，依然报错</li><li>这时我们进入容器之后 使用 ll 查看挂载的目录的所属者，发现组名和户名跟宿主机的组名和用户名不一致</li><li>原因在于，操作系统判断用户组和用户其实并不是根据名称来的，而是根据名称对应的 id 来的</li><li>查看用户组和用户名对象的 id, 可查看 <code>/etc/passwd</code></li><li>此时，我们需要将宿主机的用户组用户的 ID 和 容器内挂在目录所需的用户组和用户的 ID 对应起来，写一直即可</li><li>举个例子</li><li>redis 镜像产生的数据文件在 <code>/var/lib/redis</code> 中，并且该目录的用户组和用户都为 <code>redis</code>， 此时我们查看容器的 <code>redis:redis</code> 的 id , 假如是 <code>102:103</code></li><li>此时我们宿主机挂载目录是 <code>/opt/docker/redis/data</code> ,我们改变这个目录的所属者 <code>chown -R 102:103 /opt/docker/redis/data</code></li><li>不要管 <code>102:103</code> 在宿主机系统中有没有该用户组和用户</li><li>再次进入容器就可以看到 <code>/var/lib/redis</code> 目录的所属者是正确的了</li></ol><h3 id="mysql-和-mariaDB-的问题"><a href="#mysql-和-mariaDB-的问题" class="headerlink" title="mysql 和 mariaDB 的问题"></a>mysql 和 mariaDB 的问题</h3><p>这样的情况也发生在 mysql 和 mariaDB 上<br>按照上述的方法似乎没有奏效，确切的说奏效一半<br>因为 <code>/var/lib/mysql</code> 目录中文件夹可以看到，文件却没有权限看到<br>类似这样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">190321 06:02:13 mysqld_safe Logging to '/var/lib/mysql/d240623581db.err'.</span><br><span class="line">190321 06:02:13 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.err: Permission denied</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.pid: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log.00000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log_control: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_buffer_pool: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibdata1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile0: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibtmp1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/multi-master.info: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000002: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000003: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000004: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000005: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000006: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000007: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000008: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000009: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.index: Permission denied</span><br><span class="line">chown: /var/lib/mysql/owncloud: Permission denied</span><br><span class="line">chown: /var/lib/mysql/performance_schema: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">190321 06:02:14 mysqld_safe Logging to '/var/lib/mysql/d240623581db.err'.</span><br><span class="line">190321 06:02:14 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.err: Permission denied</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.pid: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log.00000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log_control: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_buffer_pool: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibdata1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile0: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibtmp1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/multi-master.info: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000002: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000003: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000004: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000005: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000006: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000007: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000008: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000009: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.index: Permission denied</span><br><span class="line">chown: /var/lib/mysql/owncloud: Permission denied</span><br><span class="line">chown: /var/lib/mysql/performance_schema: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br></pre></td></tr></table></figure><p>原因分析是：<br>SELinux 造成的<br>有以下 4 中解决方法：</p><ol><li><code>setenforce 0</code> : 临时关闭 </li><li><code>vi /etc/selinux/config</code> ： 将 <code>SELINUX=enforcing</code> 改为 <code>SELINUX=disabled</code> ，重启</li><li>在docker run 中加入 <code>--privileged=true</code> 给容器加上特定权限</li><li>修改 SELinux 规则 <code>chcon -t mysqld_db_t  -R /opt/docker/mysql/data</code></li></ol>]]></content>
    
    <summary type="html">
    
      解决 Docker 容器挂载宿主机上的目录时出现 Permission denied 的错误
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA (WebStorm) 识别 @ 作为别名进行导包</title>
    <link href="http://blog.joylau.cn/2019/03/20/IntelliJIDEA-Support-@-Alias/"/>
    <id>http://blog.joylau.cn/2019/03/20/IntelliJIDEA-Support-@-Alias/</id>
    <published>2019-03-20T02:35:28.000Z</published>
    <updated>2019-03-20T02:45:57.784Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="配置前"><a href="#配置前" class="headerlink" title="配置前"></a>配置前</h3><p><img src="http://image.joylau.cn/blog/idea-support-alas-1.png" alt="配置前"></p><p>@ 导包的类无法点击跳转,也不识别</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录添加配置文件 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不是真实的 webpack 配置，仅为兼容 webstorm 和 intellij idea 代码跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: <span class="built_in">require</span>(<span class="string">'path'</span>).resolve(__dirname, <span class="string">'src'</span>), <span class="comment">// eslint-disable-line</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后,在 idea 的 preference -&gt; language &amp; frameworks -&gt; javascript -&gt; webpack 路径到更目录下的webpack.config.js</p><p>完成</p>]]></content>
    
    <summary type="html">
    
      IntelliJ IDEA 或者 WebStorm 识别 @ 作为别名进行导包
    
    </summary>
    
      <category term="IntelliJ IDEA篇" scheme="http://blog.joylau.cn/categories/IntelliJ-IDEA%E7%AF%87/"/>
    
    
      <category term="IntelliJ IDEA" scheme="http://blog.joylau.cn/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>CentOS , Ubuntu 和 Mac OS 上编译安装 OpenCV4 及 SpringBoot 的结合使用</title>
    <link href="http://blog.joylau.cn/2019/03/15/OpenCV-Build/"/>
    <id>http://blog.joylau.cn/2019/03/15/OpenCV-Build/</id>
    <published>2019-03-15T07:41:23.000Z</published>
    <updated>2019-03-26T09:22:57.786Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="为什么没有-Windows-下的编译安装"><a href="#为什么没有-Windows-下的编译安装" class="headerlink" title="为什么没有 Windows 下的编译安装"></a>为什么没有 Windows 下的编译安装</h3><p>因为官网已经提供的编译好的 exe 包,双击运行就会解压到特定的目录了,除此之外官网还提供了 ios 版和 安卓版<br>这里着重记录下 CentOS , Ubuntu 和 Mac OS 下的安装,因为官网没有提供编译好的包</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>GCC 4.4.x or later</li><li>CMake 2.8.7 or higher</li><li>Git</li><li>GTK+2.x or higher, including headers (libgtk2.0-dev)</li><li>pkg-config</li><li>Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)</li><li>ffmpeg or libav development packages: libavcodec-dev, libavformat-dev, libswscale-dev</li><li>[optional] libtbb2 libtbb-dev</li><li>[optional] libdc1394 2.x</li><li>[optional] libjpeg-dev, libpng-dev, libtiff-dev, libjasper-dev, libdc1394-22-dev</li><li>[optional] CUDA Toolkit 6.5 or higher</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>安装常用的开发编译工具包, Centos 的命令为: yum groupinstall “Development Tools”, Ubuntu 的命令为: apt-get install build-essential</li><li>安装 cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</li><li>mkdir opencv4; cd opencv4</li><li>git clone <a href="https://github.com/opencv/opencv.git" target="_blank" rel="noopener">https://github.com/opencv/opencv.git</a></li><li>git clone <a href="https://github.com/opencv/opencv_contrib.git" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib.git</a></li><li>cd opencv</li><li>mkdir build</li><li>cd build</li><li>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  (如果不工作的话,删除 -D的空格,cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..)</li><li>make -j7 # runs 7 jobs in parallel 使用7个并行任务来编译</li><li>生成文档 cd ~/opencv/build/doc/; make -j7 doxygen</li><li>make install</li></ol><h3 id="编译好的包"><a href="#编译好的包" class="headerlink" title="编译好的包"></a>编译好的包</h3><ol><li>centos7 版: <a href="http://cloud.joylau.cn:1194/s/kUoNelmj1SX810K" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/kUoNelmj1SX810K</a> 或者  <a href="https://pan.baidu.com/s/1qaZ-TbF0xP0DxaEJKbdt-A" target="_blank" rel="noopener">https://pan.baidu.com/s/1qaZ-TbF0xP0DxaEJKbdt-A</a> 提取码: jkir</li><li>Ubuntu 16.04 版: <a href="http://cloud.joylau.cn:1194/s/TsNRKwxJhM0v0HE" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/TsNRKwxJhM0v0HE</a>  或者  <a href="https://pan.baidu.com/s/1ha6nATLrSt5WPL1iQlmWSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ha6nATLrSt5WPL1iQlmWSg</a> 提取码: gduu</li><li>java 调用所需 opencv-410.jar 包: <a href="http://image.joylau.cn/blog/opencv-410.jar" target="_blank" rel="noopener">http://image.joylau.cn/blog/opencv-410.jar</a></li></ol><h3 id="Mac-OS-上"><a href="#Mac-OS-上" class="headerlink" title="Mac OS 上"></a>Mac OS 上</h3><ol><li>AppStore 上安装 XCode, 安装完成打开 XCode , 同意 license</li><li>安装 HomeBrew</li><li>安装必要依赖: Python 3, CMake and Qt 5</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br><span class="line">brew install cmake</span><br><span class="line">brew install qt5</span><br></pre></td></tr></table></figure><ol start="4"><li>安装环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/opencv4</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量定义</span></span><br><span class="line">cwd=$(<span class="built_in">pwd</span>)</span><br><span class="line">cvVersion=<span class="string">"master"</span></span><br><span class="line">QT5PATH=/usr/<span class="built_in">local</span>/Cellar/qt/5.12.2</span><br><span class="line"></span><br><span class="line">rm -rf opencv/build</span><br><span class="line">rm -rf opencv_contrib/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create directory for installation</span></span><br><span class="line">mkdir -p installation/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span></span><br><span class="line"></span><br><span class="line">sudo -H pip3 install -U pip numpy</span><br><span class="line"><span class="comment"># Install virtual environment</span></span><br><span class="line">sudo -H python3 -m pip install virtualenv virtualenvwrapper</span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# Virtual Environment Wrapper"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$cwd</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment">############ For Python 3 ############</span></span><br><span class="line"><span class="comment"># create virtual environment 由于 mac OS 本身使用的是 Python 2.7 , 而一些本身的应用依赖于 Python 2 ,为了不影响原来的环境,这里创建一个 Python3 的虚拟环境来进行编译</span></span><br><span class="line">mkvirtualenv OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3 -p python3</span><br><span class="line">workon OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3</span><br><span class="line">  </span><br><span class="line"><span class="comment"># now install python libraries within this virtual environment</span></span><br><span class="line">pip install cmake numpy scipy matplotlib scikit-image scikit-learn ipython dlib</span><br><span class="line">  </span><br><span class="line"><span class="comment"># quit virtual environment</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">            -D CMAKE_INSTALL_PREFIX=<span class="variable">$cwd</span>/installation/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span> \</span><br><span class="line">            -D INSTALL_C_EXAMPLES=ON \</span><br><span class="line">            -D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">            -D WITH_TBB=ON \</span><br><span class="line">            -D WITH_V4L=ON \</span><br><span class="line">            -D OPENCV_SKIP_PYTHON_LOADER=ON \</span><br><span class="line">            -D CMAKE_PREFIX_PATH=<span class="variable">$QT5PATH</span> \</span><br><span class="line">            -D CMAKE_MODULE_PATH=<span class="string">"<span class="variable">$QT5PATH</span>"</span>/lib/cmake \</span><br><span class="line">            -D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3/lib/python3.7/site-packages \</span><br><span class="line">        -D WITH_QT=ON \</span><br><span class="line">        -D WITH_OPENGL=ON \</span><br><span class="line">        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \</span><br><span class="line">        -D BUILD_EXAMPLES=ON ..</span><br><span class="line"></span><br><span class="line">make -j$(sysctl -n hw.physicalcpu)</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="5"><li>cmake 后输出如下:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">--   OpenCV modules:</span><br><span class="line">--     To be built:                 aruco bgsegm bioinspired calib3d ccalib core cvv datasets dnn dnn_objdetect dpm face features2d flann freetype fuzzy gapi hfs highgui img_hash imgcodecs imgproc java java_bindings_generator line_descriptor ml objdetect optflow phase_unwrapping photo plot python2 python3 python_bindings_generator quality reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab xfeatures2d ximgproc xobjdetect xphoto</span><br><span class="line">--     Disabled:                    world</span><br><span class="line">--     Disabled by dependency:      -</span><br><span class="line">--     Unavailable:                 cnn_3dobj cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev hdf js matlab ovis sfm viz</span><br><span class="line">--     Applications:                tests perf_tests examples apps</span><br><span class="line">--     Documentation:               NO</span><br><span class="line">--     Non-free algorithms:         NO</span><br><span class="line">-- </span><br><span class="line">--   GUI: </span><br><span class="line">--     QT:                          YES (ver 5.12.2)</span><br><span class="line">--       QT OpenGL support:         YES (Qt5::OpenGL 5.12.2)</span><br><span class="line">--     Cocoa:                       YES</span><br><span class="line">--     OpenGL support:              YES (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/OpenGL.framework /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/OpenGL.framework)</span><br><span class="line">--     VTK support:                 NO</span><br><span class="line">-- </span><br><span class="line">--   Media I/O: </span><br><span class="line">--     ZLib:                        build (ver 1.2.11)</span><br><span class="line">--     JPEG:                        build-libjpeg-turbo (ver 2.0.2-62)</span><br><span class="line">--     WEBP:                        build (ver encoder: 0x020e)</span><br><span class="line">--     PNG:                         build (ver 1.6.36)</span><br><span class="line">--     TIFF:                        build (ver 42 - 4.0.10)</span><br><span class="line">--     JPEG 2000:                   build (ver 1.900.1)</span><br><span class="line">--     OpenEXR:                     build (ver 1.7.1)</span><br><span class="line">--     HDR:                         YES</span><br><span class="line">--     SUNRASTER:                   YES</span><br><span class="line">--     PXM:                         YES</span><br><span class="line">--     PFM:                         YES</span><br><span class="line">-- </span><br><span class="line">--   Video I/O:</span><br><span class="line">--     DC1394:                      NO</span><br><span class="line">--     FFMPEG:                      YES</span><br><span class="line">--       avcodec:                   YES (58.35.100)</span><br><span class="line">--       avformat:                  YES (58.20.100)</span><br><span class="line">--       avutil:                    YES (56.22.100)</span><br><span class="line">--       swscale:                   YES (5.3.100)</span><br><span class="line">--       avresample:                YES (4.0.0)</span><br><span class="line">--     GStreamer:                   NO</span><br><span class="line">--     AVFoundation:                YES</span><br><span class="line">--     v4l/v4l2:                    NO</span><br><span class="line">-- </span><br><span class="line">--   Parallel framework:            GCD</span><br><span class="line">-- </span><br><span class="line">--   Trace:                         YES (with Intel ITT)</span><br><span class="line">-- </span><br><span class="line">--   Other third-party libraries:</span><br><span class="line">--     Intel IPP:                   2019.0.0 Gold [2019.0.0]</span><br><span class="line">--            at:                   /Users/joylau/opencv4/opencv/build/3rdparty/ippicv/ippicv_mac/icv</span><br><span class="line">--     Intel IPP IW:                sources (2019.0.0)</span><br><span class="line">--               at:                /Users/joylau/opencv4/opencv/build/3rdparty/ippicv/ippicv_mac/iw</span><br><span class="line">--     Lapack:                      YES (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Accelerate.framework)</span><br><span class="line">--     Eigen:                       NO</span><br><span class="line">--     Custom HAL:                  NO</span><br><span class="line">--     Protobuf:                    build (3.5.1)</span><br><span class="line">-- </span><br><span class="line">--   OpenCL:                        YES (no extra features)</span><br><span class="line">--     Include path:                NO</span><br><span class="line">--     Link libraries:              -framework OpenCL</span><br><span class="line">-- </span><br><span class="line">--   Python 2:</span><br><span class="line">--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.10)</span><br><span class="line">--     Libraries:                   /usr/lib/libpython2.7.dylib (ver 2.7.10)</span><br><span class="line">--     numpy:                       /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/core/include (ver 1.8.0rc1)</span><br><span class="line">--     install path:                lib/python2.7/site-packages</span><br><span class="line">-- </span><br><span class="line">--   Python 3:</span><br><span class="line">--     Interpreter:                 /usr/<span class="built_in">local</span>/bin/python3 (ver 3.7.2)</span><br><span class="line">--     Libraries:                   /usr/<span class="built_in">local</span>/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib (ver 3.7.2)</span><br><span class="line">--     numpy:                       /usr/<span class="built_in">local</span>/lib/python3.7/site-packages/numpy/core/include (ver 1.16.2)</span><br><span class="line">--     install path:                /Users/joylau/.virtualenvs/OpenCV-master-py3/lib/python3.7/site-packages</span><br><span class="line">-- </span><br><span class="line">--   Python (<span class="keyword">for</span> build):            /usr/bin/python2.7</span><br><span class="line">-- </span><br><span class="line">--   Java:                          </span><br><span class="line">--     ant:                         /Users/joylau/dev/apache-ant-1.10.5/bin/ant (ver 1.10.5)</span><br><span class="line">--     JNI:                         /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers</span><br><span class="line">--     Java wrappers:               YES</span><br><span class="line">--     Java tests:                  YES</span><br><span class="line">-- </span><br><span class="line">--   Install to:                    /Users/joylau/opencv4/installation/OpenCV-master</span><br><span class="line">-- -----------------------------------------------------------------</span><br><span class="line">-- </span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /Users/joylau/opencv4/opencv/build</span><br></pre></td></tr></table></figure><ol start="6"><li>编译好的安装包: <a href="http://cloud.joylau.cn:1194/s/6GMLl09ZAYNAUMU" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/6GMLl09ZAYNAUMU</a> 或者: <a href="https://pan.baidu.com/s/1YBxUD_vB1zKOcxHeAtn6Xw" target="_blank" rel="noopener">https://pan.baidu.com/s/1YBxUD_vB1zKOcxHeAtn6Xw</a> 提取码: twsq </li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="CentOS-上-CMake-版本太低的解决方法"><a href="#CentOS-上-CMake-版本太低的解决方法" class="headerlink" title="CentOS 上 CMake 版本太低的解决方法"></a>CentOS 上 CMake 版本太低的解决方法</h4><ol><li>yum 上安装的版本太低,先卸载掉版本低的,yum remove cmake</li><li><p>cd /opt<br>tar zxvf cmake-3.10.2-Linux-x86_64.tar.gz</p></li><li><p>vim /etc/profile<br>export CMAKE_HOME=/opt/cmake-3.10.2-Linux-x86_64<br>export PATH=$PATH:$CMAKE_HOME/bin</p></li><li><p>source /etc/profile </p></li></ol><h4 id="没有生成-opencv-410-jar"><a href="#没有生成-opencv-410-jar" class="headerlink" title="没有生成 opencv-410.jar"></a>没有生成 opencv-410.jar</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java:                          </span><br><span class="line">--     ant:                         /bin/ant (ver 1.9.4)</span><br><span class="line">--     JNI:                         /usr/lib/jvm/java-1.8.0-openjdk/include /usr/lib/jvm/java-1.8.0-openjdk/include/linux /usr/lib/jvm/java-1.8.0-openjdk/include</span><br><span class="line">--     Java wrappers:               YES</span><br><span class="line">--     Java tests:                  NO</span><br></pre></td></tr></table></figure><p>需要 ant 环境,安装后即可, java 即可进行调用</p><h3 id="IDEA-及-Spring-Boot-项目中的使用"><a href="#IDEA-及-Spring-Boot-项目中的使用" class="headerlink" title="IDEA 及 Spring Boot 项目中的使用"></a>IDEA 及 Spring Boot 项目中的使用</h3><ol><li>下载 opencv-410.jar 包,引入到项目中</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line"></span><br><span class="line">    compile fileTree(<span class="string">dir:</span><span class="string">'libs'</span>,<span class="string">include:</span>[<span class="string">'*.jar'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置动态库路径, vm options: -Djava.library.path=/home/joylau/opencv4/opencv/build/lib</li></ol><p><img src="http://image.joylau.cn/blog/vm_options_config.jpg" alt="vm options"></p><p>mac os 下路径为: -Djava.library.path=/Users/joylau/opencv4/installation/OpenCV-master/share/java/opencv4</p><ol start="3"><li>加载动态库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpencvTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">        System.out.println(Core.VERSION);</span><br><span class="line">        SpringApplication.run(OpencvTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>脸部识别 demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">        CascadeClassifier facebook = <span class="keyword">new</span> CascadeClassifier(<span class="string">"/home/joylau/opencv4/opencv/data/haarcascades/haarcascade_frontalface_alt.xml"</span>);</span><br><span class="line">        <span class="comment">// 2 读取测试图片</span></span><br><span class="line">        Mat image = Imgcodecs.imread(<span class="string">"/home/joylau/图片/image-test-4.jpg"</span>);</span><br><span class="line">        <span class="comment">// 3 特征匹配</span></span><br><span class="line">        MatOfRect face = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        facebook.detectMultiScale(image, face);</span><br><span class="line">        <span class="comment">// 4 匹配 Rect 矩阵 数组</span></span><br><span class="line">        Rect[] rects = face.toArray();</span><br><span class="line">        System.out.println(<span class="string">"匹配到 "</span> + rects.length + <span class="string">" 个人脸"</span>);</span><br><span class="line">        <span class="comment">// 5 为每张识别到的人脸画一个框</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rects.length; i++) &#123;</span><br><span class="line">            Imgproc.rectangle(image,<span class="keyword">new</span> Point(rects[i].x, rects[i].y), <span class="keyword">new</span> Point(rects[i].x + rects[i].width, rects[i].y + rects[i].height), <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">            Imgproc.putText(image,<span class="string">"face-"</span> + i, <span class="keyword">new</span> Point(rects[i].x, rects[i].y),Imgproc.FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),<span class="number">1</span>,Imgproc.LINE_AA,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6 展示图片</span></span><br><span class="line">        HighGui.imshow(<span class="string">"人脸-匹配"</span>, image);</span><br><span class="line">        HighGui.waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.joylau.cn/blog/opencv_test_face.jpg" alt="test_face"></p><blockquote><p>注: 图片来自微博</p></blockquote><ol start="5"><li>边缘检测 demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testContours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取原图</span></span><br><span class="line">        Mat src = Imgcodecs.imread(<span class="string">"/home/joylau/图片/image-test.jpg"</span>);</span><br><span class="line">        <span class="comment">//2 图片灰度化</span></span><br><span class="line">        Mat gary = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.cvtColor(src, gary, Imgproc.COLOR_RGB2GRAY);</span><br><span class="line">        <span class="comment">//3 图像边缘处理</span></span><br><span class="line">        Mat edges = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.Canny(gary, edges, <span class="number">200</span>, <span class="number">500</span>, <span class="number">3</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//4 发现轮廓</span></span><br><span class="line">        List&lt;MatOfPoint&gt; list = <span class="keyword">new</span> ArrayList&lt;MatOfPoint&gt;();</span><br><span class="line">        Mat hierarchy = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.findContours(edges, list, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);</span><br><span class="line">        <span class="comment">//5 绘制轮廓</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = list.size(); i &lt; len; i++) &#123;</span><br><span class="line">            Imgproc.drawContours(src, list, i, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA);</span><br><span class="line">        &#125;</span><br><span class="line">        HighGui.imshow(<span class="string">"边缘检测"</span>, src);</span><br><span class="line">        HighGui.waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.joylau.cn/blog/image-test.jpg" alt="test_source"><br><img src="http://image.joylau.cn/blog/test_contours.jpg" alt="test_contours"></p><ol start="6"><li>实时人脸识别</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OpenCV-4.0.0 实时人脸识别</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">videoFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        VideoCapture capture=<span class="keyword">new</span> VideoCapture(<span class="number">0</span>);</span><br><span class="line">        Mat image=<span class="keyword">new</span> Mat();</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (capture.isOpened()) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                capture.read(image);</span><br><span class="line">                HighGui.imshow(<span class="string">"实时人脸识别"</span>, getFace(image));</span><br><span class="line">                index = HighGui.waitKey(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">while</span> (index != <span class="number">27</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OpenCV-4.0.0 人脸识别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> image 待处理Mat图片(视频中的某一帧)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">getFace</span><span class="params">(Mat image)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">        CascadeClassifier facebook=<span class="keyword">new</span> CascadeClassifier(<span class="string">"/Users/joylau/opencv4/opencv/data/haarcascades/haarcascade_frontalface_alt.xml"</span>);</span><br><span class="line">        <span class="comment">// 2  特征匹配类</span></span><br><span class="line">        MatOfRect face = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        <span class="comment">// 3 特征匹配</span></span><br><span class="line">        facebook.detectMultiScale(image, face);</span><br><span class="line">        Rect[] rects=face.toArray();</span><br><span class="line">        log.info(<span class="string">"匹配到 "</span>+rects.length+<span class="string">" 个人脸"</span>);</span><br><span class="line">        <span class="comment">// 4 为每张识别到的人脸画一个圈</span></span><br><span class="line">        <span class="keyword">for</span> (Rect rect : rects) &#123;</span><br><span class="line">            Imgproc.rectangle(image, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height), <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">            Imgproc.putText(image, <span class="string">"Human"</span>, <span class="keyword">new</span> Point(rect.x, rect.y), Imgproc.FONT_HERSHEY_SIMPLEX, <span class="number">2.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//Mat dst=image.clone();</span></span><br><span class="line">            <span class="comment">//Imgproc.resize(image, image, new Size(300,300));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><center><video src="http://image.joylau.cn/blog/opencv-video-face.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center>]]></content>
    
    <summary type="html">
    
      记录下 CentOS , Ubuntu 和 Mac OS 上编译安装 OpenCV
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Swarm 自定义服务部署的节点</title>
    <link href="http://blog.joylau.cn/2019/03/01/Docker-Swarm-Choice-Node/"/>
    <id>http://blog.joylau.cn/2019/03/01/Docker-Swarm-Choice-Node/</id>
    <published>2019-03-01T01:19:00.000Z</published>
    <updated>2019-03-01T16:01:05.148Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用 docker stack 部署一组服务时,docker 会根据集群的每个节点的资源的情况来进行分配,作为使用者无法参与其中的分配,该怎么解决呢?</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>docker 1.13.0+</li><li>compose version 3+</li></ol><h3 id="deploy-mode"><a href="#deploy-mode" class="headerlink" title="deploy mode"></a>deploy mode</h3><ol><li><code>replicated</code> 默认模式,可自定义服务的副本数,此模式不能决定服务部署到哪个节点上</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">replicated</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>global</code> 定义每个节点均部署一个服务的副本</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">global</span></span><br></pre></td></tr></table></figure><h3 id="node-labels"><a href="#node-labels" class="headerlink" title="node labels"></a>node labels</h3><p>该方法是通过给节点添加标签,然后在 yaml 文件里通过配置标签来决定服务部署到哪些节点</p><ol><li>docker node ls 查看节点</li><li>docker node update –label-add role=service-1 nodeId 给 nodeId 的节点添加 label role=service-1, label 的形式是 map 的键值对形式</li><li>docker node inspect nodeId 查看节点的 labels 信息</li><li>docker node update –label-rm role=service-1 nodeId 删除 label</li></ol><h4 id="service-部署"><a href="#service-部署" class="headerlink" title="service 部署"></a>service 部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name nginx \</span><br><span class="line">  --constraint <span class="string">'node.labels.role == service-1'</span> \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><h4 id="stack-部署"><a href="#stack-部署" class="headerlink" title="stack 部署"></a>stack 部署</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node.labels.role</span> <span class="string">==</span> <span class="string">service-2</span></span><br></pre></td></tr></table></figure><p>constraints 填写多个时，它们之间的关系是 AND;constraints 可以匹配 node 标签和  engine 标签<br>例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">engine.labels.operatingsystem</span> <span class="string">==</span> <span class="string">ubuntu</span> <span class="number">14.04</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用 docker stack 部署一组服务时,docker 会根据集群的每个节点的资源的情况来进行分配,作为使用者无法参与其中的分配,该怎么解决呢?
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Docker Swarm" scheme="http://blog.joylau.cn/tags/Docker-Swarm/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Swarm 集群搭建</title>
    <link href="http://blog.joylau.cn/2019/02/18/Docker-Swarm-Cluster/"/>
    <id>http://blog.joylau.cn/2019/02/18/Docker-Swarm-Cluster/</id>
    <published>2019-02-18T03:36:04.000Z</published>
    <updated>2019-03-01T16:01:05.148Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>docker 18.09</li></ol><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>本篇文章中的搭建过程有多台物理机,如果说是自己测试使用的话,或者只有一台机器,可以使用 docker-machine 来创建多个 docker 主机</li><li>比如创建一个主机名为 work 的 docker 主机 : <code>docker-machine create -d virtualbox worker</code></li><li>之后进入刚才创建的主机 : <code>docker-machine ssh worker</code></li><li>然后就当成是一台独立机器来执行以下的操作</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>初始化 swarm 集群 : <code>docker swarm init --advertise-addr 34.0.7.183</code><ol><li>机器有多个网卡的指定 IP 地址 –advertise-addr</li><li>默认创建的是管理节点</li></ol></li><li>加入刚才创建 swarm 集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-1o1yfsquxasw7c7ah4t7lmd4i89i62u74tutzhtcbgb7wx6csc-1hf4tjv9oz9vpo937955mi0z2 34.0.7.183:2377</span><br></pre></td></tr></table></figure><p>如果说忘了集群管理节点的 token, 可以使用 <code>docker swarm join-token work/manage</code> 来查看加入该集群的命令</p><ol start="3"><li>查看集群节点: <code>docker node list</code></li></ol><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><ol><li><p>单服务部署 <code>docker service create --name nginx -p 80:80 --replaces 4 containAddress</code><br> 上述命令部署了4个 nginx 服务,如果集群有2台主机的话,会在每台主机上部署 2 个服务</p></li><li><p>多服务部署, 使用 yml 配置文件,具体语法参看 <a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></p></li></ol><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="docker-swarm"><a href="#docker-swarm" class="headerlink" title="docker swarm"></a>docker swarm</h4><p>docker swarm init    初始化集群<br>docker swarm join-token worker    查看工作节点的 token<br>docker swarm join-token manager    查看管理节点的 token<br>docker swarm join  加入集群中</p><h4 id="docker-stack"><a href="#docker-stack" class="headerlink" title="docker stack"></a>docker stack</h4><p>docker stack deploy    部署新的服务或更新现有服务<br>docker stack ls    列出现有服务<br>docker stack ps    列出服务中的任务<br>docker stack rm    删除服务<br>docker stack services    列出服务中的具体项<br>docker stack down    移除某个服务（不会删除数据）</p><h4 id="docker-node"><a href="#docker-node" class="headerlink" title="docker node"></a>docker node</h4><p>docker node ls    查看所有集群节点<br>docker node rm    删除某个节点（-f强制删除）<br>docker node inspect    查看节点详情<br>docker node demote    节点降级，由管理节点降级为工作节点<br>docker node promote    节点升级，由工作节点升级为管理节点<br>docker node update    更新节点<br>docker node ps    查看节点中的 Task 任务</p><h4 id="docker-service"><a href="#docker-service" class="headerlink" title="docker service"></a>docker service</h4><p>docker service create    部署服务<br>docker service inspect    查看服务详情<br>docker service logs    产看某个服务日志<br>docker service ls    查看所有服务详情<br>docker service rm    删除某个服务（-f强制删除）<br>docker service scale    设置某个服务个数<br>docker service update    更新某个服务</p><h4 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker machine"></a>docker machine</h4><p>docker-machine create    创建一个 Docker 主机（常用-d virtualbox）<br>docker-machine ls    查看所有的 Docker 主机<br>docker-machine ssh    SSH 到主机上执行命令<br>docker-machine env    显示连接到某个主机需要的环境变量<br>docker-machine inspect    输出主机更多信息<br>docker-machine kill    停止某个主机<br>docker-machine restart    重启某台主机<br>docker-machine rm    删除某台主机<br>docker-machine scp    在主机之间复制文件<br>docker-machine start    启动一个主机<br>docker-machine status    查看主机状态<br>docker-machine stop    停止一个主机</p><h3 id="swarm-集群节点可视化工具"><a href="#swarm-集群节点可视化工具" class="headerlink" title="swarm 集群节点可视化工具"></a>swarm 集群节点可视化工具</h3><p>portainer : 很强大的工具,可以监控本机和远程服务器或者集群环境,远程 docker 主机的话需要远程 docker 主机开启在 2375 端口的服务</p><p><a href="https://www.portainer.io/installation/" target="_blank" rel="noopener">https://www.portainer.io/installation/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  portainer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/portainer:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">portainer</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:9000</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/liufa/portainer/data:/data</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下 docker swarm 集群搭建的过程
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Docker Swarm" scheme="http://blog.joylau.cn/tags/Docker-Swarm/"/>
    
  </entry>
  
  <entry>
    <title>Validated 注解的 groups 使用记录</title>
    <link href="http://blog.joylau.cn/2019/01/26/SpringBoot-Validated/"/>
    <id>http://blog.joylau.cn/2019/01/26/SpringBoot-Validated/</id>
    <published>2019-01-26T14:06:25.000Z</published>
    <updated>2019-03-18T02:19:08.724Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Valid-和-Validated"><a href="#Valid-和-Validated" class="headerlink" title="@Valid 和 @Validated"></a>@Valid 和 @Validated</h3><ol><li><code>@Valid</code> 和 <code>@Validated</code> 注解都用于字段校验</li><li><code>@Valid</code> 所属包为：<code>javax.validation.Valid</code> ; <code>@Validated</code> 所属包为 <code>org.springframework.validation.annotation.Validated</code></li><li><code>@Validated</code> 是 <code>@Valid</code> 的一次封装，是Spring提供的校验机制使用。<code>@Valid</code> 不提供分组功能</li></ol><h3 id="Validated的特殊用法"><a href="#Validated的特殊用法" class="headerlink" title="@Validated的特殊用法"></a>@Validated的特殊用法</h3><p>当一个实体类需要多种验证方式时，例：对于一个实体类的id来说，新增的时候是不需要的，对于更新时是必须的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"id can not be blank!"</span>, groups = &#123;All.class, Update.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"fileName can not be blank!"</span>, groups = &#123;All.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"filePath can not be blank!"</span>, groups = &#123;All.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"metaData can not be empty!"</span>, groups = &#123;All.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String metaData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"uploadTime can not be blank!"</span>, groups = &#123;All.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String uploadTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(@NotBlank(message = <span class="string">"id can not be blank!"</span>, groups = &#123;All.class, Update.class&#125;)</span> String id) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">All</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独对 <code>groups</code> 进行校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加附件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"addAttachment"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBody <span class="title">addAttachment</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> <span class="keyword">final</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="function">                                 @<span class="title">Validated</span><span class="params">(Attachment.All.class)</span> Attachment attachment,</span></span><br><span class="line"><span class="function">                                 BindingResult results)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attachmentApiService.addAttachment(multipartFile,attachment,results);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新单个附件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"updateAttachment"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBody <span class="title">updateAttachment</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>,required = <span class="keyword">false</span>)</span> <span class="keyword">final</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="function">                                    @<span class="title">Validated</span><span class="params">(Attachment.Update.class)</span> Attachment attachment)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attachmentApiService.updateAttachment(multipartFile,attachment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><ol><li>校验的注解中不分配 groups，默认每次都要进行验证</li><li>@Validated 没有添加 groups 属性时，默认验证没有分组的验证属性</li><li>@Validated 添加特定 groups 属性时,只校验该注解中分配了该 groups 的属性</li><li>一个功能方法上处理多个模型对象时，需添加多个验证结果对象,如下所示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addPeople"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">addPeople</span><span class="params">(@Validated People p,BindingResult result,@Validated Person p2,BindingResult result2)</span>  </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下 Spring Boot 中 @Validated 注解的 groups 使用记录
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker 删除 状态为Dead 的容器</title>
    <link href="http://blog.joylau.cn/2019/01/25/Docker-RemoveDeadContainer/"/>
    <id>http://blog.joylau.cn/2019/01/25/Docker-RemoveDeadContainer/</id>
    <published>2019-01-25T05:31:48.000Z</published>
    <updated>2019-01-25T16:01:05.876Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>因为一些不正确的操作,导致容器的状态变成了 dead</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS                      PORTS                                                              NAMES</span><br><span class="line">c21c993c5107        34.0.7.183:5000/joylau/traffic-service:2.1.7          <span class="string">"java -Djava.secur..."</span>   2 weeks ago         Dead                                                                                           traffic-service</span><br><span class="line">dfbd1cdb31c2        34.0.7.183:5000/joylau/traffic-service-admin:1.2.1    <span class="string">"java -Djava.secur..."</span>   2 weeks ago         Dead                                                                                           traffic-service-admin</span><br><span class="line">8778a28ab120        34.0.7.183:5000/joylau/traffic-service-data:2.0.4     <span class="string">"java -Djava.secur..."</span>   2 weeks ago         Dead                                                                                           traffic-service-data</span><br><span class="line">65a3885e08b5        34.0.7.183:5000/joylau/traffic-service-node:1.2.3     <span class="string">"/bin/sh -c './nod..."</span>   2 weeks ago         Dead                                                                                           traffic-service-node</span><br><span class="line">90700440e1df        34.0.7.183:5000/joylau/traffic-service-server:1.2.1   <span class="string">"java -Djava.secur..."</span>   2 weeks ago         Dead                                                                                           traffic-service-server</span><br></pre></td></tr></table></figure><p>这类的容器删除时会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker rm c21c993c5107</span></span><br><span class="line">Error response from daemon: Driver overlay2 failed to remove root filesystem c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64: remove /var/lib/docker/overlay2/099974dbeef827a3bbd932b7b36502763482ae8df25bd80f61a288b71b0ab810/merged: device or resource busy</span><br></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>找到 filesystem 后面的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64 /proc/*/mountinfo</span></span><br></pre></td></tr></table></figure><p>得到如下输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/proc/28032/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28033/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28034/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28035/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28036/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28037/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28038/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28039/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28040/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28041/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28042/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28043/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28044/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28045/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28046/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28047/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br><span class="line">/proc/28048/mountinfo:973 957 0:164 / /var/lib/docker/containers/c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64/shm rw,nosuid,nodev,noexec,relatime shared:189 - tmpfs shm rw,size=65536k</span><br></pre></td></tr></table></figure><p>proc 和 mountinfo 中间的数字将其 kill 掉即可</p><p>写一个批量处理的脚本列出所有的 pid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64 /proc/*/mountinfo | awk <span class="string">'&#123;print substr($1,7,5)&#125;'</span></span><br></pre></td></tr></table></figure><p>再 kill 掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep c21c993c51073f41653aa7fd37dbfd232f8439ca79fd4315a410d0b41d8b0e64 /proc/*/mountinfo | awk <span class="string">'&#123;print substr($1,7,5)&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure><p>print 是awk打印指定内容的主要命令</p><p>$0           表示整个当前行<br>$1           每行第一个字段,每个字段以空格隔开<br>substr($1,7,5) 每行第一个字段,第7个字符开始,截取5个字符</p><p>然后在 <code>docker rm container</code></p><p>完美解决.</p>]]></content>
    
    <summary type="html">
    
      Docker 删除 状态为Dead 的容器
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch analyzer 和 search_analyzer 的使用记录</title>
    <link href="http://blog.joylau.cn/2019/01/24/Elasticsearch-Analyzer/"/>
    <id>http://blog.joylau.cn/2019/01/24/Elasticsearch-Analyzer/</id>
    <published>2019-01-24T02:43:32.000Z</published>
    <updated>2019-01-24T16:01:05.905Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>elasticsearch 6.4.3</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面一段文字用 ik 进行分词</p><p><a href="http://34.0.7.184:9200/_analyze/" target="_blank" rel="noopener">http://34.0.7.184:9200/_analyze/</a> POST</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"关于加快建设合肥地铁七号线的通知说明"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"tokens"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"关于"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"加快"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"建设"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"合肥"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"地铁"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">8</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"七号"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"线"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">13</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"的"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">13</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">14</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"通知"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">14</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">16</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"说明"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个时候如果配置的 analyzer 为 ik_smart 或者 analyzer 和 search_analyzer 都为 ik_smart, 则短语中每一个字都能搜到结果,还可以设置高亮信息来着重看一下</p></li><li><p>如果配置的 analyzer 为 ik search_analyzer 为 standard ,则 <code>通知</code>,<code>说明</code>,<code>七号</code> 这样的词是搜不到的,而 <code>线</code> 和 <code>的</code> 这样的词可以搜到,理解一下</p></li></ul><p><a href="http://34.0.7.184:9200/attachment_libs/_search" target="_blank" rel="noopener">http://34.0.7.184:9200/attachment_libs/_search</a> POST</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"关于"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"fileName^1.0"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"best_fields"</span>,</span><br><span class="line">      <span class="attr">"operator"</span>: <span class="string">"OR"</span>,</span><br><span class="line">      <span class="attr">"slop"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"prefix_length"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"max_expansions"</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attr">"zero_terms_query"</span>: <span class="string">"NONE"</span>,</span><br><span class="line">      <span class="attr">"auto_generate_synonyms_phrase_query"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"fuzzy_transpositions"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"boost"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"includes"</span>: [</span><br><span class="line">      <span class="string">"fileName"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"excludes"</span>: [</span><br><span class="line">      <span class="string">"data"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;span style = 'color:red'&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"post_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;/span&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"*"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"hits"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"hits"</span>: [ ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而搜索 <code>线</code> 返回的结果为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"hits"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"max_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line"><span class="attr">"hits"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"attachment_libs"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"attachment_info"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"fd45d5be-c314-488a-99d3-041acc015377"</span>,</span><br><span class="line"><span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line"><span class="attr">"_source"</span>: &#123;</span><br><span class="line"><span class="attr">"fileName"</span>: <span class="string">"关于加快建设合肥地铁七号线的通知说明"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"highlight"</span>: &#123;</span><br><span class="line"><span class="attr">"fileName"</span>: [</span><br><span class="line"><span class="string">"关于加快建设合肥地铁七号&lt;span style = 'color:red'&gt;线&lt;/span&gt;的通知说明"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>分析器主要有两种情况会被使用，一种是插入文档时，将text类型的字段做分词然后插入倒排索引，第二种就是在查询时，先对要查询的text类型的输入做分词，再去倒排索引搜索</li><li>如果想要让 索引 和 查询 时使用不同的分词器，ElasticSearch也是能支持的，只需要在字段上加上search_analyzer参数<ol><li>在索引时，只会去看字段有没有定义analyzer，有定义的话就用定义的，没定义就用ES预设的</li><li>在查询时，会先去看字段有没有定义search_analyzer，如果没有定义，就去看有没有analyzer，再没有定义，才会去使用ES预设的</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      记录下  elasticsearch analyzer 和 search_analyzer 的区别
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker elasticsearch 集群搭建记录</title>
    <link href="http://blog.joylau.cn/2019/01/23/Docker-Elasticsearch/"/>
    <id>http://blog.joylau.cn/2019/01/23/Docker-Elasticsearch/</id>
    <published>2019-01-23T06:59:43.000Z</published>
    <updated>2019-01-23T08:01:07.041Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PRIVATE_REPO=34.0.7.183:5000</span><br><span class="line">ES_VERSION=6.4.3</span><br><span class="line">ELASTICSEARCH_CLUSTER_DIR=/Users/joylau/dev/idea-project/dev-app/es-doc-office/elasticsearch-cluster</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  node-0:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-0</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-0:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-0:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9201</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9301</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-1:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-1:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=node-0"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9202</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9302</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-2:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-2:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9203</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9303</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-3:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-3:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1,node-2"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-4:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-4</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9204</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9304</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-4:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-4:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-4</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1,node-3"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  esnet:</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>挂载的日志和数据文件的权限</li><li><code>vm.max_map_count</code> 数目的设置</li><li>mac 环境下注意配置 docker 的内存大小设置</li></ol><h3 id="env-init"><a href="#env-init" class="headerlink" title="env.init"></a>env.init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">mkdir -p /home/liufa/es-data/data/&#123;node-0,node-1,node-2,node-3,node-4&#125; &amp;&amp; <span class="built_in">echo</span> es-data directory created success || <span class="built_in">echo</span> es-data directory created failure &amp;&amp; \</span><br><span class="line">mkdir -p /home/liufa/es-data/logs/&#123;node-0,node-1,node-2,node-3,node-4&#125; &amp;&amp; <span class="built_in">echo</span> es-logs directory created success || <span class="built_in">echo</span> es-logs directory created failure &amp;&amp; \</span><br><span class="line">groupadd elasticsearch &amp;&amp; \</span><br><span class="line">useradd elasticsearch -g elasticsearch &amp;&amp; \</span><br><span class="line">chown -R elasticsearch:elasticsearch /home/liufa/es-data/* &amp;&amp; \</span><br><span class="line">chmod -R 777 /home/liufa/es-data/* &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'vm.max_map_count=262144'</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; \</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下自己使用 docker 搭建 elasticsearch 集群环境的记录
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- Elasticsearch health check failed</title>
    <link href="http://blog.joylau.cn/2019/01/16/SpringBoot-Elasticsearch-HealthCheck/"/>
    <id>http://blog.joylau.cn/2019/01/16/SpringBoot-Elasticsearch-HealthCheck/</id>
    <published>2019-01-16T09:24:38.000Z</published>
    <updated>2019-01-16T09:56:13.690Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="版本环境"><a href="#版本环境" class="headerlink" title="版本环境"></a>版本环境</h3><ol><li>spring boot : 2.1.2.RELEASE</li><li>spring-data-elasticsearch :3.1.4.RELEASE</li><li>elasticsearch: 6.4.3</li></ol><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 spring data elasticsearch 来连接使用 elasticsearch, 配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">docker-cluster</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.68</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure><p>已经确认 elasticsearch 的 9300 和 9200 端口无任何问题,均可进行连接</p><p>可是在启动项目是报出如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">2019-01-16 17:17:35.376  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : no modules loaded</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.join.ParentJoinPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.transport.Netty4Plugin]</span><br><span class="line">2019-01-16 17:17:36.045  INFO 36410 --- [           main] o.s.d.e.c.TransportClientFactoryBean     : Adding transport node : 192.168.10.68:9300</span><br><span class="line">2019-01-16 17:17:36.740  INFO 36410 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line">2019-01-16 17:17:36.987  INFO 36410 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path <span class="string">'/actuator'</span></span><br><span class="line">2019-01-16 17:17:37.041  INFO 36410 --- [           main] org.xnio                                 : XNIO version 3.3.8.Final</span><br><span class="line">2019-01-16 17:17:37.049  INFO 36410 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.3.8.Final</span><br><span class="line">2019-01-16 17:17:37.091  INFO 36410 --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) 8080 (http) with context path <span class="string">''</span></span><br><span class="line">2019-01-16 17:17:37.094  INFO 36410 --- [           main] cn.joylau.code.EsDocOfficeApplication    : Started EsDocOfficeApplication <span class="keyword">in</span> 3.517 seconds (JVM running <span class="keyword">for</span> 4.124)</span><br><span class="line">2019-01-16 17:17:37.641  INFO 36410 --- [on(4)-127.0.0.1] io.undertow.servlet                      : Initializing Spring DispatcherServlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-16 17:17:37.641  INFO 36410 --- [on(4)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-16 17:17:37.660  INFO 36410 --- [on(4)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Completed initialization <span class="keyword">in</span> 19 ms</span><br><span class="line">2019-01-16 17:17:37.704  WARN 36410 --- [on(5)-127.0.0.1] s.b.a.e.ElasticsearchRestHealthIndicator : Elasticsearch health check failed</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Connection refused</span><br><span class="line">at org.elasticsearch.client.RestClient<span class="variable">$SyncResponseListener</span>.get(RestClient.java:943) ~[elasticsearch-rest-client-6.4.3.jar:6.4.3]</span><br><span class="line">at org.elasticsearch.client.RestClient.performRequest(RestClient.java:227) ~[elasticsearch-rest-client-6.4.3.jar:6.4.3]</span><br><span class="line">at org.springframework.boot.actuate.elasticsearch.ElasticsearchRestHealthIndicator.doHealthCheck(ElasticsearchRestHealthIndicator.java:61) ~[spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:84) ~[spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:98) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:50) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]</span><br><span class="line">at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:246) [spring-core-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:76) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:61) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:126) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:99) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_131]</span><br><span class="line">at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.access<span class="variable">$300</span>(RMIConnectionImpl.java:76) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl<span class="variable">$PrivilegedOperation</span>.run(RMIConnectionImpl.java:1309) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_131]</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor32.invoke(Unknown Source) ~[na:na]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]</span><br><span class="line">at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:346) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport<span class="variable">$1</span>.run(Transport.java:200) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport<span class="variable">$1</span>.run(Transport.java:197) [na:1.8.0_131]</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.run0(TCPTransport.java:826) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.lambda<span class="variable">$run</span><span class="variable">$0</span>(TCPTransport.java:683) [na:1.8.0_131]</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.run(TCPTransport.java:682) [na:1.8.0_131]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_131]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_131]</span><br><span class="line">Caused by: java.net.ConnectException: Connection refused</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) ~[na:1.8.0_131]</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717) ~[na:1.8.0_131]</span><br><span class="line">at org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor.processEvent(DefaultConnectingIOReactor.java:171) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor.processEvents(DefaultConnectingIOReactor.java:145) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.execute(AbstractMultiworkerIOReactor.java:348) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager.execute(PoolingNHttpClientConnectionManager.java:221) ~[httpasyncclient-4.1.4.jar:4.1.4]</span><br><span class="line">at org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase<span class="variable">$1</span>.run(CloseableHttpAsyncClientBase.java:64) ~[httpasyncclient-4.1.4.jar:4.1.4]</span><br><span class="line">... 1 common frames omitted</span><br></pre></td></tr></table></figure><p>连接被拒绝???</p><p>发现无法进行 elasticsearch 的健康检查,于是想到我使用了 actuator 进行端点健康监控</p><p>经过调试发现如下代码为返回数据:<br>ElasticsearchRestHealthIndicator 类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Response response = <span class="keyword">this</span>.client</span><br><span class="line">.performRequest(<span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/_cluster/health/"</span>));</span><br><span class="line">StatusLine statusLine = response.getStatusLine();</span><br><span class="line"><span class="keyword">if</span> (statusLine.getStatusCode() != HttpStatus.SC_OK) &#123;</span><br><span class="line">builder.down();</span><br><span class="line">builder.withDetail(<span class="string">"statusCode"</span>, statusLine.getStatusCode());</span><br><span class="line">builder.withDetail(<span class="string">"reasonPhrase"</span>, statusLine.getReasonPhrase());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> (InputStream inputStream = response.getEntity().getContent()) &#123;</span><br><span class="line">doHealthCheck(builder,</span><br><span class="line">StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new Request(&quot;GET&quot;, &quot;/_cluster/health/&quot;)</code> 正是 elasticsearch 健康的请求,但是没有看到 host 和 port</p><p>于是用抓包工具发现其请求的是 <code>127.0.0.1:9200</code></p><p>那这肯定是 springboot 的默认配置了</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>查看 <code>spring-boot-autoconfigure-2.1.2.RELEASE.jar</code><br>找到 elasticsearch 的配置 <code>org.springframework.boot.autoconfigure.elasticsearch</code><br>在找到类 <code>RestClientProperties</code><br>看到如下源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.elasticsearch.rest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Comma-separated list of the Elasticsearch instances to use.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; uris = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">Collections.singletonList(<span class="string">"http://localhost:9200"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Credentials username.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Credentials password.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUris</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.uris;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUris</span><span class="params">(List&lt;String&gt; uris)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uris = uris;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Collections.singletonList(&quot;http://localhost:9200&quot;));</code> 没错了,这就是错误的起因</p><p>顺藤摸瓜, 根据 <code>spring.elasticsearch.rest</code> 的配置,配置好 <code>uris</code> 即可</p><p>于是进行如下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">docker-cluster</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.68</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">  elasticsearch:</span></span><br><span class="line"><span class="attr">    rest:</span></span><br><span class="line"><span class="attr">      uris:</span> <span class="string">["http://192.168.10.68:9200"]</span></span><br></pre></td></tr></table></figure><p>集群中的多个节点就写多个</p><p>启动,没有出现错误</p><p>还有一种方式也可以解决,但是并不是一种好的解决方式,那就是关闭 actuator 对 elasticsearch 的健康检查</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  health:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      springboot 使用 actuator 造成 elasticsearch health check failed
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 构建 elastic-job 项目的奇怪依赖问题</title>
    <link href="http://blog.joylau.cn/2019/01/14/Gradle-Elastic-Job-Dependency/"/>
    <id>http://blog.joylau.cn/2019/01/14/Gradle-Elastic-Job-Dependency/</id>
    <published>2019-01-14T09:54:39.000Z</published>
    <updated>2019-01-15T03:07:05.608Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>按照官网的说法, gradle 的配置如下:</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-core:2.1.5'</span>)</span><br><span class="line">    </span><br><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-spring:2.1.5'</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>这样配置后,写好示例代码,发现始终连接不上 zookeeper,抛出以下错误:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">An attempt was made to call the method org.apache.curator.framework.api.CreateBuilder.creatingParentsIfNeeded()Lorg/apache/curator/framework/api/ProtectACLCreateModePathAndBytesable; but it does not exist. Its class, org.apache.curator.framework.api.CreateBuilder, is available from the following locations:</span><br><span class="line"></span><br><span class="line">    jar:file:/Users/joylau/.gradle/caches/modules-<span class="number">2</span>/files-<span class="number">2.1</span>/org.apache.curator/curator-framework/<span class="number">4.0</span>.1/<span class="number">3</span>da85d2bda41cb43dc18c089820b67d12ba38826/curator-framework-<span class="number">4.0</span>.1.jar!/org/apache/curator/framework/api/CreateBuilder.class</span><br><span class="line"></span><br><span class="line">It was loaded from the following location:</span><br><span class="line"></span><br><span class="line">    file:/Users/joylau/.gradle/caches/modules-<span class="number">2</span>/files-<span class="number">2.1</span>/org.apache.curator/curator-framework/<span class="number">4.0</span>.1/<span class="number">3</span>da85d2bda41cb43dc18c089820b67d12ba38826/curator-framework-<span class="number">4.0</span>.1.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Correct the classpath of your application so that it contains a single, compatible version of org.apache.curator.framework.api.CreateBuilder</span><br></pre></td></tr></table></figure><ol start="3"><li><p>一开始我以为是搭建的 zookeeper 环境有问题,但是用其他工具可以连接的上</p></li><li><p>又怀疑是 zookeeper 的版本问题,查看了 <code>com.dangdang:elastic-job-common-core:2.1.5</code> , 发现其依赖的 zookeeper 版本是 <code>org.apache.zookeeper:zookeeper:3.5.3-beta</code></p></li><li><p>于是又用 docker 搭建了个 3.5.3-beta 的版本的 zookeeper 单机版</p></li><li><p>结果问题依旧…….</p></li><li><p>中间查找问题花费了很长的时间…..</p></li><li><p>后来把官方的 demo clone 到本地跑次看看,官方的 demo 仅仅依赖一个包 <code>com.dangdang:elastic-job-lite-core:2.1.5</code></p></li><li><p>发现这个 demo 没有问题,可以连接的上 zookeeper</p></li><li><p>对比发现2个项目的依赖版本号不一致</p></li></ol><p><img src="http://image.joylau.cn/blog/elastic-job-gradle-dependencies.png" alt="对比图"></p><ol start="11"><li><p>看到 demo 里依赖的 <code>org.apache.curator:curator-framework</code> 和 <code>org.apache.curator:curator-recipes</code> 都是 2.10.0, 而我引入的版本却是gradle 上的最新版 4.0.1, 而且也能看到2者的 zookeeper 的版本也不一致,一个是 3.4.6,一个是 3.5.3-beta</p></li><li><p>问题所在找到了</p></li><li><p>解决问题</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-core:2.1.5'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-spring:2.1.5'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'org.apache.curator:curator-framework:2.10.0'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'org.apache.curator:curator-recipes:2.10.0'</span>)</span><br></pre></td></tr></table></figure><ol start="14"><li><p>手动声明版本为 2.10.0</p></li><li><p>问题解决,但是为什么 gradle 会造成这样的问题? 为什么传递依赖时, gradle 会去找最新的依赖版本? 这些问题我还没搞清楚….</p></li><li><p>日后搞清楚了,或者有眉目了,再来更新这篇文章.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用 gradle 构建的基于 springboot 的 elastic-job 的项目发现始终连接不上 zookeeper, 一顿研究后,发现事情并不简单.....
    
    </summary>
    
      <category term="Gradle篇" scheme="http://blog.joylau.cn/categories/Gradle%E7%AF%87/"/>
    
    
      <category term="Gradle" scheme="http://blog.joylau.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>关于Jdk 8 Stream 的使用记录</title>
    <link href="http://blog.joylau.cn/2018/12/24/JDK8-Stream-Use/"/>
    <id>http://blog.joylau.cn/2018/12/24/JDK8-Stream-Use/</id>
    <published>2018-12-24T15:27:38.000Z</published>
    <updated>2019-01-04T05:26:26.526Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="LocalDateTime-将-long-格式的时间转化本地时间字符串"><a href="#LocalDateTime-将-long-格式的时间转化本地时间字符串" class="headerlink" title="LocalDateTime 将 long 格式的时间转化本地时间字符串"></a>LocalDateTime 将 long 格式的时间转化本地时间字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime</span><br><span class="line">        .ofEpochSecond(System.currentTimeMillis() / <span class="number">1000</span>, <span class="number">0</span>, ZoneOffset.ofHours(<span class="number">8</span>))</span><br><span class="line">        .format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>))</span><br></pre></td></tr></table></figure><h2 id="reduce-导致的源集合对象改变"><a href="#reduce-导致的源集合对象改变" class="headerlink" title="reduce 导致的源集合对象改变"></a>reduce 导致的源集合对象改变</h2><p>例如下属代码导致 images 里的 DataImage 对象里的 stake 对象的数量改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,List&lt;HighwayStake&gt;&gt; roadStakeMap = images.stream()</span><br><span class="line">               .filter(image -&gt; !image.getStakes().isEmpty())</span><br><span class="line">               .map(DataImage::getStakes())</span><br><span class="line">               .reduce((highwayStakes, highwayStakes2) -&gt; &#123;</span><br><span class="line">                   highwayStakes2.addAll(highwayStakes);</span><br><span class="line">                   <span class="keyword">return</span> highwayStakes2;</span><br><span class="line">               &#125;)</span><br><span class="line">               .orElse(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">               .stream()</span><br><span class="line">               .collect(Collectors.groupingBy(HighwayStake::getDlmc));</span><br></pre></td></tr></table></figure><p>因为对 dataImage 的 stakes 集合进行了合并,将 map 操作改为 复制一个新的 list , 而不是操作原来的 stakes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,List&lt;HighwayStake&gt;&gt; roadStakeMap = images.stream()</span><br><span class="line">               .filter(image -&gt; !image.getStakes().isEmpty())</span><br><span class="line">               .map(dataImage -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;(dataImage.getStakes()))</span><br><span class="line">               .reduce((highwayStakes, highwayStakes2) -&gt; &#123;</span><br><span class="line">                   highwayStakes2.addAll(highwayStakes);</span><br><span class="line">                   <span class="keyword">return</span> highwayStakes2;</span><br><span class="line">               &#125;)</span><br><span class="line">               .orElse(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">               .stream()</span><br><span class="line">               .collect(Collectors.groupingBy(HighwayStake::getDlmc));</span><br></pre></td></tr></table></figure><h2 id="List-的深度拷贝"><a href="#List-的深度拷贝" class="headerlink" title="List 的深度拷贝"></a>List 的深度拷贝</h2><p>上述的问题实际上是一个 list 的拷贝,而且是 浅度复制</p><p><code>new ArrayList&lt;&gt;(list)</code> 和 <code>Collections.copy(dest,src)</code> 都是浅度复制</p><p>下面代码是一个靠谱的 深度拷贝, 需要 T 实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list 深度复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">deepCopy</span><span class="params">(List&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">    ByteArrayOutputStream byteOut = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    List&lt;T&gt; dest = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(byteOut);</span><br><span class="line">        out.writeObject(source);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream byteIn = <span class="keyword">new</span> ByteArrayInputStream(byteOut.toByteArray());</span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(byteIn);</span><br><span class="line">        dest = (List&lt;T&gt;) in.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reduce-使用记录"><a href="#reduce-使用记录" class="headerlink" title="reduce() 使用记录"></a>reduce() 使用记录</h2><p>reduce 有三种方法可以使用:</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code></li></ul><p>第一种传入二元运算表达式,第二种是带初始值的二元运算表达式,这里着重记录下第三种的使用方式</p><p>第三种第一个参数方法的返回值类型,<br>第二个参数是一个二元运算表达式,这个表达式的第一个参数是方法的返回值,也就是方法的第一个参数,第二个参数是 Stream 里的值<br>第三个参数也是一个二元运算表达式,表达式的2个参数都是方法返回值的类型,用于对返回值类型的操作</p><p>第三个参数在非并发的情况下返回任何类型(甚至是 null)都没有影响,因为在非并发情况下,第三个二元表达式根本不会执行</p><p>那么第三个二元表达式用在并发的情况下,在并发的情况下,第二个二元表达式的第一个参数始终是方法的第一个类型,第三个三元表达式用于将不同线程操作的结果汇总起来</p><h2 id="map-和-flatMap"><a href="#map-和-flatMap" class="headerlink" title="map() 和 flatMap()"></a>map() 和 flatMap()</h2><p>区别在于, map() 返回自定义对象, 而 flatMap() 返回 Stream 流对象</p><h2 id="distinct-使用记录"><a href="#distinct-使用记录" class="headerlink" title="distinct() 使用记录"></a>distinct() 使用记录</h2><p>最近在 lamda 的 stream 进行 list 去重复的时候，发现没有生效<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;FollowAnalysisPojo&gt;&gt;&gt; maps = allList</span><br><span class="line">            .parallelStream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect(Collectors.groupingBy(FollowAnalysisPojo::getMainPlateNum,Collectors.groupingBy(FollowAnalysisPojo::getPlateNum)));</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被跟车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String mainPlateNum;</span><br><span class="line">    <span class="comment">/*跟踪车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String plateNum;</span><br><span class="line">    <span class="keyword">private</span> String vehicleType;</span><br><span class="line">    <span class="keyword">private</span> String siteName;</span><br><span class="line">    <span class="keyword">private</span> String directionName;</span><br><span class="line">    <span class="comment">/*车主时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeMain;</span><br><span class="line">    <span class="comment">/*伴随时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeSub;</span><br><span class="line">    <span class="comment">/*跟踪次数*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer trackCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录被跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer mainRowSpan = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowSpan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key = UUID.randomUUID().toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码是想做 先对查询出来的数据进行去重复的操作，然后在按照被跟车牌和跟踪车牌进行分组操作<br>有点需要说明的是 <code>parallelStream()</code> 比我们常用的 <code>stream()</code> 是并行多管操作，速度上更快</p><p>然后发现的问题是并没有去重复，当时也在奇怪 distinct() 里并没有任何参数来指定如何使用规则来去重复</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>重写List中实体类的 <code>equals()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当车主时间,伴随时间都相同时，则认为是一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> FollowAnalysisPojo))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        FollowAnalysisPojo followAnalysisPojo = (FollowAnalysisPojo)obj;</span><br><span class="line">        <span class="keyword">return</span> passTimeMain.equals(followAnalysisPojo.passTimeMain) &amp;&amp; passTimeSub.equals(followAnalysisPojo.passTimeSub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就按照我自定义的规则进行去重复了<br>运行了一下，发现还是不起作用<br>debug了一下，发现根本没有执行重写的 equals 方法<br>原来还需要重写 <code>hashCode()</code> 方法<br>在 <code>equals()</code> 方法 执行前会先执行 <code>hashCode()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新 equals 方法必须重新 hashCode方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = passTimeMain.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + passTimeMain.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以了。</p><h3 id="2018-9-13-更新"><a href="#2018-9-13-更新" class="headerlink" title="2018-9-13 更新"></a>2018-9-13 更新</h3><p>如果我们不重写方法，有没有办法按照List中bean的某个属性来去重复呢？答案是有的，利用的是 stream 的 reduce，用一个set 来存放 key,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;JSONObject&gt; result = trails.stream()</span><br><span class="line">            .filter(distinctByKey(VehicleTrail::getPlateNbr))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; seen = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.add(keyExtractor.apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java 8 lamda 表达式的 stream 有很多实用的方法，这里记录下日常的使用记录
    
    </summary>
    
      <category term="Java篇" scheme="http://blog.joylau.cn/categories/Java%E7%AF%87/"/>
    
    
      <category term="java" scheme="http://blog.joylau.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker exec failed docker 无法进入容器问题解决</title>
    <link href="http://blog.joylau.cn/2018/12/19/Docker-Exec-Failed/"/>
    <id>http://blog.joylau.cn/2018/12/19/Docker-Exec-Failed/</id>
    <published>2018-12-19T12:11:00.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="无法进入容器"><a href="#无法进入容器" class="headerlink" title="无法进入容器"></a>无法进入容器</h3><p>docker exec -it name /bin/sh 失败,<br>查看容器 inspect 报错信息如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pc error: code = 2 desc = oci runtime error: <span class="built_in">exec</span> failed: </span><br><span class="line">container_linux.go:247: starting container process caused <span class="string">"process_linux.go:110: </span></span><br><span class="line"><span class="string">decoding init error from pipe caused \"read parent: connection reset by peer\""</span></span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>docker 版本为: Docker version 1.13.1, build 07f3374/1.13.1</li><li>centos 版本为: CentOS Linux release 7.3.1611 (Core) </li><li>错误原因: 似乎是 docker RPM 软件包的更新时引入的错误。一个临时的解决方法是将所有docker软件包降级到以前的版本（1.13.1-75似乎可以）</li></ol><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum downgrade docker docker-client docker-common</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      docker 进入容器失败,报错如下
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Compose 中多容器启动顺序问题</title>
    <link href="http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/"/>
    <id>http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/</id>
    <published>2018-12-19T02:40:54.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们在 docker-compose 一条命令就启动我们的多个容器时,需要考虑到容器之间的启动顺序问题…..</p><p>比如有的服务依赖数据库的启动, service 依赖 eureka 的启动完成</p><p>docker compose 里有 depends_on 配置,但是他不能等上一个容器完全启动完成,才启动下一个完成,这就会导致很多问题的发送</p><h3 id="官方的做法"><a href="#官方的做法" class="headerlink" title="官方的做法"></a>官方的做法</h3><p>地址 : <a href="https://docs.docker.com/compose/startup-order/" target="_blank" rel="noopener">https://docs.docker.com/compose/startup-order/</a><br>官方的思路是使用一个脚本,轮询给定的主机和端口，直到它接受 TCP 连接<br>个人感觉这种方式不是很好</p><h3 id="health-健康检查方法"><a href="#health-健康检查方法" class="headerlink" title="health 健康检查方法"></a>health 健康检查方法</h3><p>比如下面的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-server:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9368</span><span class="string">:9368</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/server:/home/liufa/app/server/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">  healthcheck:</span></span><br><span class="line"><span class="attr">    test:</span> <span class="string">"/bin/netstat -anp | grep 9367"</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3</span><span class="string">s</span></span><br><span class="line"><span class="attr">    retries:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-admin:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9335</span><span class="string">:9335</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/admin:/home/liufa/app/admin/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  depends_on:</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      condition:</span> <span class="string">service_healthy</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - server:</span><span class="string">traffic-service-eureka</span></span><br></pre></td></tr></table></figure><p>server 使用了健康检查 healthcheck</p><ul><li><code>test</code> : 命令,必须是字符串或列表，如果它是一个列表，第一项必须是 NONE，CMD 或 CMD-SHELL ；如果它是一个字符串，则相当于指定CMD-SHELL 后跟该字符串</li><li><code>interval</code>: 每次执行的时间间隔</li><li><code>timeout</code>: 每次执行时的超时时间,超过这个时间,则认为不健康</li><li><code>retries</code>: 重试次数,如果 retries 次后都是失败,则认为容器不健康</li></ul><p>健康状态返回 0 (health) 1 (unhealth) 2(reserved)</p><p>test 命令的通用是 <code>&#39;xxxx &amp;&amp; exit 0 || exit 1&#39;</code> , 2 一般不使用</p><p>admin depends_on server ,且条件是 service_healthy ,即容器为健康状态,即 9368 端口开启</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>上述的写法只在 docker-compose.yml  version: ‘2.1’ 版本中生效,其他版本会报错</p>]]></content>
    
    <summary type="html">
    
      我们在 docker-compose 一条命令就启动我们的多个容器时,需要考虑到容器之间的启动顺序问题.....
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Docker-Compose" scheme="http://blog.joylau.cn/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud --- Docker 部署问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/18/SpringCloud-Docker/"/>
    <id>http://blog.joylau.cn/2018/12/18/SpringCloud-Docker/</id>
    <published>2018-12-18T00:45:35.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Docker-容器中-IP-的配置"><a href="#Docker-容器中-IP-的配置" class="headerlink" title="Docker 容器中 IP 的配置"></a>Docker 容器中 IP 的配置</h3><p>将 spring cloud 项目部署到 docker 容器中后,虽然可以配置容器的端口映射到宿主机的端口<br>但是在 eureka 界面显示的instance id 是一串随机的字符串,类似于 d97d725bf6ae 这样的<br>但是,事实上,我们想让他显示出 IP ,这样我们可以直接点击而打开 info 端点信息</p><p>修改 3 处配置项:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://34.0.7.183:9368/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span></span><br></pre></td></tr></table></figure><ol><li><code>eureka.instance.prefer-ip-address</code> 配置为 true , 表示 instance 使用 ip 配置</li><li><code>eureka.instance.prefer-ip-address</code> 配置当前 instance 的物理 IP</li><li><code>eureka.instance.prefer-instance-id</code> 界面上的 instance-id 显示为 ip + 端口</li></ol><h3 id="docker-compose-的解决方法"><a href="#docker-compose-的解决方法" class="headerlink" title="docker-compose 的解决方法"></a>docker-compose 的解决方法</h3><p>通常情况下,我们使用 springcloud 都会有很多的服务需要部署,就会产生很多的容器,这么多的容器再使用 docker 一个个操作就显得很复杂<br>这时候需要一个编排工具,于是我们就使用 docker-compose 来部署 springcloud 服务</p><ol><li>修改 eureka 的配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>使用 docker-compose 我们放弃使用 ip 来进行容器间的相互通信,继而使用 hostname,这就相当于在 <code>/etc/hosts</code> 添加了一条记录</p><ol start="2"><li>接下来所有的 eureka 的 client 都使用 traffic-service-eureka 这个 hostname 来连接</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://traffic-service-eureka:9368/eureka/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果说想在 eureka 的界面上能够直接显示宿主机的 IP 和 连接地址的话,还需要设置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span></span><br></pre></td></tr></table></figure><ol start="4"><li>docker-compose 的配置:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-server:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9368</span><span class="string">:9368</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/server:/home/liufa/app/server/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">  healthcheck:</span></span><br><span class="line"><span class="attr">    test:</span> <span class="string">"/bin/netstat -anp | grep 9368"</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3</span><span class="string">s</span></span><br><span class="line"><span class="attr">    retries:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-admin:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9335</span><span class="string">:9335</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/admin:/home/liufa/app/admin/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  depends_on:</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      condition:</span> <span class="string">service_healthy</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - server:</span><span class="string">traffic-service-eureka</span></span><br></pre></td></tr></table></figure><p>service 模块 links server 模块,再起个别名 traffic-service-eureka ,因为我配置文件里配置的是 traffic-service-eureka,<br>这样 service 模块就可以通过 server 或者 traffic-service-eureka 来访问 server 了</p><p>另外,配置的 hostname,可以进入 容器中查看 <code>/etc/hosts</code> 该配置会在 文件中生成一个容器的 ip 和 hostname 的记录</p><h3 id="多个服务加载顺序问题"><a href="#多个服务加载顺序问题" class="headerlink" title="多个服务加载顺序问题"></a>多个服务加载顺序问题</h3><p>详见 : <a href="http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/">http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/</a></p>]]></content>
    
    <summary type="html">
    
      该篇文章记录使用 Docker 部署 SpringCloud 遇到的问题
    
    </summary>
    
      <category term="SpringCloud篇" scheme="http://blog.joylau.cn/categories/SpringCloud%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="SpringCloud" scheme="http://blog.joylau.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 上路由表的操作记录</title>
    <link href="http://blog.joylau.cn/2018/12/14/MacOS-Route/"/>
    <id>http://blog.joylau.cn/2018/12/14/MacOS-Route/</id>
    <published>2018-12-14T08:04:39.000Z</published>
    <updated>2018-12-18T05:56:47.423Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p>查看路由表: <code>netstat -nr</code></p></li><li><p>添加路由: <code>sudo route add 34.0.7.0 34.0.7.1</code></p></li><li><p>删除路由: <code>sudo route delete 0.0.0.0</code></p></li><li><p>清空路由表: <code>networksetup -setadditionalroutes &quot;Ethernet&quot;</code>,  “Ethernet” 指定路由走哪个设备（查看当前的设备可以使用这个命令 <code>networksetup -listallnetworkservices</code></p></li><li><p>清空路由表: <code>sudo route flush</code> , 是否有效没测试过,通过 <code>man route</code> 看到的,等哪天试过了,再来更新这个内容是否有效</p></li></ol><h3 id="无线网卡和-USB-有线网卡同时使用"><a href="#无线网卡和-USB-有线网卡同时使用" class="headerlink" title="无线网卡和 USB 有线网卡同时使用"></a>无线网卡和 USB 有线网卡同时使用</h3><p>我这里的使用场景是无线接外网, USB 网卡接内网,无线路由的网关是 192.168.0.1, USB 网卡的网关是 34.0.7.1</p><ol><li><p>删除默认路由: <code>sudo route delete 0.0.0.0</code></p></li><li><p>添加默认路由走无线网卡: <code>sudo route add 0.0.0.0 192.168.0.1</code></p></li><li><p>内网走 USB 网卡: <code>sudo route add 34.0.7.0 34.0.7.1</code></p></li><li><p>调整网络顺序,网络属性里面的多个网卡的优先级顺序问题。基本原则是哪个网卡访问互联网，他的优先级就在上面就可以了</p></li></ol><blockquote><p>有个问题没搞明白, 按逻辑说这样添加的静态路由是临时的,在重启后会消失失效,可实际上我重启了之后并没有失效</p></blockquote><h3 id="配置永久静态路由"><a href="#配置永久静态路由" class="headerlink" title="配置永久静态路由"></a>配置永久静态路由</h3><ol><li><p><code>networksetup</code> mac 自带的工具,升级到最新的Sierra后拥有,是个“系统偏好设置”中网络设置工具的终端版</p></li><li><p><code>networksetup –help</code> 可以查看具体的帮助</p></li><li><p>添加静态永久路由: <code>networksetup -setadditionalroutes &quot;USB 10/100/1000 LAN&quot; 10.188.12.0 255.255.255.0 192.168.8.254</code><br> “USB 10/100/1000 LAN” 指定路由走哪个设备（查看当前的设备可以使用这个命令 <code>networksetup -listallnetworkservices</code> </p></li><li><p><code>netstat -nr</code> 查看路由表</p></li></ol>]]></content>
    
    <summary type="html">
    
      记录下 MacOS 上关于路由的记录
    
    </summary>
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux 定时删除 10 天前的日志文件</title>
    <link href="http://blog.joylau.cn/2018/12/13/Linux-Cron/"/>
    <id>http://blog.joylau.cn/2018/12/13/Linux-Cron/</id>
    <published>2018-12-13T07:23:09.000Z</published>
    <updated>2019-01-24T16:01:05.905Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置一个定时清理的任务"><a href="#配置一个定时清理的任务" class="headerlink" title="配置一个定时清理的任务"></a>配置一个定时清理的任务</h3><ol><li><code>crontab -e</code> , 添加一个定时任务, 或者 <code>vim /etc/crontab</code> 添加一条记录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 0 * * * /home/liufa/app/cron/del_log.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 0 * * * root sh /home/liufa/app/cron/del_log.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>每天 0 点 10 分运行上述命令文件</p><ol start="2"><li><p>创建文件: del_log.sh</p></li><li><p>授权 <code>chmod +x ./del_log.sh</code></p></li><li><p>删除 10 天的日志文件 </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">find /home/liufa/app/node/logs -mtime +10 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><ol start="4"><li>重启定时任务, <code>systemctl restart crond</code> , 在 Ubuntu 上叫 cron <code>systemctl restart cron</code></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>执行脚本使用/bin/sh（防止脚本无执行权限），要执行的文件路径是从根开始的绝对路径（防止找不到文件）</li><li>尽量把要执行的命令放在脚本里，然后把脚本放在定时任务里。对于调用脚本的定时任务，可以把标准输出错误输出重定向到空。</li><li>定时任务中带%无法执行，需要加\转义</li><li>如果时上有值，分钟上必须有值</li><li>日和周不要同时使用，会冲突</li><li><code>&gt;&gt;</code> 与 <code>&gt;/dev/null 2&gt;&amp;1</code> 不要同时存在</li></ol>]]></content>
    
    <summary type="html">
    
      我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="Crond" scheme="http://blog.joylau.cn/tags/Crond/"/>
    
  </entry>
  
</feed>
