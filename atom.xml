<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2021-05-16T05:53:39.696Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch maximum shards open 的问题</title>
    <link href="http://blog.joylau.cn/2021/03/12/Elasticsearch-Max-Shards/"/>
    <id>http://blog.joylau.cn/2021/03/12/Elasticsearch-Max-Shards/</id>
    <published>2021-03-12T02:53:54.000Z</published>
    <updated>2021-05-16T05:53:39.696Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/modules-cluster.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.10/modules-cluster.html</a></p><p>修改 yml 文件：</p><p>cluster.max_shards_per_node 的配置</p><p>或者</p><p>PUT _cluster/settings</p><pre><code class="json">    {      &quot;transient&quot;: {        &quot;cluster.max_shards_per_node&quot;: 5000      }    }</code></pre>]]></content>
    
    <summary type="html">
    
      Elasticsearch maximum shards open 的问题
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- Jackson 关于日期时间的注解</title>
    <link href="http://blog.joylau.cn/2021/02/18/SpringBoot-Jackson/"/>
    <id>http://blog.joylau.cn/2021/02/18/SpringBoot-Jackson/</id>
    <published>2021-02-18T03:21:06.000Z</published>
    <updated>2021-05-16T05:53:39.696Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”)   : 后端 =&gt;前端的转换<br>@DateTimeFormat(pattern = “yyyy-MM-dd’T’HH:mm:ss”) ： 前端 =&gt; 后端的转换<br>@JsonDeserialize(using = LocalDateTimeDeserializer.class) ： jackson 反序列化<br>@JsonSerialize(using = LocalDateTimeSerializer.class)： jackson 序列化</p><p>注意：</p><ol><li><p>当 @JsonFormat 和 @JsonDeserialize 或者 @JsonSerialize 同时存在时， @JsonFormat 优先级更高</p></li><li><p>@JsonFormat不仅可以完成后台到前台参数传递的类型转换，还可以实现前台到后台类型转换。</p></li></ol><p>当content-type为application/json时，优先使用@JsonFormat的pattern进行类型转换。而不会使用@DateTimeFormat进行类型转换。</p>]]></content>
    
    <summary type="html">
    
      Jackson 关于日期时间的注解
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Jackson" scheme="http://blog.joylau.cn/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Grafana 设置二级目录及配置 Nginx 代理</title>
    <link href="http://blog.joylau.cn/2021/02/15/Grafana-Set-Context/"/>
    <id>http://blog.joylau.cn/2021/02/15/Grafana-Set-Context/</id>
    <published>2021-02-15T03:00:01.000Z</published>
    <updated>2021-05-16T05:02:42.205Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>设置环境变量：</p><pre><code class="yaml">    env:    - name: GF_SERVER_ROOT_URL      value: &quot;%(protocol)s://%(domain)s:%(http_port)s/grafana&quot;    - name: GF_SERVER_SERVE_FROM_SUB_PATH  value: &quot;true&quot;</code></pre><p>此时 NGINX 进行反向代理的配置：</p><pre><code class="nginx">    location /grafana/ {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_pass http://10.55.3.160:31120/;    }</code></pre>]]></content>
    
    <summary type="html">
    
      Grafana 设置二级目录及配置 Nginx 代理
    
    </summary>
    
    
      <category term="Grafana篇" scheme="http://blog.joylau.cn/categories/Grafana%E7%AF%87/"/>
    
    
      <category term="Grafana" scheme="http://blog.joylau.cn/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>MinIO 数据迁移简记</title>
    <link href="http://blog.joylau.cn/2021/02/05/MinIO-Data-Migration/"/>
    <id>http://blog.joylau.cn/2021/02/05/MinIO-Data-Migration/</id>
    <published>2021-02-05T03:00:01.000Z</published>
    <updated>2021-05-16T04:57:16.143Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>下载 minio/mc 项目</li><li>分别添加源服务器和目标服务器： <code>./mc.exe config host add local http://10.55.3.131:9000 &quot;AKIAIOSFODNN7EXAMPLE&quot; &quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;</code></li><li>按桶进行迁移： <code>./mc.exe mirror local/blacklist new/blacklist</code></li></ol>]]></content>
    
    <summary type="html">
    
      MinIO 数据迁移简记
    
    </summary>
    
    
      <category term="MinIO篇" scheme="http://blog.joylau.cn/categories/MinIO%E7%AF%87/"/>
    
    
      <category term="MinIO" scheme="http://blog.joylau.cn/tags/MinIO/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN 客户端创建多个网络适配器</title>
    <link href="http://blog.joylau.cn/2021/02/03/OpenVPN-AddTAP/"/>
    <id>http://blog.joylau.cn/2021/02/03/OpenVPN-AddTAP/</id>
    <published>2021-02-03T04:00:01.000Z</published>
    <updated>2021-05-16T04:48:58.551Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Open VPN 的客户端不做特殊配置无法同时连接多个服务器，会出现异常。提示设备已在使用</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>进入 openVPN 的安装目录，以管理员的身份执行 addtap.bat 文件即可， 可在网络适配器里看到多出一块虚拟网卡</p>]]></content>
    
    <summary type="html">
    
      OpenVPN 客户端创建多个网络适配器
    
    </summary>
    
    
      <category term="OpenVPN篇" scheme="http://blog.joylau.cn/categories/OpenVPN%E7%AF%87/"/>
    
    
      <category term="OpenVPN" scheme="http://blog.joylau.cn/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 磁盘扩展方法</title>
    <link href="http://blog.joylau.cn/2021/01/27/Linux-MountDisk2/"/>
    <id>http://blog.joylau.cn/2021/01/27/Linux-MountDisk2/</id>
    <published>2021-01-27T09:32:36.000Z</published>
    <updated>2021-03-16T02:51:57.627Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="第一步-磁盘分区"><a href="#第一步-磁盘分区" class="headerlink" title="第一步:    磁盘分区"></a>第一步:    磁盘分区</h4><ol><li>使用 <code>fdisk -l</code> 查看本机磁盘分区情况</li></ol><pre><code class="bash">[root@localhost core]# fdisk -l磁盘 /dev/vda：85.9 GB, 85899345920 字节，167772160 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000b2efb   设备 Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048     2099199     1048576   83  Linux/dev/vda2         2099200   167772159    82836480   8e  Linux LVM磁盘 /dev/vdb：1610.6 GB, 1610612736000 字节，3145728000 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘 /dev/mapper/centos-root：51.3 GB, 51308920832 字节，100212736 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘 /dev/mapper/centos-swap：8455 MB, 8455716864 字节，16515072 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘 /dev/mapper/centos-home：25.1 GB, 25052577792 字节，48930816 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节</code></pre><p>可以看到一个 <strong>/dev/vdb</strong> 的设备没有使用</p><ol start="2"><li>执行分区:<ul><li>fdisk /dev/vdb</li><li>m   显示命令列表</li><li>n   新增分区</li><li>p 主分区</li><li>1</li><li>enter</li><li>enter</li><li>w 写入并退出</li></ul></li></ol><pre><code class="bash">[root@localhost core]# fdisk /dev/vdb欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。Device does not contain a recognized partition table使用磁盘标识符 0xc83c3572 创建新的 DOS 磁盘标签。命令(输入 m 获取帮助)：nPartition type:   p   primary (0 primary, 0 extended, 4 free)   e   extendedSelect (default p): p分区号 (1-4，默认 1)：起始 扇区 (2048-3145727999，默认为 2048)：将使用默认值 2048Last 扇区, +扇区 or +size{K,M,G} (2048-3145727999，默认为 3145727999)：将使用默认值 3145727999分区 1 已设置为 Linux 类型，大小设为 1.5 TiB命令(输入 m 获取帮助)：wThe partition table has been altered!Calling ioctl() to re-read partition table.正在同步磁盘。</code></pre><h4 id="第二步-格式化磁盘"><a href="#第二步-格式化磁盘" class="headerlink" title="第二步: 格式化磁盘"></a>第二步: 格式化磁盘</h4><p>通知内核重新读取分区信息 <code>partprobe /dev/vdb</code></p><p>先执行 blkid 查看磁盘的格式</p><p>如果是 xfs 格式，执行下面的命令</p><p><code>mkfs -t xfs /dev/vdb1</code></p><p>如果是 ext4 的话</p><p><code>mkfs -t ext4 /dev/vdb1</code></p><pre><code class="bash">[root@localhost core]# mkfs -t xfs /dev/vdb1meta-data=/dev/vdb1              isize=512    agcount=4, agsize=98303936 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0, sparse=0data     =                       bsize=4096   blocks=393215744, imaxpct=5         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal log           bsize=4096   blocks=191999, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0</code></pre><h4 id="第四步-创建目录并挂载"><a href="#第四步-创建目录并挂载" class="headerlink" title="第四步: 创建目录并挂载"></a>第四步: 创建目录并挂载</h4><pre><code class="bash">[root@localhost core]# mkdir /data[root@localhost core]# mount /dev/vdb1 /data</code></pre><h4 id="第五步-永久挂载"><a href="#第五步-永久挂载" class="headerlink" title="第五步: 永久挂载"></a>第五步: 永久挂载</h4><p><code>vim /etc/fstab</code></p><p>在最后添加如下一行:</p><pre><code class="bash">/dev/vdb1               /data                   xfs     defaults        0 0</code></pre><p>保存生效: mount -a</p><h4 id="最后-查看磁盘挂载情况"><a href="#最后-查看磁盘挂载情况" class="headerlink" title="最后: 查看磁盘挂载情况"></a>最后: 查看磁盘挂载情况</h4><p><code>lsblk -f</code></p><pre><code class="bash">[root@localhost core]# lsblk -fNAME            FSTYPE      LABEL UUID                                   MOUNTPOINTsr0                                                                      vda                                                                      ├─vda1          xfs               cf67c6bc-85c1-4859-a9a2-a3af7641605f   /boot└─vda2          LVM2_member       b1HmqI-N1Hq-7cyC-kHUK-iz2K-fzCx-f8Rq2T   ├─centos-root xfs               cf439706-cf84-4396-a2af-df169a13bdc0   /  ├─centos-swap swap              700878b0-cf1b-406d-bb8f-db6af815f83a   [SWAP]  └─centos-home xfs               8c6b2b1b-48c4-4860-bc96-a5a0101b1c91   /homevdb                                                                      └─vdb1          xfs               654bab72-7006-4341-a0f6-889130cb15e9   /data</code></pre>]]></content>
    
    <summary type="html">
    
      CentOS 7 磁盘扩展方法
    
    </summary>
    
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="磁盘挂载" scheme="http://blog.joylau.cn/tags/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>关于 Docker -p 穿透防火墙 firewalld 的问题的研究记录</title>
    <link href="http://blog.joylau.cn/2020/12/17/Docker-Passed-Firewalld/"/>
    <id>http://blog.joylau.cn/2020/12/17/Docker-Passed-Firewalld/</id>
    <published>2020-12-17T03:16:30.000Z</published>
    <updated>2020-12-17T06:58:09.017Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用 docker run -p 或者 docker compose 启动暴露的端口的容器, 会直接穿透防火墙, 不受系统防火墙的 firewalld 的管控</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>docker 容器会在启动的时候向 iptables 添加转发的规则<br>而 firewalld 也是通过操作 iptables 来实现的防火墙的功能</p><pre><code class="bash">    [root@centOS7 es-test]# iptables -L DOCKER    Chain DOCKER (3 references)    target     prot opt source               destination             ACCEPT     tcp  --  anywhere             172.18.0.2           tcp dpt:xic    ACCEPT     tcp  --  anywhere             172.20.0.2           tcp dpt:vrace    ACCEPT     tcp  --  anywhere             172.20.0.2           tcp dpt:wap-wsp</code></pre><p>可以看到是 anywhere</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><h4 id="第一种-禁用-docker-操作-iptables"><a href="#第一种-禁用-docker-操作-iptables" class="headerlink" title="第一种 禁用 docker 操作 iptables"></a>第一种 禁用 docker 操作 iptables</h4><p>在 /etc/docker/daemon.json 配置禁用 iptables: </p><pre><code class="json">    {&quot;iptables&quot;: false}</code></pre><p>之后重启 docker 服务, 可以看到 docker 不会自动往 iptables 里添加规则了</p><p>这种方式有个弊端: 就是容器之间无法互相访问, 而且容器里的程序也无法访问外部网络</p><p>解决方式:<br>在防火墙里开始 net 转发:</p><p>配置 /etc/firewalld/zones/public.xml</p><pre><code class="xml">    &lt;zone&gt;      &lt;short&gt;Public&lt;/short&gt;      &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;      &lt;service name=&quot;ssh&quot;/&gt;      &lt;service name=&quot;dhcpv6-client&quot;/&gt;      &lt;masquerade/&gt;     &lt;/zone&gt;</code></pre><p>或者使用下面的方式添加 iptables 规则</p><pre><code class="bash">    firewall-cmd --zone=public --add-masquerade</code></pre><p>之后使用 firewall-cmd –restart 或者 systemctl restart firewalld 使配置生效即可</p><p>但是这样做还有个问题, 就是所有访问容器的程序对于容器来说 IP 的变成的网关的 IP<br>这样的问题对于一些需要特定限制一些 IP 地址来源的应用和使用 IP 地址来作区分的应用来说就有很大问题, 比如注册中心<br>目前没有找到什么方式解决这个问题</p><h4 id="第二种-容器直接指定主机网络"><a href="#第二种-容器直接指定主机网络" class="headerlink" title="第二种 容器直接指定主机网络"></a>第二种 容器直接指定主机网络</h4><p>docker run 的时候不显式暴露端口 -p 什么的, 使用 –net host 的形式直接将容器的端口绑定到宿主机上</p><p>docker compose 运行的时候使用:</p><pre><code class="yaml">    version:  &#39;3.2&#39;    services:      abc:        network_mode: &quot;host&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      关于 Docker -p 穿透防火墙 firewalld 的问题的研究记录
    
    </summary>
    
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装的 Maven 私服 Nexus3 因磁盘爆满而导致的无法启动的问题解决及忘记 admin 用户密码的解决方式</title>
    <link href="http://blog.joylau.cn/2020/12/08/Docker-Nexus3/"/>
    <id>http://blog.joylau.cn/2020/12/08/Docker-Nexus3/</id>
    <published>2020-12-08T09:07:05.000Z</published>
    <updated>2020-12-08T09:37:44.413Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Maven-私服-Nexus3-因磁盘爆满而导致的无法启动的问题"><a href="#Maven-私服-Nexus3-因磁盘爆满而导致的无法启动的问题" class="headerlink" title="Maven 私服 Nexus3 因磁盘爆满而导致的无法启动的问题"></a>Maven 私服 Nexus3 因磁盘爆满而导致的无法启动的问题</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>同事在 Nexus3 私服的宿主机上部署了一个服务, 结果因为网络问题导致服务打印大量的日志信息, 将宿主机的磁盘撑爆了,经过一系列排除, 删除了大日志文件<br>重启 Nexus3 容器,发现无法启动了, 报错如下:</p><pre><code class="bash">    com.orientechnologies.orient.core.exception.OStorageException: Cannot open local storage &#39;/nexus-data/db/config&#39; with mode=rw            DB name=&quot;config&quot;            at com.orientechnologies.orient.core.storage.impl.local.OAbstractPaginatedStorage.open(OAbstractPaginatedStorage.java:323)            at com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx.open(ODatabaseDocumentTx.java:259)            at org.sonatype.nexus.orient.DatabaseManagerSupport.connect(DatabaseManagerSupport.java:178)            at org.sonatype.nexus.orient.DatabaseManagerSupport.createInstance(DatabaseManagerSupport.java:312)            at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)            at org.sonatype.nexus.orient.DatabaseManagerSupport.instance(DatabaseManagerSupport.java:289)            at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)            at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)            at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)            at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:290)            at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)            at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)            at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)            at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)            at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)    Caused by: java.lang.NullPointerException: null            at com.orientechnologies.orient.core.storage.impl.local.paginated.wal.ODiskWriteAheadLog.cutTill(ODiskWriteAheadLog.java:919)            at com.orientechnologies.orient.core.storage.impl.local.OAbstractPaginatedStorage.makeFullCheckpoint(OAbstractPaginatedStorage.java:3706)            at com.orientechnologies.orient.core.storage.impl.local.OAbstractPaginatedStorage.recoverIfNeeded(OAbstractPaginatedStorage.java:3937)            at com.orientechnologies.orient.core.storage.impl.local.OAbstractPaginatedStorage.open(OAbstractPaginatedStorage.java:288)            ... 14 common frames omitted</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>进入宿主机存放 Nexus3 数据目录下</li></ol><p>先对该目录分配用户和用户组:</p><pre><code class="shell">    chown -R 200 /home/transport/maven-repos-data</code></pre><p>分别删除 db/config 目录下和 db/component 目录下的所有的 <strong>.wal</strong> 文件 </p><pre><code class="shell">    cd /home/transport/maven-repos-data/db/config    rm -rf *.wal    cd /home/transport/maven-repos-data/db/component    rm -rf *.wal</code></pre><ol start="2"><li>找到容器中的 <strong>nexus-orient-console.jar</strong> jar 包</li></ol><pre><code class="bash">    find / -name nexus-orient-console.jar</code></pre><p>进入上述目录, 我这里是: <em>/var/lib/docker/overlay2/3b9c8d7685a03dcbb9ee69c33cd8fd9b487d980731596da27e7639854c0bb6e1/diff/opt/sonatype/nexus/lib/support</em></p><p>执行 <code>java -jar nexus-orient-console.jar</code> , 来连接数据库</p><pre><code class="shell">    connect plocal:/home/transport/maven-repos-data/db/component admin admin</code></pre><p>执行下列命令进行修复, 修复完成并退出:</p><pre><code class="bash">    rebuild index *    repair database --fix-links    disconnect    exit</code></pre><ol start="3"><li>数据目录重新授权</li></ol><pre><code class="bash">    chmod 777 -R /home/transport/maven-repos-data/db</code></pre><ol start="4"><li>重启容器</li></ol><h2 id="Maven-私服-Nexus3-忘记-admin-用户密码的解决"><a href="#Maven-私服-Nexus3-忘记-admin-用户密码的解决" class="headerlink" title="Maven 私服 Nexus3 忘记 admin 用户密码的解决"></a>Maven 私服 Nexus3 忘记 admin 用户密码的解决</h2><p>如上述步骤描述的, 运行 <strong>nexus-orient-console.jar</strong> </p><p>进入 security 数据库:</p><pre><code class="bash">    connect plocal:/home/transport/maven-repos-data/db/security admin admin</code></pre><p>将 admin 用户密码重置为 admin123</p><pre><code class="bash">    update user SET password=&quot;$shiro1$SHA-512$1024$NE+wqQq/TmjZMvfI7ENh/g==$V4yPw8T64UQ6GfJfxYq2hLsVrBY8D1v+bktfOxGdt4b/9BthpWPNUy/CBk6V9iA0nHpzYzJFWO8v/tZFtES8CA==&quot; UPSERT WHERE id=&quot;admin&quot;</code></pre><p>数据目录重新授权</p><pre><code class="bash">    chmod 777 -R /home/transport/maven-repos-data/db</code></pre>]]></content>
    
    <summary type="html">
    
      Docker 安装的 Maven 私服 Nexus3 因磁盘爆满而导致的无法启动的问题解决及忘记 admin 用户密码的解决方式
    
    </summary>
    
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 开发问题备忘记录</title>
    <link href="http://blog.joylau.cn/2020/12/08/MacOS-Dev-Questions/"/>
    <id>http://blog.joylau.cn/2020/12/08/MacOS-Dev-Questions/</id>
    <published>2020-12-08T07:29:08.000Z</published>
    <updated>2020-12-08T07:54:13.142Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="清理-brew"><a href="#清理-brew" class="headerlink" title="清理 brew"></a>清理 brew</h3><ol><li>brew cleanup</li><li>brew cleanup –prune 1 #清理早于 1 天的</li></ol><h3 id="防止-mac-锁屏后关闭显示器的方法"><a href="#防止-mac-锁屏后关闭显示器的方法" class="headerlink" title="防止 mac 锁屏后关闭显示器的方法"></a>防止 mac 锁屏后关闭显示器的方法</h3><p>brew cask install keepingyouawake</p><h3 id="zsh-对-docker-命令的自动提示"><a href="#zsh-对-docker-命令的自动提示" class="headerlink" title="zsh 对 docker 命令的自动提示"></a>zsh 对 docker 命令的自动提示</h3><ol><li>首先确定安装好了 oh-my-zsh</li><li>在文件 <strong>~/.zshrc</strong> 文件中启用 docker docker-compose, 下面是我启用的插件</li></ol><p>参考: <a href="https://docs.docker.com/compose/completion/" target="_blank" rel="noopener">https://docs.docker.com/compose/completion/</a></p><pre><code class="bash">    plugins=(git gradle mvn node npm brew yarn docker docker-compose)</code></pre><h3 id="zsh-插件推荐"><a href="#zsh-插件推荐" class="headerlink" title="zsh 插件推荐"></a>zsh 插件推荐</h3><ol><li>自动补全插件 zsh-autosuggestions</li></ol><p>这里利用Oh my zsh的方法安装。直接一句话命令行里下载并移动到 oh my zsh 目录中：</p><pre><code class="bash">    git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></pre><p>然后在 ~/.zshrc 文件中找到 plugins 数组，加入 zsh-autosuggestions 名字，重新打开终端即可。</p><ol start="2"><li>语法高亮插件 zsh-syntax-highlighting</li></ol><p>将插件下载到oh my zsh的插件目录下的该新建插件同名文件夹中</p><pre><code class="shell">    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code></pre><p>编辑 ~/.zshrc 文件将然后将插件引用命令写入该文件最后一行（必须）</p><pre><code class="bash">    source &quot;$ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</code></pre><p>保存重新打开即可看到高亮的命令行了。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己平时使用 MacOS 开发遇到的一些问题以及一些配置信息备忘
    
    </summary>
    
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
      <category term="MacBookPro" scheme="http://blog.joylau.cn/tags/MacBookPro/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果 --- Hackintosh + GIGABYTE Z390 AORUS PRO WIFI + i9-9900K + RX 580 + BCM94360CD + OpenCore 0.6.3 黑苹果主机配置与安装记录</title>
    <link href="http://blog.joylau.cn/2020/11/14/Hackintosh-My-Mac/"/>
    <id>http://blog.joylau.cn/2020/11/14/Hackintosh-My-Mac/</id>
    <published>2020-11-14T03:42:31.000Z</published>
    <updated>2020-11-14T11:57:10.339Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>组装一台黑苹果最重要的是硬件的选择， 选择的重点是尽量选择与白苹果一致的配件<br>在硬件选择的方面有几点需要特别的注意</p><ol><li>CPU 的选择，CPU尽量选择 Intel 的，7/8/9代 酷睿 i9，i7，i5，i3 都可以， AMD 的CPU 也不是不行， 只不过需要打补丁，折腾的东西比较多</li><li>显卡的选择， 白苹果的显卡都是 A 卡， 所以在显卡的选择上直接选择 A 卡即可， 选择 A 卡需要注意的是，直接选择免驱动的 A 卡类型， 首选蓝宝石和微星的，下面列举了一些免驱的 A 卡</li></ol><ul><li>Vega FE （真正免驱，无需搭配集显也可完全硬件加速）</li><li>Vega 64 （真正免驱，无需搭配集显也可完全硬件加速）</li><li>Vega 56 （真正免驱，无需搭配集显也可完全硬件加速）</li><li>Vega Nano （真正免驱，无需搭配集显也可完全硬件加速）</li><li>Pro SSG （真正免驱，无需搭配集显也可完全硬件加速）</li><li>WX 9100 （真正免驱，无需搭配集显也可完全硬件加速）</li><li>WX 8200 （真正免驱，无需搭配集显也可完全硬件加速）</li><li>RX 590</li><li>RX 580 （注意，缩水的阉割版2048SP的RX580马甲卡不是免驱的，标准2304SP才是免驱卡）</li><li>RX 570</li><li>RX 560 （个别型号的HDMI/DVI输出黑屏，需要改FB，DP输出没问题）</li></ul><ol start="3"><li>主板的选择，华硕，微星，技嘉 的 主板推荐选择， 8/9代酷睿首选Z390/Z370芯片组</li><li>硬盘的选择，三星 970 EVO Plus 和 三星 PM981 无法做为macOS系统盘安装原版，不要选择</li><li>显示器的选择，首选 4K 显示器，2K 以下的显示器需要开启 HiDPI，而且使用体验不好</li><li>无线网卡和蓝牙的选择，主板自带的WI-FI和蓝牙目前都无法驱动， 这个无解， 推荐免驱的 BCM94360CD 或者 BCM943602CS，直接插上即可使用</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先贴出我本次的黑苹果主机的配置信息， 如下：</p><table><thead><tr><th><strong>项目</strong></th><th><strong>型号</strong></th><th><strong>价格</strong></th><th><strong>链接</strong></th></tr></thead><tbody><tr><td>CPU</td><td>Intel i9-9900K 8核16线程 盒装CPU</td><td>2899</td><td><a href="https://item.jd.com/100000634429.html" target="_blank" rel="noopener">https://item.jd.com/100000634429.html</a></td></tr><tr><td>主板</td><td>技嘉（GIGABYTE）Z390 AORUS PRO WIFI</td><td>956</td><td><a href="https://item.jd.com/100000612305.html" target="_blank" rel="noopener">https://item.jd.com/100000612305.html</a></td></tr><tr><td>内存</td><td>金士顿(Kingston) DDR4 3200频 128GB(32G×4)</td><td>4409</td><td><a href="https://item.jd.com/100008221061.html" target="_blank" rel="noopener">https://item.jd.com/100008221061.html</a></td></tr><tr><td>硬盘</td><td>三星970 EVO 1TB M.2接口(NVMe)</td><td>1087</td><td><a href="https://item.jd.com/7234468.html" target="_blank" rel="noopener">https://item.jd.com/7234468.html</a></td></tr><tr><td>显卡</td><td>蓝宝石 RX 580 2304sp 8G 满血版 （淘宝二手）</td><td>1238</td><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.661e2e8d5l686T&amp;id=614820302674&amp;_u=425lenq48296" target="_blank" rel="noopener">https://item.taobao.com/item.htm?spm=a1z09.2.0.0.661e2e8d5l686T&amp;id=614820302674&amp;_u=425lenq48296</a></td></tr><tr><td>散热器</td><td>九州风神大霜塔</td><td>179</td><td><a href="https://item.jd.com/689273.html" target="_blank" rel="noopener">https://item.jd.com/689273.html</a></td></tr><tr><td>电源</td><td>长城 750W 全模组金牌电源</td><td>490</td><td><a href="https://item.jd.com/8025804.html" target="_blank" rel="noopener">https://item.jd.com/8025804.html</a></td></tr><tr><td>显示器</td><td>戴尔 U2720QM 27英寸4K</td><td>3468</td><td><a href="https://item.jd.com/100011317048.html" target="_blank" rel="noopener">https://item.jd.com/100011317048.html</a></td></tr><tr><td>无线网卡</td><td>BCM94360CD</td><td>265</td><td><a href="https://item.jd.com/10021401339167.html" target="_blank" rel="noopener">https://item.jd.com/10021401339167.html</a></td></tr><tr><td>鼠标</td><td>罗技 MX Master 3 for Mac</td><td>668</td><td><a href="https://item.jd.com/100014681386.html" target="_blank" rel="noopener">https://item.jd.com/100014681386.html</a></td></tr><tr><td>键盘</td><td>Keychron K6蓝牙双模机械键盘 青轴</td><td>327</td><td><a href="https://item.jd.com/100007939581.html" target="_blank" rel="noopener">https://item.jd.com/100007939581.html</a></td></tr><tr><td>机箱</td><td>先马（SAMA）剑魔升级版</td><td>179</td><td><a href="https://item.jd.com/100007087962.html" target="_blank" rel="noopener">https://item.jd.com/100007087962.html</a></td></tr><tr><td>其他</td><td>RGB风扇 x3 / DP 线 1.4版</td><td>130</td><td><a href="https://item.jd.com/100007577985.html" target="_blank" rel="noopener">https://item.jd.com/100007577985.html</a>   <a href="https://item.jd.com/100008069617.html" target="_blank" rel="noopener">https://item.jd.com/100008069617.html</a></td></tr><tr><td>总计</td><td></td><td>16295</td><td></td></tr></tbody></table><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://image.joylau.cn/blog/%E6%95%88%E6%9E%9C%E5%9B%BE-1.JPG" alt="效果图-1"></p><p><img src="http://image.joylau.cn/blog/%E6%95%88%E6%9E%9C%E5%9B%BE-2.JPG" alt="效果图-2"></p><p><img src="http://image.joylau.cn/blog/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF.png" alt="系统信息"></p><p><img src="http://image.joylau.cn/blog/%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF.png" alt="设备信息"></p><p><img src="http://image.joylau.cn/blog/CPU%20%E5%BE%97%E5%88%86.png" alt="CPU得分"></p><p><img src="http://image.joylau.cn/blog/%E8%B6%85%E9%A2%91.png" alt="CPU超频"></p><p>Power 显示的是当前 CPU 的功率；</p><p>Frequency 显示当前 CPU 的频率；</p><p>Temperature 显示当前 CPU 的温度，此温度是内核温度；</p><p>Utilization 显示当前 CPU 的占用率。</p><p><img src="http://image.joylau.cn/blog/%E6%98%BE%E5%8D%A1%E5%BE%97%E5%88%86-Metal.png" alt="显卡 Metal 得分"></p><p><img src="http://image.joylau.cn/blog/%E6%98%BE%E5%8D%A1%E5%BE%97%E5%88%86-OpenCL.png" alt="显卡 OpenCL 得分"></p><p><img src="http://image.joylau.cn/blog/%E7%A3%81%E7%9B%98%E9%80%9F%E5%BA%A6.png" alt="磁盘速度"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>一个容量大于等于 16G 的 U 盘</li><li>一台macOS操作系统的主机</li><li>下载 Mac 版的软件 balenaEtcher (<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">https://www.balena.io/etcher/</a>)</li><li>软件 Hackintool (<a href="https://github.com/headkaze/Hackintool" target="_blank" rel="noopener">https://github.com/headkaze/Hackintool</a>)</li></ol><h4 id="准备安装镜像"><a href="#准备安装镜像" class="headerlink" title="准备安装镜像"></a>准备安装镜像</h4><ol><li>App Store 下载最新的操作 MacOS 操作系统,下载完成之后就可以在“应用程序”中找到</li><li>创建DMG文件: 打开“磁盘工具”，创建空白镜像,命名为 MyMacOS, 根据所下载的镜像的大小，分配一个合理的镜像大小,格式选择日志式，分区选择 GUID 分区类型，权限选择读写</li><li>macOS 系统上的主机上 插入 U 盘，输入以下命令格式化 U 盘</li></ol><pre><code class="bash">    diskutil partitionDisk /dev/{YOUR_DISK_ID} GPT JHFS+ &quot;USB&quot; 100%</code></pre><ol start="4"><li>双击打开 MyMacOS.dmg 文件进行挂载，输入如下命令,将下载的系统镜像文件写入 DMG 镜像中</li></ol><pre><code class="bash">    sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyMacOS</code></pre><ol start="5"><li>使用 balenaEtcher 将 MyMacOS.dmg 镜像刷入 U 盘中</li><li>使用 Hackintool 挂载 U 盘的 UEFI 分区，将我已经配置好的 <code>USB_EFI</code> 整个目录拷贝进去， 并且重命名为 <code>EFI</code>，之后卸载分区</li></ol><h4 id="BIOS-配置"><a href="#BIOS-配置" class="headerlink" title="BIOS 配置"></a>BIOS 配置</h4><p>在技嘉官网下载最新版 Z390 主板的 BIOS 固件（<a href="https://www.gigabyte.cn/Motherboard/Z390-AORUS-PRO-WIFI-rev-10/support#support-dl-driver）并刷入" target="_blank" rel="noopener">https://www.gigabyte.cn/Motherboard/Z390-AORUS-PRO-WIFI-rev-10/support#support-dl-driver）并刷入</a></p><p>当前最新版本 <strong>F12j</strong><br>进行如下配置：</p><ul><li>Load Optimized Defaults</li><li>Settings -&gt; IO Ports -&gt; Internal Graphics -&gt; Enabled</li><li>Settings -&gt; IO Ports -&gt; DVMT Pre-Allocated -&gt; 32M</li><li>Settings -&gt; IO Ports -&gt; Wi-Fi -&gt; Disabled</li><li>Settings -&gt; IO Ports -&gt; Above 4G Decoding -&gt; Enabled</li><li>Settings -&gt; IO Ports -&gt; Wake on LAN Enable -&gt; Disabled</li><li>Settings -&gt; IO Ports -&gt; USB Configuration -&gt; Legacy USB Support -&gt; Disabled</li><li>Settings -&gt; IO Ports -&gt; USB Configuration -&gt; XHCI Hand-off -&gt; Enabled</li><li>Settings -&gt; Miscellaneous -&gt; Software Guard Extensions(SGX) -&gt; Disabled</li><li>Settings -&gt; Miscellaneous -&gt; Trusted Computing -&gt; Security Device Support -&gt; Disabled</li><li>Boot -&gt; CFG Lock -&gt; Disabled</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>插入 U 盘，启动时按 <code>F12</code> 进入启动设备选择， 选择 <code>OpenCore</code>， 之后选择安装 MacOS 选项</li><li>耐心等待跑码安装完毕， 之后会进入 MacOS 的安装界面， 先进入磁盘工具， 将要安装系统的那个硬盘抹掉， 格式选择 APFS，之后再安装 MacOS 系统， 之后等待重启</li><li>重启依然要使用 U 盘进行引导，进入硬盘里的 MacOS 系统</li><li>到这里整个系统的安装以及完成了一半了</li><li>注意此时进入系统是千万不要登入自己的 iCloud 账号进行使用，需要在下面生成并注入了序列号之后才可以安全的登录</li></ol><h3 id="后续完善"><a href="#后续完善" class="headerlink" title="后续完善"></a>后续完善</h3><h4 id="更换-EFI"><a href="#更换-EFI" class="headerlink" title="更换 EFI"></a>更换 EFI</h4><p>使用 Hackintool 挂载 硬盘的 UEFI 分区，并且将我配置好的 <code>EFI</code> 目录复制进去，进行覆盖</p><h4 id="USB-端口的配置"><a href="#USB-端口的配置" class="headerlink" title="USB 端口的配置"></a>USB 端口的配置</h4><p>有 MacOS 系统的限制， 最多只允许开始使用 15个端口， 我这里就 Z390 的主板进行下面端口的开启<br><img src="http://image.joylau.cn/blog/back_panel.png" alt="背面端口图"><br><img src="http://image.joylau.cn/blog/internal_io.png" alt="主板接口图"></p><p>使用 Hackintool, 修改端口， 并导出， 注意保留 <code>USBPorts.kext</code> 文件以放入 Kexts 目录下， 我这里开启的端口如下配置<br><img src="http://image.joylau.cn/blog/%E5%90%AF%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3.png" alt="启用的端口"></p><h4 id="关闭啰嗦模式"><a href="#关闭啰嗦模式" class="headerlink" title="关闭啰嗦模式"></a>关闭啰嗦模式</h4><p>找到 配置文件中的</p><pre><code class="xml">    &lt;key&gt;boot-args&lt;/key&gt;    &lt;string&gt;-v keepsyms=1 agdpmod=pikera slide=0 shikigva=80&lt;/string&gt;</code></pre><p>去掉 -v</p><h4 id="生成序列号"><a href="#生成序列号" class="headerlink" title="生成序列号"></a>生成序列号</h4><p>使用 Hackintool 生成序列号，选择的类型为 <code>iMac (Retina 5K, 27-inch, 2019)</code><br>之后到官网查询，如果提示序列号不合法，则该序列号可用，这时候可以将其注入以下部分</p><pre><code class="xml">    &lt;dict&gt;        &lt;key&gt;AdviseWindows&lt;/key&gt;        &lt;false/&gt;        &lt;key&gt;SystemMemoryStatus&lt;/key&gt;        &lt;string&gt;Auto&lt;/string&gt;        &lt;key&gt;MLB&lt;/key&gt;        &lt;string&gt;M0000000000000001&lt;/string&gt;        &lt;key&gt;ProcessorType&lt;/key&gt;        &lt;integer&gt;0&lt;/integer&gt;        &lt;key&gt;ROM&lt;/key&gt;        &lt;data&gt;ESIzRFVm&lt;/data&gt;        &lt;key&gt;SpoofVendor&lt;/key&gt;        &lt;true/&gt;        &lt;key&gt;SystemProductName&lt;/key&gt;        &lt;string&gt;iMac19,1&lt;/string&gt;        &lt;key&gt;SystemSerialNumber&lt;/key&gt;        &lt;string&gt;W00000000001&lt;/string&gt;        &lt;key&gt;SystemUUID&lt;/key&gt;        &lt;string&gt;00000000-0000-0000-0000-000000000000&lt;/string&gt;    &lt;/dict&gt;</code></pre><p>分别是 <code>MLB</code>，<code>SystemSerialNumber</code>，<code>SystemUUID</code></p><h3 id="OpenCore-配置列表"><a href="#OpenCore-配置列表" class="headerlink" title="OpenCore 配置列表"></a>OpenCore 配置列表</h3><h4 id="OpenCore-EFI"><a href="#OpenCore-EFI" class="headerlink" title="OpenCore EFI"></a>OpenCore EFI</h4><p>Download OpenCore <strong>RELEASE</strong> from <a href="https://github.com/acidanthera/OpenCorePkg/releases/latest" target="_blank" rel="noopener">here</a></p><h4 id="ACPI"><a href="#ACPI" class="headerlink" title="ACPI"></a>ACPI</h4><ul><li>SSDT-EC-USBX.aml</li><li>SSDT-PLUG.aml</li><li>SSDT-HPET.aml</li><li>SSDT-PMC.aml</li></ul><h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><ul><li><a href="https://github.com/acidanthera/OcBinaryData/raw/master/Drivers/HfsPlus.efi" target="_blank" rel="noopener">HfsPlus.efi</a></li><li>OpenRuntime.efi - Included in OpenCore package</li></ul><h4 id="Kext-Make-sure-to-download-RELEASE-version"><a href="#Kext-Make-sure-to-download-RELEASE-version" class="headerlink" title="Kext - Make sure to download RELEASE version"></a>Kext - Make sure to download RELEASE version</h4><ul><li><a href="https://github.com/acidanthera/Lilu/releases/latest" target="_blank" rel="noopener">Lilu.kext</a></li><li><a href="https://github.com/acidanthera/VirtualSMC/releases/latest" target="_blank" rel="noopener">VirtualSMC.kext</a></li><li><a href="https://github.com/acidanthera/WhateverGreen/releases/latest" target="_blank" rel="noopener">WhateverGreen.kext</a></li><li><a href="https://github.com/acidanthera/AppleALC/releases/latest" target="_blank" rel="noopener">AppleALC.kext</a></li><li><a href="https://github.com/acidanthera/IntelMausi/releases/latest" target="_blank" rel="noopener">IntelMausi.kext</a></li><li><a href="https://bitbucket.org/RehabMan/os-x-usb-inject-all/downloads/RehabMan-USBInjectAll-2018-1108.zip" target="_blank" rel="noopener">USBInjectAll.kext</a> - Only needed for installation media</li><li>USBPorts.kext - <a href="POST_INSTALL.md">Refer post installation</a></li><li>SMCProcessor.kext - Included in VirtualSMC package</li><li>SMCSuperIO.kext - Included in VirtualSMC package</li></ul><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><ul><li><a href="https://github.com/datasone/grub-mod-setup_var/releases/download/1.1/modGRUBShell.efi" target="_blank" rel="noopener">modGRUBShell.efi</a></li><li>OpenShell.efi - Included in OpenCore package</li><li>ResetSystem.efi - Included in OpenCore package</li><li>CleanNvram.efi - Included in OpenCore package</li></ul><h4 id="config-plist"><a href="#config-plist" class="headerlink" title="config.plist"></a>config.plist</h4><ul><li>Use <code>config_usb.plist</code> for installation media(USB). Rename it to <code>config.plist</code>.</li><li>Use <code>config.plist</code> for internal boot disk.</li></ul><h4 id="EFI-Folder-Structure"><a href="#EFI-Folder-Structure" class="headerlink" title="EFI Folder Structure"></a>EFI Folder Structure</h4><h5 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h5><pre><code class="text">EFI├── BOOT│   └── BOOTx64.efi└── OC    ├── ACPI    │   ├── SSDT-EC-USBX.aml    │   ├── SSDT-HPET.aml    │   ├── SSDT-PLUG.aml    │   └── SSDT-PMC.aml    ├── Bootstrap    │   └── Bootstrap.efi    ├── Drivers    │   ├── HfsPlus.efi    │   └── OpenRuntime.efi    ├── Kexts    │   ├── AppleALC.kext    │   ├── IntelMausi.kext    │   ├── Lilu.kext    │   ├── SMCProcessor.kext    │   ├── SMCSuperIO.kext    │   ├── USBInjectAll.kext    │   ├── VirtualSMC.kext    │   └── WhateverGreen.kext    ├── OpenCore.efi    ├── Tools    │   ├── CleanNvram.efi    │   ├── OpenShell.efi    │   ├── ResetSystem.efi    │   └── modGRUBShell.efi    └── config.plist</code></pre><h5 id="SSD-NVME-HDD"><a href="#SSD-NVME-HDD" class="headerlink" title="SSD/NVME/HDD"></a>SSD/NVME/HDD</h5><pre><code class="text">EFI├── BOOT│   └── BOOTx64.efi└── OC    ├── ACPI    │   ├── SSDT-EC-USBX.aml    │   ├── SSDT-HPET.aml    │   ├── SSDT-PLUG.aml    │   └── SSDT-PMC.aml    ├── Bootstrap    │   └── Bootstrap.efi    ├── Drivers    │   ├── HfsPlus.efi    │   └── OpenRuntime.efi    ├── Kexts    │   ├── AppleALC.kext    │   ├── IntelMausi.kext    │   ├── Lilu.kext    │   ├── SMCProcessor.kext    │   ├── SMCSuperIO.kext    │   ├── USBPorts.kext    │   ├── VirtualSMC.kext    │   └── WhateverGreen.kext    ├── OpenCore.efi    ├── Tools    │   ├── CleanNvram.efi    │   ├── OpenShell.efi    │   ├── ResetSystem.efi    │   └── modGRUBShell.efi    └── config.plist</code></pre><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><p>目前一切都正常工作，包括声卡，网卡，Wi-Fi，蓝牙，Airdrop，随航，接力，显示分辨率，睡眠，关机，重启</p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ol><li>我买的主板CPU针脚上有一个针脚弯曲了， 导致有2 个内存插槽无法读取， 如下图</li></ol><p><img src="http://image.joylau.cn/blog/CPU%E9%92%88%E8%84%9A.JPG" alt="CPU针脚"></p><p><img src="http://image.joylau.cn/blog/%E9%92%88%E8%84%9A%E5%BC%AF%E6%9B%B2.JPG" alt="CPU针脚弯曲"></p><p>这种情况的具体表现是只有插在主板的 DDR4_A1 槽或者 DDR4_A2 槽或者 2 个槽都插时才能短接进入 BIOS 界面,<br>插入全部 4 根内存条或者只要插入 DDR4_B2 或者 DDR4_B1 时将无法进入 BIOS 界面且主板无限重启,显示器无输出且 DRAM 指示灯常亮</p><p>后来我用镊子将其矫正就可以了</p><ol start="2"><li>主板的 <code>CSM Support</code> 选项不能关闭， 关闭会导致无法进入 BIOS， 且主板上的 VGA 等常亮</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>目录中的 <code>EFI</code> 和 <code>EFI_USB</code> 都是我已经修改好的引导了，可以直接使用，其中 <code>EFI</code> 是复制到硬盘上用来引导系统的， <code>EFI_USB</code> 是复制到 U 盘上用来进行 U 盘引导的</p><p>引导下载地址见： <a href="https://github.com/JoyLau/Hackintosh-GIGABYTE-Z390-AORUS-PRO-WIFI-i9-9900K-RX580-BCM94360CD-OpenCore" target="_blank" rel="noopener">https://github.com/JoyLau/Hackintosh-GIGABYTE-Z390-AORUS-PRO-WIFI-i9-9900K-RX580-BCM94360CD-OpenCore</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://blog.daliansky.net" target="_blank" rel="noopener">http://blog.daliansky.net</a></li><li><a href="https://www.tonymacx86.com" target="_blank" rel="noopener">https://www.tonymacx86.com</a></li><li><a href="https://github.com/shiruken/hackintosh#prepare-install-media" target="_blank" rel="noopener">https://github.com/shiruken/hackintosh#prepare-install-media</a></li><li><a href="https://www.youtube.com/watch?v=hUMFJjxQO7A" target="_blank" rel="noopener">https://www.youtube.com/watch?v=hUMFJjxQO7A</a></li><li><a href="https://www.insanelymac.com/forum/topic/337837-glasgoods-macos-mojave-successguide-for-aorus-z390-pro" target="_blank" rel="noopener">https://www.insanelymac.com/forum/topic/337837-glasgoods-macos-mojave-successguide-for-aorus-z390-pro</a></li></ul>]]></content>
    
    <summary type="html">
    
      GIGABYTE Z390 AORUS PRO WIFI + i9-9900K + RX 580 + BCM94360CD + OpenCore 0.6.3 黑苹果主机配置与安装记录
    
    </summary>
    
    
      <category term="Hackintosh" scheme="http://blog.joylau.cn/categories/Hackintosh/"/>
    
    
      <category term="Hackintosh" scheme="http://blog.joylau.cn/tags/Hackintosh/"/>
    
      <category term="黑苹果" scheme="http://blog.joylau.cn/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot RestTemplate 支持发送 HTTPS 请求</title>
    <link href="http://blog.joylau.cn/2020/10/19/SpringBoot-RestTemplate-SSL/"/>
    <id>http://blog.joylau.cn/2020/10/19/SpringBoot-RestTemplate-SSL/</id>
    <published>2020-10-19T03:03:09.000Z</published>
    <updated>2020-10-19T03:16:13.910Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有时在项目中调用的接口是 https 的形式, 这时使用 RestTemplate 来调用请求就会出错:</p><pre><code class="text">    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target        at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)        at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)        at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)        at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)        at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1514)        at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)        at sun.security.ssl.Handshaker.processLoop(Handshaker.java:1026)        at sun.security.ssl.Handshaker.process_record(Handshaker.java:961)        at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)        at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)        at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)        at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)        at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)        at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)        at sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:153)        at cn.joylau.code.job.executor.service.jobhandler.HttpJobHandler.execute(HttpJobHandler.java:155)        at cn.joylau.code.job.core.thread.JobThread.run(JobThread.java:151)    Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)        at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)        at sun.security.validator.Validator.validate(Validator.java:260)        at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)        at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)        at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)        at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1496)        ... 12 more    Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target        at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)        at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)        at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)        ... 18 more    I/O error on GET request for &quot;https://xxxxxx&quot;:     sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; nested exception is javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code></pre><p>下面是解决方式</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>引入依赖</li></ol><pre><code class="gradle">    implementation &#39;org.apache.httpcomponents:httpclient&#39;</code></pre><ol start="2"><li>代码配置</li></ol><pre><code class="java">    import org.apache.http.conn.ssl.NoopHostnameVerifier;    import org.apache.http.conn.ssl.SSLConnectionSocketFactory;    import org.apache.http.conn.ssl.TrustSelfSignedStrategy;    import org.apache.http.impl.client.CloseableHttpClient;    import org.apache.http.impl.client.HttpClients;    import org.apache.http.ssl.SSLContextBuilder;    @Bean    public RestTemplate restTemplate(){        return restTemplateBuilder.build();    }    /**     * HTTPS RestTemplate     */    @Bean    public RestTemplate httpsRestTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {        SSLContextBuilder builder = new SSLContextBuilder();        builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());        SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(builder.build(), NoopHostnameVerifier.INSTANCE);        CloseableHttpClient httpClient                = HttpClients.custom()                .setSSLHostnameVerifier(new NoopHostnameVerifier())                .setSSLSocketFactory(sslConnectionSocketFactory)//                .setDefaultCredentialsProvider(credsProvider)                .build();        HttpComponentsClientHttpRequestFactory requestFactory                = new HttpComponentsClientHttpRequestFactory();        requestFactory.setHttpClient(httpClient);        requestFactory.setConnectTimeout((int)Duration.ofSeconds(5).toMillis());        return new RestTemplate(requestFactory);    }</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>之前使用方式不变:</p><pre><code class="java">    @Autowired    private RestTemplate restTemplate;</code></pre><p>使用 https RestTemplate</p><pre><code class="java">    @Autowired    private RestTemplate httpsRestTemplate;</code></pre>]]></content>
    
    <summary type="html">
    
      有时在项目中调用的接口是 https 的形式, 这时使用 RestTemplate 来调用请求就会出错, 下面是解决方式
    
    </summary>
    
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Office for Mac 2019 切换显示语言</title>
    <link href="http://blog.joylau.cn/2020/10/12/Daily-Mac-Office/"/>
    <id>http://blog.joylau.cn/2020/10/12/Daily-Mac-Office/</id>
    <published>2020-10-12T03:36:26.000Z</published>
    <updated>2020-10-12T03:37:03.633Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近因为工作原因不得不在 Mac 上安装了 Office 套件</p><p>但是有一个问题, 我的 Mac 的系统语言是英文的, 安装完 Office 后, 整个操作都是英文的, 蒙蔽了….</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>打开终端:</p><pre><code class="shell">    defaults write com.microsoft.Word AppleLanguages &#39;(&quot;zh_CN&quot;)&#39;    defaults write com.microsoft.Excel AppleLanguages &#39;(&quot;zh_CN&quot;)&#39;    defaults write com.microsoft.Powerpoint AppleLanguages &#39;(&quot;zh_CN&quot;)&#39;</code></pre><p>切换回英文的话, 修改 zh_CH 为 en 即可</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>在系统设置里面修改特定APP的语言</p><p><img src="https://pic4.zhimg.com/v2-f10a8fd2e6852595707a23bc0bf58871_r.jpg" alt="IMage"></p><p>注: 转自知乎</p>]]></content>
    
    <summary type="html">
    
      Office for Mac 2019 切换显示语言
    
    </summary>
    
    
      <category term="日常折腾篇" scheme="http://blog.joylau.cn/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E7%AF%87/"/>
    
    
      <category term="日常折腾" scheme="http://blog.joylau.cn/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 bpytop 记录</title>
    <link href="http://blog.joylau.cn/2020/10/09/Linux-Install-Bpytop/"/>
    <id>http://blog.joylau.cn/2020/10/09/Linux-Install-Bpytop/</id>
    <published>2020-10-09T02:07:44.000Z</published>
    <updated>2020-10-10T00:42:26.903Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在 CentOS 8 上安装 bpytop 很简单, 安装 epel 库后执行 <code>dnf install bpytop</code> 即可, 但是在 CentOS 7 的 epel 库里却没有这个 bpytop 包, 这里介绍如何在 CentOS 7 下安装 bpytop</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>安装 epel 库</li></ol><pre><code class="bash">    yum install epel-release</code></pre><ol start="2"><li>安装 snapd 并启用 snapd 套接字</li></ol><pre><code class="bash">    yum install snapd    systemctl enable --now snapd.socket</code></pre><ol start="3"><li>用户重新登录</li></ol><ol start="4"><li>安装及权限配置</li></ol><pre><code class="shell">    snap install bpytop    sudo snap connect bpytop:mount-observe    sudo snap connect bpytop:network-control    sudo snap connect bpytop:hardware-observe    sudo snap connect bpytop:system-observe    sudo snap connect bpytop:process-control    sudo snap connect bpytop:physical-memory-observe</code></pre>]]></content>
    
    <summary type="html">
    
      在 CentOS 8 上安装 bpytop 很简单, 安装 epel 库后执行 `dnf install bpytop` 即可, 但是在 CentOS 7 的 epel 库里却没有这个 bpytop 包
    
    </summary>
    
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 挂载有用户名密码的网络磁盘</title>
    <link href="http://blog.joylau.cn/2020/09/29/Linux-Mount-Auth-NetDisk/"/>
    <id>http://blog.joylau.cn/2020/09/29/Linux-Mount-Auth-NetDisk/</id>
    <published>2020-09-29T08:36:37.000Z</published>
    <updated>2020-09-29T08:58:34.751Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很多时候我们通过 mount -t nfs -o nolock 服务端IP:共享目录绝对路径 本地挂载目录 来挂载网络磁盘</p><p>很多时候，为了安全考虑网络磁盘都设置了用户名密码</p><p>这时挂载的时候就需要设置用户名密码了</p><p>很可惜上述方式 nfs 没有找到设置用户名密码的参数</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用 cifs </p><ol><li><p>安装依赖： <code>yum install cifs-utils</code></p></li><li><p>挂载： <code>mount -t cifs -o username=USERNAME,password=PASSWORD,iocharset=utf8 //192.168.10.191/CM_Backup /mnt/191-nas</code></p></li></ol><p>注意主机地址前的 <code>//</code> 不能省略</p><ol start="3"><li>卸载挂载： umount /mnt/191-nas</li></ol><h2 id="额外的"><a href="#额外的" class="headerlink" title="额外的"></a>额外的</h2><p>挂载网络磁盘很多时候无非为了备份， 使用 <code>cp</code> 命令像本地拷贝文件一样备份即可，但是 cp 命令无法显示进度，对于大文件来说，就会等待上很长的时间无输出</p><p>我这里提供 2 中解决方式</p><ol><li>使用 <code>pv</code></li></ol><p>语法： <code>pv sourcefile &gt; targetfile</code></p><p>优点： 提供实时进度条显示</p><p>缺点： 只能终端显示， 无法记录到文件中， 而且一旦终止任务， 进程无法正常退出</p><ol start="2"><li>使用 <code>rsync</code></li></ol><p>语法： <code>rsync -avPh  sourcefile  targetfile</code></p><p>优点： 使用命令 <code>rsync -avPh  sourcefile  targetfile | tee log.log</code> 可将进度写入日志文件中</p><p>缺点： 暂无</p>]]></content>
    
    <summary type="html">
    
      很多时候我们通过 mount -t nfs -o nolock 服务端IP:共享目录绝对路径 本地挂载目录 来挂载网络磁盘， 为了安全考虑网络磁盘都设置了用户名密码， 这时....
    
    </summary>
    
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Termius 多终端软件配置手动同步</title>
    <link href="http://blog.joylau.cn/2020/09/27/Termius-Multi-Tterminal-Sync/"/>
    <id>http://blog.joylau.cn/2020/09/27/Termius-Multi-Tterminal-Sync/</id>
    <published>2020-09-27T07:02:15.000Z</published>
    <updated>2020-09-27T07:18:08.599Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Termius 算是我比较喜欢的一款终端软件了, 因为它很漂亮, 自带的字体很好看, 软件本身是免费的, 但是如果要使用一些高级功能</p><p>比如不同操作系统下的 Termius 的软件配置同步则需要订阅他的高级功能, 收费不低, 关键还不是买断机制的, 是按年缴费</p><p>这不得不使我研究了一番</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经我研究, Termius 是使用 Electron 开发的, 挂不得它可以把界面做的这么好看</p><p>我本身也使用 Electron 开发过一些加壳软件, 知道软件的一些配置信息存储的技术手段</p><ol><li>本地文件存储</li><li>cookie 存储</li><li>Local Storage 存储</li><li>IndexedDB 存储</li></ol><p>其中第二,第三的方式存储不太可能, 是一些简单的字符串存储, 容量小, 且数据结构简单</p><p>最终我定位了它使用的是 IndexedDB 存储</p><p>且存储的位置(Mac OS)在 <code>/Users/joylau/Library/Containers/com.termius.mac/Data/Library/Application Support/Termius/IndexedDB/file__0.indexeddb.leveldb/000003.log</code></p><p>同理在 Windows 下或者 Linux 下找到该 indexedDB 数据文件, 再进行替换, 则软件的配置得以同步</p>]]></content>
    
    <summary type="html">
    
      Termius 多终端软件配置手动同步
    
    </summary>
    
    
      <category term="工具类篇" scheme="http://blog.joylau.cn/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%AF%87/"/>
    
    
      <category term="Termius" scheme="http://blog.joylau.cn/tags/Termius/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose Version 3 限制 CPU 和 内存的使用方法</title>
    <link href="http://blog.joylau.cn/2020/09/22/Docker-Compose-3-Mem-CPU-Limit/"/>
    <id>http://blog.joylau.cn/2020/09/22/Docker-Compose-3-Mem-CPU-Limit/</id>
    <published>2020-09-22T03:18:12.000Z</published>
    <updated>2020-09-22T03:23:55.782Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在 docker 官方问文档里查找关于 docker compose 3 关于资源限制的配置项<br>发现只能用于集群部署</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>依然使用集群部署的配置方式:</p><pre><code class="yaml">    redis:        image: redis:alpine        container_name: redis        deploy:          resources:            limits:              cpus: &#39;0.50&#39;              memory: 50M</code></pre><p>这时启动时加入参数 <code>--compatibility</code> 即可</p><pre><code class="bash">    docker-compose --compatibility up -d</code></pre><p><code>--compatibility</code>: 以兼容模式运行, 将 v3 的语法转化为 v2 的语法, 而不需要将 compose 文件改为 v2 的版本</p>]]></content>
    
    <summary type="html">
    
      记录 Docker Compose Version 3 限制 CPU 和 内存的使用方法
    
    </summary>
    
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 自动注入 Gradle 属性并在自定义 Banner 图中使用</title>
    <link href="http://blog.joylau.cn/2020/09/01/SpringBoot-Gradle-Property-Expansion/"/>
    <id>http://blog.joylau.cn/2020/09/01/SpringBoot-Gradle-Property-Expansion/</id>
    <published>2020-09-01T08:00:53.000Z</published>
    <updated>2020-09-01T08:28:25.240Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有时我们在 gradle 里定义了一些属性, 想在 springboot 的 application 配置文件里使用, 这里介绍这种处理方式, 并且将配置应用于 springboot 的自定义 Banner 图中</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>配置 build.gradle</li></ol><p>添加以下配置</p><pre><code class="groovy">    processResources {        filesMatching(&#39;application.yml&#39;) {            expand(project.properties)        }    }</code></pre><p>如果想将 gradle 的配置应用于所有 springboot 配置文件, 则直接使用</p><pre><code class="groovy">    processResources {        expand(project.properties)    }</code></pre><ol start="2"><li>在 springboot 的配置文件里使用</li></ol><p>比如我在 <strong>gradle.properties</strong>  里定义了如下配置:</p><pre><code class="properties">    author=JoyLau    email=2587038142.liu@gmail.com    projectArtifact=es-doc-office    projectGroup=cn.joylau.code    projectVersion=2.0.5    javaVersion=1.8</code></pre><p>在 springboot 配置文件里应用:</p><pre><code class="yaml">    info:      app:        name: ${projectArtifact}        author: ${author}        email: ${email}        version: ${projectVersion}</code></pre><blockquote><p>需要注意的是: <code>${}</code> 是 springboot 里本身使用引入内置变量的方法, 如果使用上述方式, 则原来使用 springboot 内置的方式的话需要加上 <code>\</code> 转义, 即使用 <code>\${}</code></p></blockquote><p>经过如上使用, springboot 应用会在编译期将配置文件转化并复制到了项目的 <strong>build/resources/main</strong> 目录下, 如果到该目录下查找配置文件, 则会发现文件里的属性已经被实际的值替换了</p><h3 id="自定义属性配置到-Banner-图中"><a href="#自定义属性配置到-Banner-图中" class="headerlink" title="自定义属性配置到 Banner 图中"></a>自定义属性配置到 Banner 图中</h3><p>很多时候我们会自定义 banner 图, 使用 banner.txt 可以使用 springboot 的内置变量<br>结合上面的使用方法, 我给出我的使用示例<br>banner 的生成可以去这个在线网站: <a href="https://devops.datenkollektiv.de/banner.txt/index.html" target="_blank" rel="noopener">Online Spring Boot Banner Generator</a></p><p><img src="http://image.joylau.cn/blog/SpringBoot-Gradle-Property-Expansion.png" alt="SpringBoot-Gradle-Property-Expansion"></p><h4 id="banner-txt"><a href="#banner-txt" class="headerlink" title="banner.txt"></a>banner.txt</h4><pre><code class="text">    ,------.  ,---.           ,------.    ,-----.   ,-----.          ,-----.  ,------. ,------. ,--.  ,-----. ,------.    |  .---&#39; &#39;   .-&#39;          |  .-.  \  &#39;  .-.  &#39; &#39;  .--./         &#39;  .-.  &#39; |  .---&#39; |  .---&#39; |  | &#39;  .--./ |  .---&#39;    |  `--,  `.  `-.          |  |  \  : |  | |  | |  |             |  | |  | |  `--,  |  `--,  |  | |  |     |  `--,    |  `---. .-&#39;    |         |  &#39;--&#39;  / &#39;  &#39;-&#39;  &#39; &#39;  &#39;--&#39;\         &#39;  &#39;-&#39;  &#39; |  |`    |  |`    |  | &#39;  &#39;--&#39;\ |  `---.    `------&#39; `-----&#39;          `-------&#39;   `-----&#39;   `-----&#39;          `-----&#39;  `--&#39;     `--&#39;     `--&#39;  `-----&#39; `------&#39;                                   Author        ::    ${info.app.author} (${info.app.email})                                   Boot Version  ::    ${spring-boot.version}                                   App  Version  ::    ${info.app.version}</code></pre><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><pre><code class="text">    ,------.  ,---.           ,------.    ,-----.   ,-----.          ,-----.  ,------. ,------. ,--.  ,-----. ,------.    |  .---&#39; &#39;   .-&#39;          |  .-.  \  &#39;  .-.  &#39; &#39;  .--./         &#39;  .-.  &#39; |  .---&#39; |  .---&#39; |  | &#39;  .--./ |  .---&#39;    |  `--,  `.  `-.          |  |  \  : |  | |  | |  |             |  | |  | |  `--,  |  `--,  |  | |  |     |  `--,    |  `---. .-&#39;    |         |  &#39;--&#39;  / &#39;  &#39;-&#39;  &#39; &#39;  &#39;--&#39;\         &#39;  &#39;-&#39;  &#39; |  |`    |  |`    |  | &#39;  &#39;--&#39;\ |  `---.    `------&#39; `-----&#39;          `-------&#39;   `-----&#39;   `-----&#39;          `-----&#39;  `--&#39;     `--&#39;     `--&#39;  `-----&#39; `------&#39;                                   Author        ::    JoyLau (2587038142.liu@gmail.com)                                   Boot Version  ::    2.1.2.RELEASE                                   App  Version  ::    2.0.5    2020-09-01 16:15:25.967  INFO 51691 --- [           main] cn.joylau.code.EsDocOfficeApplication    : Starting EsDocOfficeApplication on JoyLaudeMacBook-Pro.local with PID 51691 (/Users/joylau/dev/idea-project/dev-app/es-doc-office/es-doc-office-service/build/classes/java/main started by joylau in /Users/joylau/dev/idea-project/es-doc-office)    2020-09-01 16:15:25.969  INFO 51691 --- [           main] cn.joylau.code.EsDocOfficeApplication    : The following profiles are active: db,dev    2020-09-01 16:15:27.130  INFO 51691 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.    2020-09-01 16:15:27.231  INFO 51691 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 95ms. Found 3 repository interfaces.    2020-09-01 16:15:27.643  INFO 51691 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39; of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$54a92264] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)    2020-09-01 16:15:27.922  WARN 51691 --- [           main] io.undertow.websockets.jsr               : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used    2020-09-01 16:15:27.958  INFO 51691 --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext    2020-09-01 16:15:27.959  INFO 51691 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1933 ms    2020-09-01 16:15:28.242  INFO 51691 --- [           main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource    2020-09-01 16:15:28.381  INFO 51691 --- [           main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited    2020-09-01 16:15:28.659  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : no modules loaded    2020-09-01 16:15:28.660  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]    2020-09-01 16:15:28.660  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.join.ParentJoinPlugin]    2020-09-01 16:15:28.660  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]    2020-09-01 16:15:28.660  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]    2020-09-01 16:15:28.660  INFO 51691 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.transport.Netty4Plugin]    ..........</code></pre>]]></content>
    
    <summary type="html">
    
      SpringBoot 自动注入 Gradle 属性并在自定义 Banner 图中使用
    
    </summary>
    
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Gradle" scheme="http://blog.joylau.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu --- 调整状态栏托盘图标的顺序</title>
    <link href="http://blog.joylau.cn/2020/08/08/Ubuntu-Tray-Icon-Order/"/>
    <id>http://blog.joylau.cn/2020/08/08/Ubuntu-Tray-Icon-Order/</id>
    <published>2020-08-08T07:54:55.000Z</published>
    <updated>2020-08-07T08:06:49.003Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>继上一篇文章 【indicator-sysmonitor 状态栏监控工具开启对磁盘读写的监控】，这里我想让监控的数据放到状态栏的最左侧， 可发现事情并不简单。。。</p><p>因为 Ubuntu 下并不像 Mac 下按住 option 键可随意拖动</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><pre><code class="bash">    sudo vim /usr/share/indicator-application/ordering-override.keyfile</code></pre><p>修改顺序， 数字越小越靠左</p><p>修改完毕使用 <code>restart unity-panel-service</code> 重启生效</p><p>但发现修改完后顺序并没有改变</p><p>这个时候需要结合状态栏实际已有的托盘图标来操作顺序</p><p>获取状态栏图标的脚本：</p><pre><code class="bash">    #!/bin/sh    dbus-send --type=method_call --print-reply --dest=com.canonical.indicator.application /com/canonical/indicator/application/service com.canonical.indicator.application.service.GetApplications | grep &quot;string&quot; &gt; /tmp/indicators.txt    c=$(wc -l &lt; /tmp/indicators.txt)    i=$((c / 8))    s=6    while [ &quot;$i&quot; != &quot;0&quot; ]; do        echo $(awk -v n=$s &#39;/string/ &amp;&amp; !--n {getline; print; exit}&#39; /tmp/indicators.txt)        s=$(( $s + 8 ))        i=$(( $i - 1 ))    done</code></pre><p>执行这个脚本获取图标的程序名称， 再修改 <code>ordering-override.keyfile</code> 的顺序， <code>restart unity-panel-service</code> 重启生效</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>按照上述方式操作后， 顺序得以改变， 但是如果后续打开了新的程序有托盘图标， 则新程序的图标会在最左边</p>]]></content>
    
    <summary type="html">
    
      继上一篇文章 【indicator-sysmonitor 状态栏监控工具开启对磁盘读写的监控】，这里我想让监控的数据放到状态栏的最左侧， 可发现事情并不简单
    
    </summary>
    
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu --- indicator-sysmonitor 状态栏监控工具开启对磁盘读写的监控</title>
    <link href="http://blog.joylau.cn/2020/08/07/Ubuntu-Disk-Stat/"/>
    <id>http://blog.joylau.cn/2020/08/07/Ubuntu-Disk-Stat/</id>
    <published>2020-08-07T07:06:08.000Z</published>
    <updated>2020-08-07T08:06:49.003Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>indicator-sysmonitor 默认的模式可以监控 CPU 使用率， 内存使用， 网络 I/O 等， 但是却缺少了很关键的对当前磁盘 I/O 的监控，于是我就想着把他给加上去</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>indicator-sysmonitor 可以新建传感器，可以自定义命令来显示输出， 于是我想着使用 shell 命令获取当前磁盘的 I/O 在输出即可</p><h3 id="dstat-方式"><a href="#dstat-方式" class="headerlink" title="dstat 方式"></a>dstat 方式</h3><ol><li>使用 <code>dstat</code> 命令， 需要机器上事先安装 <code>dstat</code> </li></ol><pre><code class="shell">    dstat  --disk</code></pre><p>该命令可以监控磁盘使用情况</p><p>我在稍对结果做下过滤的优化， 使用下面的命令</p><pre><code class="shell">    dstat  --disk 1 1 | sed -n &#39;4p&#39; | awk &#39;{printf &quot;r: &quot;}{printf $1}{printf &quot;   w: &quot;}{printf $2}&#39;</code></pre><p>上述的命令的解释为 1s 输出一次， 一次输出一行， 取第四行， 取第一列和第二列，在加上读写的标识 <code>r:</code> 和 <code>w:</code> 的前缀</p><p>输出的结果为：</p><pre><code class="text">    r: 0   w: 6244kj</code></pre><p>在 indicator-sysmonitor 里新建一项， 复制上述命令，效果如下</p><p><img src="http://image.joylau.cn/blog/stat-disk_001.png" alt="disk-dstat"></p><h3 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h3><ol><li>使用 <code>iotop</code> 命令， 需要机器上事先安装 <code>iotop</code> </li></ol><pre><code class="shell">    sudo iotop</code></pre><p>在美化下输出结果：</p><pre><code class="bash">    sudo iotop -o -b -n 1 | sed -n &#39;2p&#39; | awk &#39;{printf &quot;r: &quot;}{printf  $4 $5}{printf &quot;  w: &quot;}{printf $10 $11}&#39;</code></pre><p>命令的意思同上</p><p>输出的结果为：</p><pre><code class="text">    r: 0.00B/s  w: 0.00B/s</code></pre><p>同上操作， 命令更换下，效果如下：</p><p><img src="http://image.joylau.cn/blog/stat-disk_002.png" alt="disk-iotop"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ol><li>输出单位不一样，第一种方式单位只有 k,m 这样的， 第二种是 B/s, KB/s, MB/s 这样的， 不过第一种方式的单位也可以手动给补全上</li><li>第一种方式 <code>dstat</code> 命令不需要 root 权限即可执行， 第二种方式 <code>iotop</code> 命令需要 root 权限即需要加 <code>sudo</code></li></ol><p>使用 sudo 的常用方式为：</p><pre><code class="bash">    echo &quot;你的 root 的密码&quot; | sudo iotop ....</code></pre><p>但是这样的方式在终端执行可以输出结果， 在 indicator-sysmonitor 执行却不能输出结果。。。。。</p><p>于是需要解决这个问题， 即使用普通用户执行 <code>iotop</code> 命令时不需要输入密码</p><p>这里我的解决方案如下：</p><pre><code class="bash">    sudo visudo    ## 添加下面几行    User_Alias NET_USERS = joylau    Cmnd_Alias SYS_STATUS = /usr/sbin/iotop # 多个命令逗号隔开    NET_USERS ALL=(root)   NOPASSWD:SYS_STATUS</code></pre><p><code>Ctrl + O</code> 保存后，普通用户 joylau 使用 <code>sudo iotop</code> 就不需要输入密码了， 也就实现了第二种方式的效果了</p><ol start="3"><li>性能对比： 实测第一种方式的性能（CPU使用平均在 2%）要稍好于第二种（CPU使用平均在 5%）</li></ol>]]></content>
    
    <summary type="html">
    
      indicator-sysmonitor 默认的模式可以监控 CPU 使用率， 内存使用， 网络 I/O 等， 但是却缺少了很关键的对当前磁盘 I/O 的监控，于是我就想着把他给加上去
    
    </summary>
    
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro 使用绿联 TypeC 网卡关闭笔记本盖子时导致局域网网络不可用的问题解决</title>
    <link href="http://blog.joylau.cn/2020/08/04/MacBookPro-uGreen-TypeC-Hub/"/>
    <id>http://blog.joylau.cn/2020/08/04/MacBookPro-uGreen-TypeC-Hub/</id>
    <published>2020-08-04T09:06:29.000Z</published>
    <updated>2020-08-04T14:40:18.596Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我的 MacBook Pro 使用的是绿联的外接扩展坞, 其中有一个网口<br>在京东购买的: <a href="https://item.jd.com/4445121.html" target="_blank" rel="noopener">https://item.jd.com/4445121.html</a></p><p>型号为: CM179<br>网卡芯片为: RTL8153B</p><p>最近发现只要我的 MacBook Pro 关闭了盖子, 会导致接在同一交换机下的路由器就无法上网<br>打开盖子后,网络又恢复正常了  </p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>搜索了一番没找到解决方式</p><p>于是就找到当时购买的这款产品的京东介绍页面看了看</p><p>想着去绿联的官网找找驱动试试: <a href="https://www.lulian.cn/download/list-34-cn.html" target="_blank" rel="noopener">https://www.lulian.cn/download/list-34-cn.html</a></p><p>找到对应的型号和网卡芯片: <a href="https://www.lulian.cn/download/38-cn.html" target="_blank" rel="noopener">https://www.lulian.cn/download/38-cn.html</a></p><p>下载并解压驱动压缩包，双击“RTUNICv1.0.20.pkg”文件，一直点击继续，安装完成后重启电脑即可。</p><p>重启后又试了下关闭盖子, 问题解决了!!!</p>]]></content>
    
    <summary type="html">
    
      MacBook Pro 使用绿联 TypeC 网卡关闭笔记本盖子时导致局域网网络不可用的问题解决
    
    </summary>
    
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
  </entry>
  
</feed>
