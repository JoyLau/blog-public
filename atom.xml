<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2019-01-24T16:01:05.905Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch analyzer 和 search_analyzer 的使用记录</title>
    <link href="http://blog.joylau.cn/2019/01/24/Elasticsearch-Analyzer/"/>
    <id>http://blog.joylau.cn/2019/01/24/Elasticsearch-Analyzer/</id>
    <published>2019-01-24T02:43:32.000Z</published>
    <updated>2019-01-24T16:01:05.905Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>elasticsearch 6.4.3</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面一段文字用 ik 进行分词</p><p><a href="http://34.0.7.184:9200/_analyze/" target="_blank" rel="noopener">http://34.0.7.184:9200/_analyze/</a> POST</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"关于加快建设合肥地铁七号线的通知说明"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"tokens"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"关于"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"加快"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"建设"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"合肥"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"地铁"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">8</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"七号"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"线"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">13</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"的"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">13</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">14</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"通知"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">14</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">16</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"说明"</span>,</span><br><span class="line"><span class="attr">"start_offset"</span>: <span class="number">16</span>,</span><br><span class="line"><span class="attr">"end_offset"</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line"><span class="attr">"position"</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个时候如果配置的 analyzer 为 ik_smart 或者 analyzer 和 search_analyzer 都为 ik_smart, 则短语中每一个字都能搜到结果,还可以设置高亮信息来着重看一下</p></li><li><p>如果配置的 analyzer 为 ik search_analyzer 为 standard ,则 <code>通知</code>,<code>说明</code>,<code>七号</code> 这样的词是搜不到的,而 <code>线</code> 和 <code>的</code> 这样的词可以搜到,理解一下</p></li></ul><p><a href="http://34.0.7.184:9200/attachment_libs/_search" target="_blank" rel="noopener">http://34.0.7.184:9200/attachment_libs/_search</a> POST</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"关于"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        <span class="string">"fileName^1.0"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"best_fields"</span>,</span><br><span class="line">      <span class="attr">"operator"</span>: <span class="string">"OR"</span>,</span><br><span class="line">      <span class="attr">"slop"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"prefix_length"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"max_expansions"</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attr">"zero_terms_query"</span>: <span class="string">"NONE"</span>,</span><br><span class="line">      <span class="attr">"auto_generate_synonyms_phrase_query"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"fuzzy_transpositions"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"boost"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"includes"</span>: [</span><br><span class="line">      <span class="string">"fileName"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"excludes"</span>: [</span><br><span class="line">      <span class="string">"data"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;span style = 'color:red'&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"post_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;/span&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"*"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"hits"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"hits"</span>: [ ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而搜索 <code>线</code> 返回的结果为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_shards"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"hits"</span>: &#123;</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"max_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line"><span class="attr">"hits"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"attachment_libs"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"attachment_info"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"fd45d5be-c314-488a-99d3-041acc015377"</span>,</span><br><span class="line"><span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line"><span class="attr">"_source"</span>: &#123;</span><br><span class="line"><span class="attr">"fileName"</span>: <span class="string">"关于加快建设合肥地铁七号线的通知说明"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"highlight"</span>: &#123;</span><br><span class="line"><span class="attr">"fileName"</span>: [</span><br><span class="line"><span class="string">"关于加快建设合肥地铁七号&lt;span style = 'color:red'&gt;线&lt;/span&gt;的通知说明"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>分析器主要有两种情况会被使用，一种是插入文档时，将text类型的字段做分词然后插入倒排索引，第二种就是在查询时，先对要查询的text类型的输入做分词，再去倒排索引搜索</li><li>如果想要让 索引 和 查询 时使用不同的分词器，ElasticSearch也是能支持的，只需要在字段上加上search_analyzer参数<ol><li>在索引时，只会去看字段有没有定义analyzer，有定义的话就用定义的，没定义就用ES预设的</li><li>在查询时，会先去看字段有没有定义search_analyzer，如果没有定义，就去看有没有analyzer，再没有定义，才会去使用ES预设的</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      记录下  elasticsearch analyzer 和 search_analyzer 的区别
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker elasticsearch 集群搭建记录</title>
    <link href="http://blog.joylau.cn/2019/01/23/Docker-Elasticsearch/"/>
    <id>http://blog.joylau.cn/2019/01/23/Docker-Elasticsearch/</id>
    <published>2019-01-23T06:59:43.000Z</published>
    <updated>2019-01-23T08:01:07.041Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PRIVATE_REPO=34.0.7.183:5000</span><br><span class="line">ES_VERSION=6.4.3</span><br><span class="line">ELASTICSEARCH_CLUSTER_DIR=/Users/joylau/dev/idea-project/dev-app/es-doc-office/elasticsearch-cluster</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  node-0:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-0</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-0:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-0:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9201</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9301</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-1:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-1:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=node-0"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9202</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9302</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-2:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-2:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-3</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9203</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9303</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-3:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-3:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1,node-2"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">  node-4:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">$&#123;PRIVATE_REPO&#125;/joylau/es-doc:$&#123;ES_VERSION&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">node-4</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9204</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9304</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/data/node-4:/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;ELASTICSEARCH_CLUSTER_DIR&#125;/logs/node-4:/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=es-doc-office</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=node-4</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms2g -Xmx2g"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.zen.ping.unicast.hosts=master,node-1,node-3"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">esnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  esnet:</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>挂载的日志和数据文件的权限</li><li><code>vm.max_map_count</code> 数目的设置</li><li>mac 环境下注意配置 docker 的内存大小设置</li></ol><h3 id="env-init"><a href="#env-init" class="headerlink" title="env.init"></a>env.init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">mkdir -p /home/liufa/es-data/data/&#123;node-0,node-1,node-2,node-3,node-4&#125; &amp;&amp; <span class="built_in">echo</span> es-data directory created success || <span class="built_in">echo</span> es-data directory created failure &amp;&amp; \</span><br><span class="line">mkdir -p /home/liufa/es-data/logs/&#123;node-0,node-1,node-2,node-3,node-4&#125; &amp;&amp; <span class="built_in">echo</span> es-logs directory created success || <span class="built_in">echo</span> es-logs directory created failure &amp;&amp; \</span><br><span class="line">groupadd elasticsearch &amp;&amp; \</span><br><span class="line">useradd elasticsearch -g elasticsearch &amp;&amp; \</span><br><span class="line">chown -R elasticsearch:elasticsearch /home/liufa/es-data/* &amp;&amp; \</span><br><span class="line">chmod -R 777 /home/liufa/es-data/* &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'vm.max_map_count=262144'</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; \</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下自己使用 docker 搭建 elasticsearch 集群环境的记录
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- Elasticsearch health check failed</title>
    <link href="http://blog.joylau.cn/2019/01/16/SpringBoot-Elasticsearch-HealthCheck/"/>
    <id>http://blog.joylau.cn/2019/01/16/SpringBoot-Elasticsearch-HealthCheck/</id>
    <published>2019-01-16T09:24:38.000Z</published>
    <updated>2019-01-16T09:56:13.690Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="版本环境"><a href="#版本环境" class="headerlink" title="版本环境"></a>版本环境</h3><ol><li>spring boot : 2.1.2.RELEASE</li><li>spring-data-elasticsearch :3.1.4.RELEASE</li><li>elasticsearch: 6.4.3</li></ol><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 spring data elasticsearch 来连接使用 elasticsearch, 配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">docker-cluster</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.68</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure><p>已经确认 elasticsearch 的 9300 和 9200 端口无任何问题,均可进行连接</p><p>可是在启动项目是报出如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">2019-01-16 17:17:35.376  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : no modules loaded</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.join.ParentJoinPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]</span><br><span class="line">2019-01-16 17:17:35.378  INFO 36410 --- [           main] o.elasticsearch.plugins.PluginsService   : loaded plugin [org.elasticsearch.transport.Netty4Plugin]</span><br><span class="line">2019-01-16 17:17:36.045  INFO 36410 --- [           main] o.s.d.e.c.TransportClientFactoryBean     : Adding transport node : 192.168.10.68:9300</span><br><span class="line">2019-01-16 17:17:36.740  INFO 36410 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService <span class="string">'applicationTaskExecutor'</span></span><br><span class="line">2019-01-16 17:17:36.987  INFO 36410 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path <span class="string">'/actuator'</span></span><br><span class="line">2019-01-16 17:17:37.041  INFO 36410 --- [           main] org.xnio                                 : XNIO version 3.3.8.Final</span><br><span class="line">2019-01-16 17:17:37.049  INFO 36410 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.3.8.Final</span><br><span class="line">2019-01-16 17:17:37.091  INFO 36410 --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) 8080 (http) with context path <span class="string">''</span></span><br><span class="line">2019-01-16 17:17:37.094  INFO 36410 --- [           main] cn.joylau.code.EsDocOfficeApplication    : Started EsDocOfficeApplication <span class="keyword">in</span> 3.517 seconds (JVM running <span class="keyword">for</span> 4.124)</span><br><span class="line">2019-01-16 17:17:37.641  INFO 36410 --- [on(4)-127.0.0.1] io.undertow.servlet                      : Initializing Spring DispatcherServlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-16 17:17:37.641  INFO 36410 --- [on(4)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-16 17:17:37.660  INFO 36410 --- [on(4)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Completed initialization <span class="keyword">in</span> 19 ms</span><br><span class="line">2019-01-16 17:17:37.704  WARN 36410 --- [on(5)-127.0.0.1] s.b.a.e.ElasticsearchRestHealthIndicator : Elasticsearch health check failed</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Connection refused</span><br><span class="line">at org.elasticsearch.client.RestClient<span class="variable">$SyncResponseListener</span>.get(RestClient.java:943) ~[elasticsearch-rest-client-6.4.3.jar:6.4.3]</span><br><span class="line">at org.elasticsearch.client.RestClient.performRequest(RestClient.java:227) ~[elasticsearch-rest-client-6.4.3.jar:6.4.3]</span><br><span class="line">at org.springframework.boot.actuate.elasticsearch.ElasticsearchRestHealthIndicator.doHealthCheck(ElasticsearchRestHealthIndicator.java:61) ~[spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:84) ~[spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:98) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:50) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]</span><br><span class="line">at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:246) [spring-core-5.1.4.RELEASE.jar:5.1.4.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:76) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:61) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:126) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:99) [spring-boot-actuator-2.1.2.RELEASE.jar:2.1.2.RELEASE]</span><br><span class="line">at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_131]</span><br><span class="line">at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.access<span class="variable">$300</span>(RMIConnectionImpl.java:76) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl<span class="variable">$PrivilegedOperation</span>.run(RMIConnectionImpl.java:1309) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_131]</span><br><span class="line">at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_131]</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor32.invoke(Unknown Source) ~[na:na]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]</span><br><span class="line">at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:346) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport<span class="variable">$1</span>.run(Transport.java:200) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport<span class="variable">$1</span>.run(Transport.java:197) [na:1.8.0_131]</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.run0(TCPTransport.java:826) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.lambda<span class="variable">$run</span><span class="variable">$0</span>(TCPTransport.java:683) [na:1.8.0_131]</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_131]</span><br><span class="line">at sun.rmi.transport.tcp.TCPTransport<span class="variable">$ConnectionHandler</span>.run(TCPTransport.java:682) [na:1.8.0_131]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_131]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_131]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_131]</span><br><span class="line">Caused by: java.net.ConnectException: Connection refused</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) ~[na:1.8.0_131]</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717) ~[na:1.8.0_131]</span><br><span class="line">at org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor.processEvent(DefaultConnectingIOReactor.java:171) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor.processEvents(DefaultConnectingIOReactor.java:145) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.execute(AbstractMultiworkerIOReactor.java:348) ~[httpcore-nio-4.4.10.jar:4.4.10]</span><br><span class="line">at org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager.execute(PoolingNHttpClientConnectionManager.java:221) ~[httpasyncclient-4.1.4.jar:4.1.4]</span><br><span class="line">at org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase<span class="variable">$1</span>.run(CloseableHttpAsyncClientBase.java:64) ~[httpasyncclient-4.1.4.jar:4.1.4]</span><br><span class="line">... 1 common frames omitted</span><br></pre></td></tr></table></figure><p>连接被拒绝???</p><p>发现无法进行 elasticsearch 的健康检查,于是想到我使用了 actuator 进行端点健康监控</p><p>经过调试发现如下代码为返回数据:<br>ElasticsearchRestHealthIndicator 类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Response response = <span class="keyword">this</span>.client</span><br><span class="line">.performRequest(<span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/_cluster/health/"</span>));</span><br><span class="line">StatusLine statusLine = response.getStatusLine();</span><br><span class="line"><span class="keyword">if</span> (statusLine.getStatusCode() != HttpStatus.SC_OK) &#123;</span><br><span class="line">builder.down();</span><br><span class="line">builder.withDetail(<span class="string">"statusCode"</span>, statusLine.getStatusCode());</span><br><span class="line">builder.withDetail(<span class="string">"reasonPhrase"</span>, statusLine.getReasonPhrase());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> (InputStream inputStream = response.getEntity().getContent()) &#123;</span><br><span class="line">doHealthCheck(builder,</span><br><span class="line">StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new Request(&quot;GET&quot;, &quot;/_cluster/health/&quot;)</code> 正是 elasticsearch 健康的请求,但是没有看到 host 和 port</p><p>于是用抓包工具发现其请求的是 <code>127.0.0.1:9200</code></p><p>那这肯定是 springboot 的默认配置了</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>查看 <code>spring-boot-autoconfigure-2.1.2.RELEASE.jar</code><br>找到 elasticsearch 的配置 <code>org.springframework.boot.autoconfigure.elasticsearch</code><br>在找到类 <code>RestClientProperties</code><br>看到如下源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.elasticsearch.rest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Comma-separated list of the Elasticsearch instances to use.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; uris = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">Collections.singletonList(<span class="string">"http://localhost:9200"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Credentials username.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Credentials password.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUris</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.uris;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUris</span><span class="params">(List&lt;String&gt; uris)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uris = uris;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Collections.singletonList(&quot;http://localhost:9200&quot;));</code> 没错了,这就是错误的起因</p><p>顺藤摸瓜, 根据 <code>spring.elasticsearch.rest</code> 的配置,配置好 <code>uris</code> 即可</p><p>于是进行如下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">docker-cluster</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.68</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">  elasticsearch:</span></span><br><span class="line"><span class="attr">    rest:</span></span><br><span class="line"><span class="attr">      uris:</span> <span class="string">["http://192.168.10.68:9200"]</span></span><br></pre></td></tr></table></figure><p>集群中的多个节点就写多个</p><p>启动,没有出现错误</p><p>还有一种方式也可以解决,但是并不是一种好的解决方式,那就是关闭 actuator 对 elasticsearch 的健康检查</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  health:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      springboot 使用 actuator 造成 elasticsearch health check failed
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 构建 elastic-job 项目的奇怪依赖问题</title>
    <link href="http://blog.joylau.cn/2019/01/14/Gradle-Elastic-Job-Dependency/"/>
    <id>http://blog.joylau.cn/2019/01/14/Gradle-Elastic-Job-Dependency/</id>
    <published>2019-01-14T09:54:39.000Z</published>
    <updated>2019-01-15T03:07:05.608Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>按照官网的说法, gradle 的配置如下:</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-core:2.1.5'</span>)</span><br><span class="line">    </span><br><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-spring:2.1.5'</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>这样配置后,写好示例代码,发现始终连接不上 zookeeper,抛出以下错误:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">An attempt was made to call the method org.apache.curator.framework.api.CreateBuilder.creatingParentsIfNeeded()Lorg/apache/curator/framework/api/ProtectACLCreateModePathAndBytesable; but it does not exist. Its class, org.apache.curator.framework.api.CreateBuilder, is available from the following locations:</span><br><span class="line"></span><br><span class="line">    jar:file:/Users/joylau/.gradle/caches/modules-<span class="number">2</span>/files-<span class="number">2.1</span>/org.apache.curator/curator-framework/<span class="number">4.0</span>.1/<span class="number">3</span>da85d2bda41cb43dc18c089820b67d12ba38826/curator-framework-<span class="number">4.0</span>.1.jar!/org/apache/curator/framework/api/CreateBuilder.class</span><br><span class="line"></span><br><span class="line">It was loaded from the following location:</span><br><span class="line"></span><br><span class="line">    file:/Users/joylau/.gradle/caches/modules-<span class="number">2</span>/files-<span class="number">2.1</span>/org.apache.curator/curator-framework/<span class="number">4.0</span>.1/<span class="number">3</span>da85d2bda41cb43dc18c089820b67d12ba38826/curator-framework-<span class="number">4.0</span>.1.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Correct the classpath of your application so that it contains a single, compatible version of org.apache.curator.framework.api.CreateBuilder</span><br></pre></td></tr></table></figure><ol start="3"><li><p>一开始我以为是搭建的 zookeeper 环境有问题,但是用其他工具可以连接的上</p></li><li><p>又怀疑是 zookeeper 的版本问题,查看了 <code>com.dangdang:elastic-job-common-core:2.1.5</code> , 发现其依赖的 zookeeper 版本是 <code>org.apache.zookeeper:zookeeper:3.5.3-beta</code></p></li><li><p>于是又用 docker 搭建了个 3.5.3-beta 的版本的 zookeeper 单机版</p></li><li><p>结果问题依旧…….</p></li><li><p>中间查找问题花费了很长的时间…..</p></li><li><p>后来把官方的 demo clone 到本地跑次看看,官方的 demo 仅仅依赖一个包 <code>com.dangdang:elastic-job-lite-core:2.1.5</code></p></li><li><p>发现这个 demo 没有问题,可以连接的上 zookeeper</p></li><li><p>对比发现2个项目的依赖版本号不一致</p></li></ol><p><img src="http://image.joylau.cn/blog/elastic-job-gradle-dependencies.png" alt="对比图"></p><ol start="11"><li><p>看到 demo 里依赖的 <code>org.apache.curator:curator-framework</code> 和 <code>org.apache.curator:curator-recipes</code> 都是 2.10.0, 而我引入的版本却是gradle 上的最新版 4.0.1, 而且也能看到2者的 zookeeper 的版本也不一致,一个是 3.4.6,一个是 3.5.3-beta</p></li><li><p>问题所在找到了</p></li><li><p>解决问题</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-core:2.1.5'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'com.dangdang:elastic-job-lite-spring:2.1.5'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'org.apache.curator:curator-framework:2.10.0'</span>)</span><br><span class="line"></span><br><span class="line">compile (<span class="string">'org.apache.curator:curator-recipes:2.10.0'</span>)</span><br></pre></td></tr></table></figure><ol start="14"><li><p>手动声明版本为 2.10.0</p></li><li><p>问题解决,但是为什么 gradle 会造成这样的问题? 为什么传递依赖时, gradle 会去找最新的依赖版本? 这些问题我还没搞清楚….</p></li><li><p>日后搞清楚了,或者有眉目了,再来更新这篇文章.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用 gradle 构建的基于 springboot 的 elastic-job 的项目发现始终连接不上 zookeeper, 一顿研究后,发现事情并不简单.....
    
    </summary>
    
      <category term="Gradle篇" scheme="http://blog.joylau.cn/categories/Gradle%E7%AF%87/"/>
    
    
      <category term="Gradle" scheme="http://blog.joylau.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>关于Jdk 8 Stream 的使用记录</title>
    <link href="http://blog.joylau.cn/2018/12/24/JDK8-Stream-Use/"/>
    <id>http://blog.joylau.cn/2018/12/24/JDK8-Stream-Use/</id>
    <published>2018-12-24T15:27:38.000Z</published>
    <updated>2019-01-04T05:26:26.526Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="LocalDateTime-将-long-格式的时间转化本地时间字符串"><a href="#LocalDateTime-将-long-格式的时间转化本地时间字符串" class="headerlink" title="LocalDateTime 将 long 格式的时间转化本地时间字符串"></a>LocalDateTime 将 long 格式的时间转化本地时间字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime</span><br><span class="line">        .ofEpochSecond(System.currentTimeMillis() / <span class="number">1000</span>, <span class="number">0</span>, ZoneOffset.ofHours(<span class="number">8</span>))</span><br><span class="line">        .format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>))</span><br></pre></td></tr></table></figure><h2 id="reduce-导致的源集合对象改变"><a href="#reduce-导致的源集合对象改变" class="headerlink" title="reduce 导致的源集合对象改变"></a>reduce 导致的源集合对象改变</h2><p>例如下属代码导致 images 里的 DataImage 对象里的 stake 对象的数量改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,List&lt;HighwayStake&gt;&gt; roadStakeMap = images.stream()</span><br><span class="line">               .filter(image -&gt; !image.getStakes().isEmpty())</span><br><span class="line">               .map(DataImage::getStakes())</span><br><span class="line">               .reduce((highwayStakes, highwayStakes2) -&gt; &#123;</span><br><span class="line">                   highwayStakes2.addAll(highwayStakes);</span><br><span class="line">                   <span class="keyword">return</span> highwayStakes2;</span><br><span class="line">               &#125;)</span><br><span class="line">               .orElse(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">               .stream()</span><br><span class="line">               .collect(Collectors.groupingBy(HighwayStake::getDlmc));</span><br></pre></td></tr></table></figure><p>因为对 dataImage 的 stakes 集合进行了合并,将 map 操作改为 复制一个新的 list , 而不是操作原来的 stakes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,List&lt;HighwayStake&gt;&gt; roadStakeMap = images.stream()</span><br><span class="line">               .filter(image -&gt; !image.getStakes().isEmpty())</span><br><span class="line">               .map(dataImage -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;(dataImage.getStakes()))</span><br><span class="line">               .reduce((highwayStakes, highwayStakes2) -&gt; &#123;</span><br><span class="line">                   highwayStakes2.addAll(highwayStakes);</span><br><span class="line">                   <span class="keyword">return</span> highwayStakes2;</span><br><span class="line">               &#125;)</span><br><span class="line">               .orElse(<span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">               .stream()</span><br><span class="line">               .collect(Collectors.groupingBy(HighwayStake::getDlmc));</span><br></pre></td></tr></table></figure><h2 id="List-的深度拷贝"><a href="#List-的深度拷贝" class="headerlink" title="List 的深度拷贝"></a>List 的深度拷贝</h2><p>上述的问题实际上是一个 list 的拷贝,而且是 浅度复制</p><p><code>new ArrayList&lt;&gt;(list)</code> 和 <code>Collections.copy(dest,src)</code> 都是浅度复制</p><p>下面代码是一个靠谱的 深度拷贝, 需要 T 实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list 深度复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">deepCopy</span><span class="params">(List&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">    ByteArrayOutputStream byteOut = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    List&lt;T&gt; dest = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(byteOut);</span><br><span class="line">        out.writeObject(source);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream byteIn = <span class="keyword">new</span> ByteArrayInputStream(byteOut.toByteArray());</span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(byteIn);</span><br><span class="line">        dest = (List&lt;T&gt;) in.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reduce-使用记录"><a href="#reduce-使用记录" class="headerlink" title="reduce() 使用记录"></a>reduce() 使用记录</h2><p>reduce 有三种方法可以使用:</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code></li></ul><p>第一种传入二元运算表达式,第二种是带初始值的二元运算表达式,这里着重记录下第三种的使用方式</p><p>第三种第一个参数方法的返回值类型,<br>第二个参数是一个二元运算表达式,这个表达式的第一个参数是方法的返回值,也就是方法的第一个参数,第二个参数是 Stream 里的值<br>第三个参数也是一个二元运算表达式,表达式的2个参数都是方法返回值的类型,用于对返回值类型的操作</p><p>第三个参数在非并发的情况下返回任何类型(甚至是 null)都没有影响,因为在非并发情况下,第三个二元表达式根本不会执行</p><p>那么第三个二元表达式用在并发的情况下,在并发的情况下,第二个二元表达式的第一个参数始终是方法的第一个类型,第三个三元表达式用于将不同线程操作的结果汇总起来</p><h2 id="map-和-flatMap"><a href="#map-和-flatMap" class="headerlink" title="map() 和 flatMap()"></a>map() 和 flatMap()</h2><p>区别在于, map() 返回自定义对象, 而 flatMap() 返回 Stream 流对象</p><h2 id="distinct-使用记录"><a href="#distinct-使用记录" class="headerlink" title="distinct() 使用记录"></a>distinct() 使用记录</h2><p>最近在 lamda 的 stream 进行 list 去重复的时候，发现没有生效<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;FollowAnalysisPojo&gt;&gt;&gt; maps = allList</span><br><span class="line">            .parallelStream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect(Collectors.groupingBy(FollowAnalysisPojo::getMainPlateNum,Collectors.groupingBy(FollowAnalysisPojo::getPlateNum)));</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被跟车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String mainPlateNum;</span><br><span class="line">    <span class="comment">/*跟踪车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String plateNum;</span><br><span class="line">    <span class="keyword">private</span> String vehicleType;</span><br><span class="line">    <span class="keyword">private</span> String siteName;</span><br><span class="line">    <span class="keyword">private</span> String directionName;</span><br><span class="line">    <span class="comment">/*车主时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeMain;</span><br><span class="line">    <span class="comment">/*伴随时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeSub;</span><br><span class="line">    <span class="comment">/*跟踪次数*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer trackCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录被跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer mainRowSpan = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowSpan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key = UUID.randomUUID().toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码是想做 先对查询出来的数据进行去重复的操作，然后在按照被跟车牌和跟踪车牌进行分组操作<br>有点需要说明的是 <code>parallelStream()</code> 比我们常用的 <code>stream()</code> 是并行多管操作，速度上更快</p><p>然后发现的问题是并没有去重复，当时也在奇怪 distinct() 里并没有任何参数来指定如何使用规则来去重复</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>重写List中实体类的 <code>equals()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当车主时间,伴随时间都相同时，则认为是一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> FollowAnalysisPojo))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        FollowAnalysisPojo followAnalysisPojo = (FollowAnalysisPojo)obj;</span><br><span class="line">        <span class="keyword">return</span> passTimeMain.equals(followAnalysisPojo.passTimeMain) &amp;&amp; passTimeSub.equals(followAnalysisPojo.passTimeSub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就按照我自定义的规则进行去重复了<br>运行了一下，发现还是不起作用<br>debug了一下，发现根本没有执行重写的 equals 方法<br>原来还需要重写 <code>hashCode()</code> 方法<br>在 <code>equals()</code> 方法 执行前会先执行 <code>hashCode()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新 equals 方法必须重新 hashCode方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = passTimeMain.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + passTimeMain.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以了。</p><h3 id="2018-9-13-更新"><a href="#2018-9-13-更新" class="headerlink" title="2018-9-13 更新"></a>2018-9-13 更新</h3><p>如果我们不重写方法，有没有办法按照List中bean的某个属性来去重复呢？答案是有的，利用的是 stream 的 reduce，用一个set 来存放 key,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;JSONObject&gt; result = trails.stream()</span><br><span class="line">            .filter(distinctByKey(VehicleTrail::getPlateNbr))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; seen = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.add(keyExtractor.apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java 8 lamda 表达式的 stream 有很多实用的方法，这里记录下日常的使用记录
    
    </summary>
    
      <category term="Java篇" scheme="http://blog.joylau.cn/categories/Java%E7%AF%87/"/>
    
    
      <category term="java" scheme="http://blog.joylau.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker exec failed docker 无法进入容器问题解决</title>
    <link href="http://blog.joylau.cn/2018/12/19/Docker-Exec-Failed/"/>
    <id>http://blog.joylau.cn/2018/12/19/Docker-Exec-Failed/</id>
    <published>2018-12-19T12:11:00.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="无法进入容器"><a href="#无法进入容器" class="headerlink" title="无法进入容器"></a>无法进入容器</h3><p>docker exec -it name /bin/sh 失败,<br>查看容器 inspect 报错信息如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pc error: code = 2 desc = oci runtime error: <span class="built_in">exec</span> failed: </span><br><span class="line">container_linux.go:247: starting container process caused <span class="string">"process_linux.go:110: </span></span><br><span class="line"><span class="string">decoding init error from pipe caused \"read parent: connection reset by peer\""</span></span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>docker 版本为: Docker version 1.13.1, build 07f3374/1.13.1</li><li>centos 版本为: CentOS Linux release 7.3.1611 (Core) </li><li>错误原因: 似乎是 docker RPM 软件包的更新时引入的错误。一个临时的解决方法是将所有docker软件包降级到以前的版本（1.13.1-75似乎可以）</li></ol><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum downgrade docker docker-client docker-common</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      docker 进入容器失败,报错如下
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Compose 中多容器启动顺序问题</title>
    <link href="http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/"/>
    <id>http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/</id>
    <published>2018-12-19T02:40:54.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们在 docker-compose 一条命令就启动我们的多个容器时,需要考虑到容器之间的启动顺序问题…..</p><p>比如有的服务依赖数据库的启动, service 依赖 eureka 的启动完成</p><p>docker compose 里有 depends_on 配置,但是他不能等上一个容器完全启动完成,才启动下一个完成,这就会导致很多问题的发送</p><h3 id="官方的做法"><a href="#官方的做法" class="headerlink" title="官方的做法"></a>官方的做法</h3><p>地址 : <a href="https://docs.docker.com/compose/startup-order/" target="_blank" rel="noopener">https://docs.docker.com/compose/startup-order/</a><br>官方的思路是使用一个脚本,轮询给定的主机和端口，直到它接受 TCP 连接<br>个人感觉这种方式不是很好</p><h3 id="health-健康检查方法"><a href="#health-健康检查方法" class="headerlink" title="health 健康检查方法"></a>health 健康检查方法</h3><p>比如下面的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-server:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9368</span><span class="string">:9368</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/server:/home/liufa/app/server/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">  healthcheck:</span></span><br><span class="line"><span class="attr">    test:</span> <span class="string">"/bin/netstat -anp | grep 9367"</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3</span><span class="string">s</span></span><br><span class="line"><span class="attr">    retries:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-admin:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9335</span><span class="string">:9335</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/admin:/home/liufa/app/admin/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  depends_on:</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      condition:</span> <span class="string">service_healthy</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - server:</span><span class="string">traffic-service-eureka</span></span><br></pre></td></tr></table></figure><p>server 使用了健康检查 healthcheck</p><ul><li><code>test</code> : 命令,必须是字符串或列表，如果它是一个列表，第一项必须是 NONE，CMD 或 CMD-SHELL ；如果它是一个字符串，则相当于指定CMD-SHELL 后跟该字符串</li><li><code>interval</code>: 每次执行的时间间隔</li><li><code>timeout</code>: 每次执行时的超时时间,超过这个时间,则认为不健康</li><li><code>retries</code>: 重试次数,如果 retries 次后都是失败,则认为容器不健康</li></ul><p>健康状态返回 0 (health) 1 (unhealth) 2(reserved)</p><p>test 命令的通用是 <code>&#39;xxxx &amp;&amp; exit 0 || exit 1&#39;</code> , 2 一般不使用</p><p>admin depends_on server ,且条件是 service_healthy ,即容器为健康状态,即 9368 端口开启</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>上述的写法只在 docker-compose.yml  version: ‘2.1’ 版本中生效,其他版本会报错</p>]]></content>
    
    <summary type="html">
    
      我们在 docker-compose 一条命令就启动我们的多个容器时,需要考虑到容器之间的启动顺序问题.....
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Docker-Compose" scheme="http://blog.joylau.cn/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud --- Docker 部署问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/18/SpringCloud-Docker/"/>
    <id>http://blog.joylau.cn/2018/12/18/SpringCloud-Docker/</id>
    <published>2018-12-18T00:45:35.000Z</published>
    <updated>2018-12-19T12:18:49.455Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Docker-容器中-IP-的配置"><a href="#Docker-容器中-IP-的配置" class="headerlink" title="Docker 容器中 IP 的配置"></a>Docker 容器中 IP 的配置</h3><p>将 spring cloud 项目部署到 docker 容器中后,虽然可以配置容器的端口映射到宿主机的端口<br>但是在 eureka 界面显示的instance id 是一串随机的字符串,类似于 d97d725bf6ae 这样的<br>但是,事实上,我们想让他显示出 IP ,这样我们可以直接点击而打开 info 端点信息</p><p>修改 3 处配置项:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://34.0.7.183:9368/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span></span><br></pre></td></tr></table></figure><ol><li><code>eureka.instance.prefer-ip-address</code> 配置为 true , 表示 instance 使用 ip 配置</li><li><code>eureka.instance.prefer-ip-address</code> 配置当前 instance 的物理 IP</li><li><code>eureka.instance.prefer-instance-id</code> 界面上的 instance-id 显示为 ip + 端口</li></ol><h3 id="docker-compose-的解决方法"><a href="#docker-compose-的解决方法" class="headerlink" title="docker-compose 的解决方法"></a>docker-compose 的解决方法</h3><p>通常情况下,我们使用 springcloud 都会有很多的服务需要部署,就会产生很多的容器,这么多的容器再使用 docker 一个个操作就显得很复杂<br>这时候需要一个编排工具,于是我们就使用 docker-compose 来部署 springcloud 服务</p><ol><li>修改 eureka 的配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>使用 docker-compose 我们放弃使用 ip 来进行容器间的相互通信,继而使用 hostname,这就相当于在 <code>/etc/hosts</code> 添加了一条记录</p><ol start="2"><li>接下来所有的 eureka 的 client 都使用 traffic-service-eureka 这个 hostname 来连接</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://traffic-service-eureka:9368/eureka/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果说想在 eureka 的界面上能够直接显示宿主机的 IP 和 连接地址的话,还需要设置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span></span><br></pre></td></tr></table></figure><ol start="4"><li>docker-compose 的配置:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-server:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9368</span><span class="string">:9368</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/server:/home/liufa/app/server/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-eureka</span></span><br><span class="line"><span class="attr">  healthcheck:</span></span><br><span class="line"><span class="attr">    test:</span> <span class="string">"/bin/netstat -anp | grep 9368"</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3</span><span class="string">s</span></span><br><span class="line"><span class="attr">    retries:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span><span class="string">:5000/joylau/traffic-service-admin:1.2.0</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9335</span><span class="string">:9335</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/Users/joylau/log/admin:/home/liufa/app/admin/logs</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    activeProfile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  depends_on:</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      condition:</span> <span class="string">service_healthy</span></span><br><span class="line"><span class="attr">  hostname:</span> <span class="string">traffic-service-admin</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - server:</span><span class="string">traffic-service-eureka</span></span><br></pre></td></tr></table></figure><p>service 模块 links server 模块,再起个别名 traffic-service-eureka ,因为我配置文件里配置的是 traffic-service-eureka,<br>这样 service 模块就可以通过 server 或者 traffic-service-eureka 来访问 server 了</p><p>另外,配置的 hostname,可以进入 容器中查看 <code>/etc/hosts</code> 该配置会在 文件中生成一个容器的 ip 和 hostname 的记录</p><h3 id="多个服务加载顺序问题"><a href="#多个服务加载顺序问题" class="headerlink" title="多个服务加载顺序问题"></a>多个服务加载顺序问题</h3><p>详见 : <a href="http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/">http://blog.joylau.cn/2018/12/19/Docker-Compose-StartOrder/</a></p>]]></content>
    
    <summary type="html">
    
      该篇文章记录使用 Docker 部署 SpringCloud 遇到的问题
    
    </summary>
    
      <category term="SpringCloud篇" scheme="http://blog.joylau.cn/categories/SpringCloud%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="SpringCloud" scheme="http://blog.joylau.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 上路由表的操作记录</title>
    <link href="http://blog.joylau.cn/2018/12/14/MacOS-Route/"/>
    <id>http://blog.joylau.cn/2018/12/14/MacOS-Route/</id>
    <published>2018-12-14T08:04:39.000Z</published>
    <updated>2018-12-18T05:56:47.423Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p>查看路由表: <code>netstat -nr</code></p></li><li><p>添加路由: <code>sudo route add 34.0.7.0 34.0.7.1</code></p></li><li><p>删除路由: <code>sudo route delete 0.0.0.0</code></p></li><li><p>清空路由表: <code>networksetup -setadditionalroutes &quot;Ethernet&quot;</code>,  “Ethernet” 指定路由走哪个设备（查看当前的设备可以使用这个命令 <code>networksetup -listallnetworkservices</code></p></li><li><p>清空路由表: <code>sudo route flush</code> , 是否有效没测试过,通过 <code>man route</code> 看到的,等哪天试过了,再来更新这个内容是否有效</p></li></ol><h3 id="无线网卡和-USB-有线网卡同时使用"><a href="#无线网卡和-USB-有线网卡同时使用" class="headerlink" title="无线网卡和 USB 有线网卡同时使用"></a>无线网卡和 USB 有线网卡同时使用</h3><p>我这里的使用场景是无线接外网, USB 网卡接内网,无线路由的网关是 192.168.0.1, USB 网卡的网关是 34.0.7.1</p><ol><li><p>删除默认路由: <code>sudo route delete 0.0.0.0</code></p></li><li><p>添加默认路由走无线网卡: <code>sudo route add 0.0.0.0 192.168.0.1</code></p></li><li><p>内网走 USB 网卡: <code>sudo route add 34.0.7.0 34.0.7.1</code></p></li><li><p>调整网络顺序,网络属性里面的多个网卡的优先级顺序问题。基本原则是哪个网卡访问互联网，他的优先级就在上面就可以了</p></li></ol><blockquote><p>有个问题没搞明白, 按逻辑说这样添加的静态路由是临时的,在重启后会消失失效,可实际上我重启了之后并没有失效</p></blockquote><h3 id="配置永久静态路由"><a href="#配置永久静态路由" class="headerlink" title="配置永久静态路由"></a>配置永久静态路由</h3><ol><li><p><code>networksetup</code> mac 自带的工具,升级到最新的Sierra后拥有,是个“系统偏好设置”中网络设置工具的终端版</p></li><li><p><code>networksetup –help</code> 可以查看具体的帮助</p></li><li><p>添加静态永久路由: <code>networksetup -setadditionalroutes &quot;USB 10/100/1000 LAN&quot; 10.188.12.0 255.255.255.0 192.168.8.254</code><br> “USB 10/100/1000 LAN” 指定路由走哪个设备（查看当前的设备可以使用这个命令 <code>networksetup -listallnetworkservices</code> </p></li><li><p><code>netstat -nr</code> 查看路由表</p></li></ol>]]></content>
    
    <summary type="html">
    
      记录下 MacOS 上关于路由的记录
    
    </summary>
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux 定时删除 10 天前的日志文件</title>
    <link href="http://blog.joylau.cn/2018/12/13/Linux-Cron/"/>
    <id>http://blog.joylau.cn/2018/12/13/Linux-Cron/</id>
    <published>2018-12-13T07:23:09.000Z</published>
    <updated>2019-01-24T16:01:05.905Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置一个定时清理的任务"><a href="#配置一个定时清理的任务" class="headerlink" title="配置一个定时清理的任务"></a>配置一个定时清理的任务</h3><ol><li><code>crontab -e</code> , 添加一个定时任务, 或者 <code>vim /etc/crontab</code> 添加一条记录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 0 * * * /home/liufa/app/cron/del_log.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 0 * * * root sh /home/liufa/app/cron/del_log.sh &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>每天 0 点 10 分运行上述命令文件</p><ol start="2"><li><p>创建文件: del_log.sh</p></li><li><p>授权 <code>chmod +x ./del_log.sh</code></p></li><li><p>删除 10 天的日志文件 </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">find /home/liufa/app/node/logs -mtime +10 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><ol start="4"><li>重启定时任务, <code>systemctl restart crond</code> , 在 Ubuntu 上叫 cron <code>systemctl restart cron</code></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>执行脚本使用/bin/sh（防止脚本无执行权限），要执行的文件路径是从根开始的绝对路径（防止找不到文件）</li><li>尽量把要执行的命令放在脚本里，然后把脚本放在定时任务里。对于调用脚本的定时任务，可以把标准输出错误输出重定向到空。</li><li>定时任务中带%无法执行，需要加\转义</li><li>如果时上有值，分钟上必须有值</li><li>日和周不要同时使用，会冲突</li><li><code>&gt;&gt;</code> 与 <code>&gt;/dev/null 2&gt;&amp;1</code> 不要同时存在</li></ol>]]></content>
    
    <summary type="html">
    
      我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="Crond" scheme="http://blog.joylau.cn/tags/Crond/"/>
    
  </entry>
  
  <entry>
    <title>Docker Build Image 问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/13/Docker-Build/"/>
    <id>http://blog.joylau.cn/2018/12/13/Docker-Build/</id>
    <published>2018-12-13T06:49:18.000Z</published>
    <updated>2018-12-13T09:11:00.057Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><p>时区的配置在 <code>/etc/localtime</code></p><p>localtime 文件会指向 <code>/usr/share/zoneinfo/Asia/</code> 目录下的某个文件</p><p>我们只需要将其指向 ShangHai 即可</p><p>Dockerfile 可以这样配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN rm -rf /etc/localtime &amp;&amp; \</span><br><span class="line">    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>先删除,在创建一个软连接即可</p><h3 id="pm2-web-命令错误问题"><a href="#pm2-web-命令错误问题" class="headerlink" title="pm2-web 命令错误问题"></a>pm2-web 命令错误问题</h3><p>通常我们都是将 node_modules 文件夹直接复制到镜像中</p><p>有时候会出现问题,就比如 pm2-web ,构建成镜像后,命令无法使用</p><p>原因在于开发的机器的操作系统和镜像的操作系统不一致,会导致一些包出问题</p><p>解决的方式就是重新 <code>nmp install</code></p><p>Dockerfile 如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN rm -rf ./node_modules &amp;&amp; \</span><br><span class="line">    rm -rf ./package-lock.json &amp;&amp; \</span><br><span class="line">    npm install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这里记录下日常 docker build 遇到的问题,现在记录整理如下
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Yum 私服搭建记录</title>
    <link href="http://blog.joylau.cn/2018/12/08/Linux-Private-Yum/"/>
    <id>http://blog.joylau.cn/2018/12/08/Linux-Private-Yum/</id>
    <published>2018-12-08T05:48:34.000Z</published>
    <updated>2019-01-23T03:30:44.821Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有时我们的服务器网络并不允许连接互联网,这时候 yum 安装软件就有很多麻烦事情了, 我们也许会通过 yumdownloader 来从可以连接互联网的机器上下载好 rpm 安装包,<br>然后再拷贝到 服务器上.<br>命令 : <code>yumdownloader  --resolve mariadb-server</code> , 所有依赖下载到当前文件夹下</p><p>这样做会存在很多问题:</p><ol><li>虽然上述命令已经加上了 <code>--resolve</code> 来解决依赖,但是一些基础的依赖包仍然没有下载到,这时安装就有问题了</li><li>下载的很多依赖包都有安装的先后顺序,包太多的话,根本无法搞清楚顺序</li></ol><h2 id="rsync-同步科大的源"><a href="#rsync-同步科大的源" class="headerlink" title="rsync 同步科大的源"></a>rsync 同步科大的源</h2><ol><li><code>yum install rsync</code></li><li><code>df -h</code> 查看磁盘上目录的存储的空间情况</li><li>找到最大的磁盘的空间目录,最好准备好 50 GB 以上的空间</li><li>新建目录如下:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./yum_data/centos/7/os/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/extras/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/updates/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/epel/x86_64</span><br></pre></td></tr></table></figure><ol start="5"><li>开始同步 base extras updates epel 源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yum_data</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/os/x86_64/ ./centos/7/os/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/extras/x86_64/ ./centos/7/extras/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/updates/x86_64/ ./7/updates/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/epel/7/x86_64/ ./epel/7/x86_64/</span><br></pre></td></tr></table></figure><ol start="6"><li>开始漫长的等待……</li><li>等待全部同步完毕, <code>tar -czf yum_data.tar.gz ./yum_data</code> ,压缩目录</li><li>压缩包拷贝到服务器上</li></ol><h2 id="配置本地-yum-源"><a href="#配置本地-yum-源" class="headerlink" title="配置本地 yum 源"></a>配置本地 yum 源</h2><ol><li>找到一个空间大的目录下,解压包: <code>tar -xvf yum_data.tar.gz</code></li><li>创建一个新的源配置: <code>touch /etc/yum.repos.d/private.repo</code></li><li>插入一下内容:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">local</span>-base]</span><br><span class="line">name=Base Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/os/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line">[<span class="built_in">local</span>-extras]</span><br><span class="line">name=Extras Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/extras/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=2</span><br><span class="line">[<span class="built_in">local</span>-updates]</span><br><span class="line">name=Updates Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/updates/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=3</span><br><span class="line">[<span class="built_in">local</span>-epel]</span><br><span class="line">name=Epel Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/epel/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=4</span><br></pre></td></tr></table></figure><ol start="4"><li>禁用原来的 Base Extras Updates 源: <code>yum-config-manager --disable Base,Extras,Updates</code></li><li><code>yum clean all</code></li><li><code>yum makecache</code></li><li><code>yum repolist</code> 查看源信息</li></ol><h2 id="配置网络-yum-源"><a href="#配置网络-yum-源" class="headerlink" title="配置网络 yum 源"></a>配置网络 yum 源</h2><p>有时候我们搭建的私有 yum 还需要提供给其他的机器使用,这时候再做一个网络的 yum 即可,用 Apache 或者 Nginx 搭建个服务即可</p><ol><li><code>yum install nginx</code></li><li><code>vim /etc/nginx/nginx.conf</code> 修改</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /home/liufa/yum_data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>这时 private.repo 里的 baseurl 全改为网络地址即可</li></ol><h2 id="403-权限问题"><a href="#403-权限问题" class="headerlink" title="403 权限问题"></a>403 权限问题</h2><p>修改 nginx.conf 配置文件的 user 为 root</p>]]></content>
    
    <summary type="html">
    
      有时我们的服务器网络并不允许连接互联网,这时候 yum 安装软件就有很多麻烦事情了
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="YUM" scheme="http://blog.joylau.cn/tags/YUM/"/>
    
  </entry>
  
  <entry>
    <title>$.post() 和 $.ajax() 的问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/04/Jquery-Post/"/>
    <id>http://blog.joylau.cn/2018/12/04/Jquery-Post/</id>
    <published>2018-12-04T03:02:40.000Z</published>
    <updated>2018-12-08T06:32:50.248Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>想着写个 demo, 用个简单的 jq 的 post 请求传递数组,却发现遇到了不少问题…<br>一顿研究,总结如下:</p><h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3><p>语法:<br>$.post(url,data,success(data, textStatus, jqXHR),dataType)</p><p>url    必需。规定把请求发送到哪个 URL。<br>data    可选。映射或字符串值。规定连同请求发送到服务器的数据。<br>success(data, textStatus, jqXHR)    可选。请求成功时执行的回调函数。<br>dataType    可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script 或 html</p><p>总结需要注意的是: </p><ul><li>请求的 Content-Type 是 <code>application/x-www-form-urlencoded; charset=UTF-8</code> 就是表单提交的,dataType值得是规定服务器的响应方式</li><li>第二个参数 data 的类型是键值对的对象,不能为 JSON.stringify 后的 json 字符串,序列化后也是 key 的数据</li><li>传数组会有问题,会将数组中每个对象的拆开然后堆到一起作为键值对传输数据, 可以通过 <code>jQuery.ajaxSettings.traditional = true;</code> 在 post 请求之前设置,防止这样的情况发生,但是对象不会被序列化,会变成 Object 这样的格式,这也不是我们想要的结果</li></ul><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>很传统的使用方式了:<br>发送 post 请求<br>我们的 points 的是数组,里面是多个对象<br>数据传输使用 Request Payload 方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    url: location.origin + <span class="string">"/trafficService/pixelToLngLat"</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(points),</span><br><span class="line">    contentType: <span class="string">"application/json; charset=UTF-8"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res, status</span>) </span>&#123;</span><br><span class="line">        res.map(<span class="function"><span class="params">point</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(point)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台使用方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/pixelToLngLat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">pixelToLngLat</span><span class="params">(@RequestBody JSONArray points)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(baiduApi.getNodeService() + <span class="string">"/traffic/pixelToLngLat"</span>,points,JSONArray.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很传统的使用方式</p><h3 id="强行使用-post"><a href="#强行使用-post" class="headerlink" title="强行使用 $.post()"></a>强行使用 $.post()</h3><p>这个时候我们参数还是传输的键值对方式,只不过将值转化为 json 字符串进行传输</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajaxSettings.traditional = <span class="literal">true</span>;</span><br><span class="line">$.post(location.origin + <span class="string">"/trafficService/pixelToLngLat"</span>, &#123;<span class="attr">points</span>:<span class="built_in">JSON</span>.stringify(points)&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">res, status</span>) </span>&#123;</span><br><span class="line">    res.map(<span class="function"><span class="params">point</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(point)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><p>后台使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/pixelToLngLat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">pixelToLngLat</span><span class="params">(@RequestParam(<span class="string">"points"</span>)</span> String points)</span>&#123;</span><br><span class="line">    JSONArray array = JSONArray.parseArray(points);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(baiduApi.getNodeService() + <span class="string">"/traffic/pixelToLngLat"</span>,array,JSONArray.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>表单提交方式,如果后台有相应的对象的来接受参数的话,直接在方法是使用对象即可,不需要再通过 JSONObject 将字符串转数组了,这种方式 $.ajax() 同样也适用</p></blockquote>]]></content>
    
    <summary type="html">
    
      想着写个 demo, 用个简单的 jq 的 post 请求传递数组,却发现遇到了不少问题...
    
    </summary>
    
      <category term="前端篇" scheme="http://blog.joylau.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
      <category term="Jquery" scheme="http://blog.joylau.cn/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 理解 ThreadPoolTaskExecutor</title>
    <link href="http://blog.joylau.cn/2018/11/24/SpringBoot-ThreadPoolTaskExecutor/"/>
    <id>http://blog.joylau.cn/2018/11/24/SpringBoot-ThreadPoolTaskExecutor/</id>
    <published>2018-11-24T06:35:07.000Z</published>
    <updated>2018-11-24T07:12:51.572Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="spring-的线程池-ThreadPoolTaskExecutor"><a href="#spring-的线程池-ThreadPoolTaskExecutor" class="headerlink" title="spring 的线程池 ThreadPoolTaskExecutor"></a>spring 的线程池 ThreadPoolTaskExecutor</h3><p>spring 为我们实现了一个基于 ThreadPoolExecutor 线程池</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>yml </li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">traffic:</span></span><br><span class="line"><span class="attr">  executor:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"trafficServiceExecutor"</span></span><br><span class="line"><span class="attr">    core-pool-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    max-pool-size:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    queue-capacity:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    thread-name-prefix:</span> <span class="string">"traffic-service-"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Configuration</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"traffic.executor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer maxPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer queueCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String threadNamePrefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(Executor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">trafficServiceExecutor</span><span class="params">(@Autowired Executor executor)</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        threadPoolTaskExecutor.setCorePoolSize(executor.getCorePoolSize());</span><br><span class="line">        threadPoolTaskExecutor.setMaxPoolSize(executor.getMaxPoolSize());</span><br><span class="line">        threadPoolTaskExecutor.setQueueCapacity(executor.getQueueCapacity());</span><br><span class="line">        threadPoolTaskExecutor.setThreadNamePrefix(executor.getThreadNamePrefix());</span><br><span class="line">        threadPoolTaskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        threadPoolTaskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> threadPoolTaskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅此步骤,我们在使用的时候,只需要注解 @Async(“trafficServiceExecutor”) 配置好 name 即可</p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>理解图<br><img src="http://image.joylau.cn/blog/springboot-ThreadPoolTaskExecutor.jpg" alt=""></p><h3 id="看点数据"><a href="#看点数据" class="headerlink" title="看点数据"></a>看点数据</h3><p>在线程池整个运作过程中,想看下运行状态的话可以这么做:<br>常用状态：</p><ul><li><code>taskCount</code>：线程需要执行的任务个数。</li><li><code>completedTaskCount</code>：线程池在运行过程中已完成的任务数。</li><li><code>largestPoolSize</code>：线程池曾经创建过的最大线程数量。</li><li><code>getPoolSize</code>: 获取当前线程池的线程数量。</li><li><code>getActiveCount</code>：获取活动的线程的数量</li></ul><p>通过继承线程池，重写beforeExecute，afterExecute和terminated方法来在线程执行任务前，线程执行任务结束，和线程终结前获取线程的运行情况，根据具体情况调整线程池的线程数量</p><h3 id="重写一波"><a href="#重写一波" class="headerlink" title="重写一波"></a>重写一波</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExecutor</span> <span class="keyword">extends</span> <span class="title">ExecutorConfigurationSupport</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AsyncListenableTaskExecutor</span>, <span class="title">SchedulingTaskExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object poolSizeMonitor = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> TaskDecorator taskDecorator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Runnable decorator to user-level FutureTask, if different</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, Object&gt; decoratedTaskMap =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">16</span>, ConcurrentReferenceHashMap.ReferenceType.WEAK);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCorePoolSize</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setCorePoolSize(corePoolSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCorePoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxPoolSize</span><span class="params">(<span class="keyword">int</span> maxPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.maxPoolSize = maxPoolSize;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setMaximumPoolSize(maxPoolSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.maxPoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeepAliveSeconds</span><span class="params">(<span class="keyword">int</span> keepAliveSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.keepAliveSeconds = keepAliveSeconds;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKeepAliveSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.keepAliveSeconds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueueCapacity</span><span class="params">(<span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queueCapacity = queueCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowCoreThreadTimeOut</span><span class="params">(<span class="keyword">boolean</span> allowCoreThreadTimeOut)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allowCoreThreadTimeOut = allowCoreThreadTimeOut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskDecorator</span><span class="params">(TaskDecorator taskDecorator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskDecorator = taskDecorator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ExecutorService <span class="title">initializeExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; queue = createQueue(<span class="keyword">this</span>.queueCapacity);</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.taskDecorator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                    <span class="keyword">this</span>.corePoolSize, <span class="keyword">this</span>.maxPoolSize, <span class="keyword">this</span>.keepAliveSeconds, TimeUnit.SECONDS,</span><br><span class="line">                    queue, threadFactory, rejectedExecutionHandler) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">                    Runnable decorated = taskDecorator.decorate(command);</span><br><span class="line">                    <span class="keyword">if</span> (decorated != command) &#123;</span><br><span class="line">                        decoratedTaskMap.put(decorated, command);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">super</span>.execute(decorated);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                    <span class="keyword">this</span>.corePoolSize, <span class="keyword">this</span>.maxPoolSize, <span class="keyword">this</span>.keepAliveSeconds, TimeUnit.SECONDS,</span><br><span class="line">                    queue, threadFactory, rejectedExecutionHandler)&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                    log.error("线程开始......");</span></span><br><span class="line"><span class="comment">//                    log.error("当前线程池的线程数量:&#123;&#125;",MyExecutor.this.getPoolSize());</span></span><br><span class="line"><span class="comment">//                    log.error("活动的线程的数量:&#123;&#125;",MyExecutor.this.getActiveCount());</span></span><br><span class="line"><span class="comment">//                    log.error("线程需要执行的任务个数:&#123;&#125;",getTaskCount());</span></span><br><span class="line"><span class="comment">//                    log.error("线程池在运行过程中已完成的任务数:&#123;&#125;",getCompletedTaskCount());</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class="line">                    log.error(<span class="string">"线程池在运行过程中已完成的任务数:&#123;&#125;"</span>,getCompletedTaskCount());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.allowCoreThreadTimeOut) &#123;</span><br><span class="line">            executor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.threadPoolExecutor = executor;</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> BlockingQueue&lt;Runnable&gt; <span class="title">createQueue</span><span class="params">(<span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(queueCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">getThreadPoolExecutor</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        Assert.state(<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>, <span class="string">"ThreadPoolTaskExecutor not initialized"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Not initialized yet: assume core pool size.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor.getPoolSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Not initialized yet: assume no active threads.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor.getActiveCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        Executor executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</span><br><span class="line">        execute(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListenableFuture&lt;?&gt; submitListenable(Runnable task) &#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListenableFutureTask&lt;Object&gt; future = <span class="keyword">new</span> ListenableFutureTask&lt;&gt;(task, <span class="keyword">null</span>);</span><br><span class="line">            executor.execute(future);</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ListenableFuture&lt;T&gt; <span class="title">submitListenable</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListenableFutureTask&lt;T&gt; future = <span class="keyword">new</span> ListenableFutureTask&lt;&gt;(task);</span><br><span class="line">            executor.execute(future);</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cancelRemainingTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.cancelRemainingTask(task);</span><br><span class="line">        <span class="comment">// Cancel associated user-level Future handle as well</span></span><br><span class="line">        Object original = <span class="keyword">this</span>.decoratedTaskMap.get(task);</span><br><span class="line">        <span class="keyword">if</span> (original <span class="keyword">instanceof</span> Future) &#123;</span><br><span class="line">            ((Future&lt;?&gt;) original).cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看 <code>initializeExecutor</code> 方法,我重写了 <code>ThreadPoolExecutor</code> 的 <code>beforeExecute</code> 和 <code>afterExecute</code> 打印了一些信息,可以帮助理解整个过程</p><h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><ul><li>如果是CPU密集型任务，那么线程池的线程个数应该尽量少一些，一般为CPU的个数+1条线程。 linux 查看 CPU 信息 : <code>cat /proc/cpuinfo</code></li><li>如果是IO密集型任务，那么线程池的线程可以放的很大，如2*CPU的个数。</li><li>对于混合型任务，如果可以拆分的话，通过拆分成CPU密集型和IO密集型两种来提高执行效率；如果不能拆分的的话就可以根据实际情况来调整线程池中线程的个数。</li></ul>]]></content>
    
    <summary type="html">
    
      在我们日常开发中难免要使用多线程去执行任务,使用多线程的话我们通常会使用线程池
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker OpenVPN 服务搭建记录</title>
    <link href="http://blog.joylau.cn/2018/11/21/Docker-OpenVPN/"/>
    <id>http://blog.joylau.cn/2018/11/21/Docker-OpenVPN/</id>
    <published>2018-11-20T16:29:23.000Z</published>
    <updated>2018-11-21T02:25:44.960Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>出差在外或者在家工作都需要连接公司网络,没有 VPN 怎么能行</p><h2 id="OpenVPN-服务端部署"><a href="#OpenVPN-服务端部署" class="headerlink" title="OpenVPN 服务端部署"></a>OpenVPN 服务端部署</h2><ol><li>全局变量配置: OVPN_DATA=”/home/joylau/ovpn-data”</li><li><code>mkdir ${OVPN_DATA}</code> , <code>cd ${OVPN_DATA}</code></li><li>这里我使用的是 tcp, udp 的好像没映射, 我用起来有问题,后来换的 tcp 方式, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://公网 IP</code></li><li>初始化,这里的密码我们都设置为 123456, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</code></li><li>创建用户 liufa , 不使用密码的话在最后面加上 nopass, 使用密码就键入密码,这里我们使用 123456, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full liufa</code></li><li>为用户 liufa 生成秘钥, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient liufa &gt; ${OVPN_DATA}/liufa.ovpn</code></li><li>创建的文件中端口默认使用的是 1194, 而我用的是 6001,那我们还得修改下 liufa.ovpn 文件的端口</li><li>运行容器,这里我的宿主机端口为 6001, <code>docker run --name openvpn -v ${OVPN_DATA}:/etc/openvpn -d -p 6001:1194 --privileged kylemanna/openvpn</code></li></ol><h2 id="OpenVPN-客户端使用说明"><a href="#OpenVPN-客户端使用说明" class="headerlink" title="OpenVPN 客户端使用说明"></a>OpenVPN 客户端使用说明</h2><p><img src="https://img.shields.io/badge/author-joylau-green.svg" alt="">    <img src="https://img.shields.io/badge/date-2018--11--20-yellow.svg" alt="">    <img src="https://img.shields.io/badge/version-1.0-blue.svg" alt=""></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li>安装 openVPN windows 客户端，地址：<a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.6-I602.exe" target="_blank" rel="noopener">https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.6-I602.exe</a> , 该地址需要梯子</li><li>启动客户端，右键，选择 import file, 导入 ovpn 文件，文件请 联系管理员发给你</li><li>右键 connect,如果弹出框提示输入密码，输入默认密码 123456 ，等待连接成功即可</li></ol><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol><li>安装 openvpn：<code>sudo yum install openvpn</code> 或者 <code>sudo apt install openvpn</code></li><li>找到 ovpn 文件所在目录： <code>sudo openvpn --config ./liufa.ovpn</code>, 看到成功信息时即连接成功</li><li>可以用 nohup 以守护进程运行</li></ol><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><ol><li>安装 Tunnelblick，地址：<a href="https://tunnelblick.net/" target="_blank" rel="noopener">https://tunnelblick.net/</a></li><li>导入 ovpn文件</li><li>状态栏上点击连接VPN</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>连接上 VPN 后,默认所有流量都⾛的 VPN,但事实上我们并不想这么做. </li><li>⽐如公司内⽹的⽹段为 192.168.10.0 ⽹段,我们先删除 2 个 0.0.0.0 的路由: <code>route delete 0.0.0.0</code></li><li>然后添加 0.0.0.0 到本机的⽹段 <code>route add 0.0.0.0 mask 255.255.255.0 本机内⽹网关</code> </li><li>再指定 10 ⽹段⾛ VPN 通道 <code>route add 192.168.10.0 mask 255.255.255.0 VPN 网关</code></li><li>以上路由添加默认是临时的,重启失效,⽤久保存可加 -p 参数</li></ul>]]></content>
    
    <summary type="html">
    
      出差在外或者在家工作都需要连接公司网络,没有 VPN 怎么能行
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="OpenVPN" scheme="http://blog.joylau.cn/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>Docker 私服搭建记录</title>
    <link href="http://blog.joylau.cn/2018/11/19/Docker-PrivateRepo/"/>
    <id>http://blog.joylau.cn/2018/11/19/Docker-PrivateRepo/</id>
    <published>2018-11-19T14:51:33.000Z</published>
    <updated>2018-12-18T05:56:47.423Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>docker pull registry</li><li><p>docker run -itd -v /data/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest<br> 参数说明<br> -itd：在容器中打开一个伪终端进行交互操作，并在后台运行；<br> -v：把宿主机的/data/registry目录绑定 到 容器/var/lib/registry目录(这个目录是registry容器中存放镜像文件的目录)，来实现数据的持久化；<br> -p：映射端口；访问宿主机的5000端口就访问到registry容器的服务了；<br> –restart=always：这是重启的策略，假如这个容器异常退出会自动重启容器；<br> –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误<br> –name registry：创建容器命名为registry，你可以随便命名；<br> registry:latest：这个是刚才pull下来的镜像；</p></li><li><p>测试是否成功: curl <a href="http://127.0.0.1:5000/v2/_catalog" target="_blank" rel="noopener">http://127.0.0.1:5000/v2/_catalog</a>, 返回仓库的镜像列表</p></li><li>在中央仓库下载一个镜像: docker pull openjdk</li><li>更改这个镜像的标签: docker tag imageId domain:5000/openjdk 或者 docker tag imageName:tag domain:5000/openjdk</li><li>上传镜像到私服: docker push domain:5000/openjdk</li></ol><p>报错: Get <a href="https://172.18.18.90:5000/v2/" target="_blank" rel="noopener">https://172.18.18.90:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>解决: 需要https的方法才能上传，我们可以修改下daemon.json<br>      vim /etc/docker/daemon.json<br>      {<br>        “insecure-registries”: [ “domain:5000”]<br>      }</p><h3 id="无网络搭建"><a href="#无网络搭建" class="headerlink" title="无网络搭建"></a>无网络搭建</h3><ol><li>在有网络的机器上 <code>docker pull registry</code></li><li><code>docker save registry &gt; registry.tar</code> 保存到个 tar 包</li><li>拷贝到服务器上, <code>docker load -i registry.tar</code> 导入镜像</li><li><code>docker images</code> 查看镜像</li><li>再继续上面的操作</li></ol><h3 id="docker-开启-tcp-端口"><a href="#docker-开启-tcp-端口" class="headerlink" title="docker 开启 tcp 端口"></a>docker 开启 tcp 端口</h3><ul><li><code>vim /usr/lib/systemd/system/docker.service</code></li></ul><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd-current -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock \</span><br></pre></td></tr></table></figure><p>重启即可,之后 idea 可输入 tcp://ip:2375 连接</p><h3 id="允许跨域请求"><a href="#允许跨域请求" class="headerlink" title="允许跨域请求"></a>允许跨域请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: 0.1</span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line">  fields:</span><br><span class="line">    service: registry</span><br><span class="line">storage:</span><br><span class="line">  cache:</span><br><span class="line">    blobdescriptor: inmemory</span><br><span class="line">  filesystem:</span><br><span class="line">    rootdirectory: /var/lib/registry</span><br><span class="line">http:</span><br><span class="line">  addr: :5000</span><br><span class="line">  headers:</span><br><span class="line">    X-Content-Type-Options: [nosniff]</span><br><span class="line">    Access-Control-Allow-Headers: [<span class="string">'Origin,Accept,Content-Type,Authorization'</span>]</span><br><span class="line">    Access-Control-Allow-Origin: [<span class="string">'*'</span>]</span><br><span class="line">    Access-Control-Allow-Methods: [<span class="string">'GET,POST,PUT,DELETE'</span>]</span><br><span class="line">health:</span><br><span class="line">  storagedriver:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    interval: 10s</span><br><span class="line">    threshold: 3</span><br></pre></td></tr></table></figure><p>head 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Access-Control-Allow-Headers:</span> <span class="string">['Origin,Accept,Content-Type,Authorization']</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Origin:</span> <span class="string">['*']</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Methods:</span> <span class="string">['GET,POST,PUT,DELETE']</span></span><br></pre></td></tr></table></figure><p>之后保存到本地,再挂载到容器的 /etc/docker/registry/config.yml 中</p><h3 id="Harbor-搭建-Docker-私服"><a href="#Harbor-搭建-Docker-私服" class="headerlink" title="Harbor 搭建 Docker 私服"></a>Harbor 搭建 Docker 私服</h3><p>上述方式搭建的 docker 私服,属于比较简单使用的方法,只能在命令行上操作,很不方便,比如不能直接删除镜像,无法添加用户,设置私有仓库<br>Harbor 是一个图形化的私服管理界面,安装使用更易于操作</p><blockquote><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。</p></blockquote><ol><li>下载离线包: <a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></li><li>解压</li><li>更改配置文件 <code>docker-compose.yml</code> 私服的仓库端口我们默认设置为 5000,但是 docker-compose.yml 文件中并没有配置,我们需要添加一个 ports 配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry:</span></span><br><span class="line"><span class="attr">  networks:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">harbor</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">5000</span><span class="string">:5000</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Harbor 默认使用的是 80 端口,不想使用的话可切换其他端口, 配置在 docker-compose.yml 的最下方</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">goharbor/nginx-photon:v1.7.0</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9339</span><span class="string">:80</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">4443</span><span class="string">:4443</span></span><br></pre></td></tr></table></figure><p>此处需要注意的是,如果更改了其他端口,则需要在 <code>common/templates/registry/config.yml</code> 文件中更改一个配置 realm 加上端口,否则登录会出现错误</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">    auth:</span></span><br><span class="line"><span class="attr">      token:</span></span><br><span class="line"><span class="attr">        issuer:</span> <span class="string">harbor-token-issuer</span></span><br><span class="line"><span class="attr">        realm:</span> <span class="string">$public_url:9339/service/token</span></span><br><span class="line"><span class="attr">        rootcertbundle:</span> <span class="string">/etc/registry/root.crt</span></span><br><span class="line"><span class="attr">        service:</span> <span class="string">harbor-registry</span></span><br><span class="line"><span class="string">```</span> </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="string">修改配置文件</span> <span class="string">`harbor.cfg`</span></span><br><span class="line"></span><br><span class="line"><span class="string">```</span> <span class="string">bash</span></span><br><span class="line">    <span class="string">hostname</span> <span class="string">=</span> <span class="number">34.0</span><span class="number">.7</span><span class="number">.183</span> <span class="comment">## 改为 IP 或者 域名,不要写错 localhost 或者 127.0.0.1</span></span><br><span class="line">    <span class="string">ui_url_protocol</span> <span class="string">=</span> <span class="string">http</span> <span class="comment">## http 方式</span></span><br><span class="line">    <span class="string">harbor_admin_password</span> <span class="string">=</span> <span class="string">Hardor12345</span> <span class="comment">## admin 账号的默认登录密码</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p><code>./prepare</code> 完成配置</p></li><li><p><code>./install.sh</code> 开始安装</p></li><li><p>打开浏览器</p></li><li><p>创建一个项目 <code>joylau</code> 注意这个名称很重要,名称对不上的话,会造成 image push 不成功,还有就是若果这个项目的是公开的话,则所有人都可以 pull ,但是 push 的话是需要登录的,登录的用户名和密码在该项目的成员下.默认的 admin 用户就可以</p></li><li><p>登录,退出命令 <code>docker login 34.0.7.183:5000 ; docker logout 34.0.7.183:5000</code></p></li><li><p>之后的操作都是日常操作了</p></li></ol>]]></content>
    
    <summary type="html">
    
      国内的网络环境不好,在 docker build 的时候经常因为网络的问题失败,很是苦恼
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>记录 -- Docker 三种方式部署 ownCloud</title>
    <link href="http://blog.joylau.cn/2018/10/26/Docker-ownCloud/"/>
    <id>http://blog.joylau.cn/2018/10/26/Docker-ownCloud/</id>
    <published>2018-10-26T01:15:55.000Z</published>
    <updated>2019-01-21T04:02:33.405Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>ownCloud 除了传统的部署方式,在如今 docker 大行其道的环境下,使用 docker 部署 ownCloud 才是最方便的</p><h3 id="第一种-owncloud-镜像直接安装"><a href="#第一种-owncloud-镜像直接安装" class="headerlink" title="第一种 owncloud 镜像直接安装"></a>第一种 owncloud 镜像直接安装</h3><p>直接部署 owncloud 镜像,该镜像地址: <a href="https://hub.docker.com/r/_/owncloud/" target="_blank" rel="noopener">https://hub.docker.com/r/_/owncloud/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull owncloud</span><br><span class="line">docker run -d -p 80:80 owncloud</span><br></pre></td></tr></table></figure><p>这种方式的需要你提前装好 MariaDb 数据库,在启动完成后打开页面会按照流程填写数据库的链接信息,之后就可以使用 ownCloud 了</p><h3 id="第二种-分别安装"><a href="#第二种-分别安装" class="headerlink" title="第二种 分别安装"></a>第二种 分别安装</h3><p>分别先后使用 docker 按照 redis,mariadb,ownCloud<br>安装 redis 的 mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker volume create owncloud_redis</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name redis \</span><br><span class="line">  -e REDIS_DATABASES=1 \</span><br><span class="line">  --volume owncloud_redis:/var/lib/redis \</span><br><span class="line">  webhippie/redis:latest</span><br><span class="line"></span><br><span class="line">docker volume create owncloud_mysql</span><br><span class="line">docker volume create owncloud_backup</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mariadb \</span><br><span class="line">  -e MARIADB_ROOT_PASSWORD=owncloud \</span><br><span class="line">  -e MARIADB_USERNAME=owncloud \</span><br><span class="line">  -e MARIADB_PASSWORD=owncloud \</span><br><span class="line">  -e MARIADB_DATABASE=owncloud \</span><br><span class="line">  --volume owncloud_mysql:/var/lib/mysql \</span><br><span class="line">  --volume owncloud_backup:/var/lib/backup \</span><br><span class="line">  webhippie/mariadb:latest</span><br></pre></td></tr></table></figure><p>接着我们配置一些 ownCloud web 服务的环境变量,并在启动容器时使用这些变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export OWNCLOUD_VERSION=10.0</span><br><span class="line">export OWNCLOUD_DOMAIN=localhost</span><br><span class="line">export ADMIN_USERNAME=admin</span><br><span class="line">export ADMIN_PASSWORD=admin</span><br><span class="line">export HTTP_PORT=80</span><br><span class="line"></span><br><span class="line">docker volume create owncloud_files</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name owncloud \</span><br><span class="line">  --link mariadb:db \</span><br><span class="line">  --link redis:redis \</span><br><span class="line">  -p $&#123;HTTP_PORT&#125;:8080 \</span><br><span class="line">  -e OWNCLOUD_DOMAIN=$&#123;OWNCLOUD_DOMAIN&#125; \</span><br><span class="line">  -e OWNCLOUD_DB_TYPE=mysql \</span><br><span class="line">  -e OWNCLOUD_DB_NAME=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_USERNAME=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_PASSWORD=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_HOST=db \</span><br><span class="line">  -e OWNCLOUD_ADMIN_USERNAME=$&#123;ADMIN_USERNAME&#125; \</span><br><span class="line">  -e OWNCLOUD_ADMIN_PASSWORD=$&#123;ADMIN_PASSWORD&#125; \</span><br><span class="line">  -e OWNCLOUD_REDIS_ENABLED=true \</span><br><span class="line">  -e OWNCLOUD_REDIS_HOST=redis \</span><br><span class="line">  --volume owncloud_files:/mnt/data \</span><br><span class="line">  owncloud/server:$&#123;OWNCLOUD_VERSION&#125;</span><br></pre></td></tr></table></figure><p>之后稍等片刻,打开网页即可</p><h3 id="第三种-docker-compose-部署"><a href="#第三种-docker-compose-部署" class="headerlink" title="第三种 docker-compose 部署"></a>第三种 docker-compose 部署</h3><p>首先保证 docker-compose 的版本在 1.12.0+ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个新的目录</span><br><span class="line">mkdir owncloud-docker-server</span><br><span class="line"></span><br><span class="line">cd owncloud-docker-server</span><br><span class="line"></span><br><span class="line"># 下载 docker-compose.yml 文件</span><br><span class="line">wget https://raw.githubusercontent.com/owncloud-docker/server/master/docker-compose.yml</span><br><span class="line"></span><br><span class="line"># 配置环境变量文件</span><br><span class="line">cat &lt;&lt; EOF &gt; .env</span><br><span class="line">OWNCLOUD_VERSION=10.0</span><br><span class="line">OWNCLOUD_DOMAIN=localhost</span><br><span class="line">ADMIN_USERNAME=admin</span><br><span class="line">ADMIN_PASSWORD=admin</span><br><span class="line">HTTP_PORT=80</span><br><span class="line">HTTPS_PORT=443</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 构建并启动容器</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>当上面的流程都完成时，通过运行 <code>docker-compose ps</code> 检查所有容器是否已成功启动<br>还可以使用 <code>docker-compose logs --follow owncloud</code> 来查看日志<br><code>docker-compose stop</code> 停止容器<br><code>docker-compose down</code> 停止和删除容器</p><h4 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h4><ol><li>进入 .yaml 或 .env 目录</li><li>将 ownCloud 设置维护模式,<code>docker-compose exec server occ maintenance:mode --on</code></li><li>停止容器, <code>docker-compose down</code></li><li>修改. env 文件的版本号,手动或者 <code>sed -i &#39;s/^OWNCLOUD_VERSION=.*$/OWNCLOUD_VERSION=&lt;newVersion&gt;/&#39; /compose/*/.env</code></li><li>重新构建并启动, <code>docker-compose up -d</code></li></ol><h4 id="指定挂载目录"><a href="#指定挂载目录" class="headerlink" title="指定挂载目录"></a>指定挂载目录</h4><ol><li>owncloud-server : /mnt/data</li></ol><p>注意挂载本地目录时,要设置递归文件夹的可读权限 <code>chmod -R 777 ./owncloud/*</code></p><p>配置说明<br>OWNCLOUD_VERSION:  ownCloud 版本<br>OWNCLOUD_DOMAIN: ownCloud 可访问的域<br>ADMIN_USERNAME: 管理员用户名<br>ADMIN_PASSWORD: 管理员密码<br>HTTP_PORT: 使用的端口<br>HTTPS_PORT: SSL使用的端口</p><p>总结来说,推荐使用第三种方式来部署.</p><h3 id="docker-compose-文件备份"><a href="#docker-compose-文件备份" class="headerlink" title="docker-compose 文件备份"></a>docker-compose 文件备份</h3><p>docker-compose.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  files:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  backup:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  owncloud:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">owncloud/server:$&#123;OWNCLOUD_VERSION&#125;</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">owncloud-server</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;HTTP_PORT&#125;:8080</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DOMAIN=$&#123;OWNCLOUD_DOMAIN&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_TYPE=mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_NAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_USERNAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_HOST=db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_ADMIN_USERNAME=$&#123;ADMIN_USERNAME&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_ADMIN_PASSWORD=$&#123;ADMIN_PASSWORD&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_MYSQL_UTF8MB4=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_REDIS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_REDIS_HOST=redis</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/liufa/owncloud-data:/mnt/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">webhippie/mariadb:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">owncloud-mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_ROOT_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_USERNAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_DATABASE=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_MAX_ALLOWED_PACKET=128M</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_INNODB_LOG_FILE_SIZE=64M</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/liufa/owncloud-mysql:/var/lib/mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/liufa/owncloud-mysql-backup:/var/lib/backup</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">webhippie/redis:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">owncloud-redis</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">REDIS_DATABASES=1</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/liufa/owncloud-redis:/var/lib/redis</span></span><br></pre></td></tr></table></figure><p>.env:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OWNCLOUD_VERSION=10.0</span><br><span class="line">OWNCLOUD_DOMAIN=0.0.0.0</span><br><span class="line">ADMIN_USERNAME=admin</span><br><span class="line">ADMIN_PASSWORD=</span><br><span class="line">HTTP_PORT=1194</span><br><span class="line">HTTPS_PORT=443</span><br></pre></td></tr></table></figure><h3 id="nginx-反向代理时的配置"><a href="#nginx-反向代理时的配置" class="headerlink" title="nginx 反向代理时的配置"></a>nginx 反向代理时的配置</h3><p>注意配置 请求头 和 限制上传文件的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        <span class="comment">#listen       [::]:80 default_server;</span></span><br><span class="line">        server_name  cloud.joylau.cn;</span><br><span class="line">        location / &#123;</span><br><span class="line">           <span class="comment"># proxy_pass http://JoyCloud;</span></span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header Host            <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_pass   http://127.0.0.1:1194;</span><br><span class="line">            client_max_body_size    10000m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ownCloud 除了传统的部署方式,在如今 docker 大行其道的环境下,使用 docker 部署 ownCloud 才是最方便的
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="ownCloud" scheme="http://blog.joylau.cn/tags/ownCloud/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 关键字自动补全的实现</title>
    <link href="http://blog.joylau.cn/2018/08/13/Elasticsearch-AutoComplete/"/>
    <id>http://blog.joylau.cn/2018/08/13/Elasticsearch-AutoComplete/</id>
    <published>2018-08-13T03:01:12.000Z</published>
    <updated>2018-10-26T07:01:31.187Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们经常能看到在各大电商网站搜索关键字的时候,底下下拉框会补全你要搜索的商品,或者类似的商品,有时候甚至连错别字也能纠正过来,其实ElasticSearch也能实现这样的功能</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>首先,能够被自动补全的需要设置索引类型为”completion”,其次,还可以设置自动提示为中文分词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"ik"</span>: &#123;</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ngram_analyzer"</span>: &#123;</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"ngram_tokenizer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"tokenizer"</span>: &#123;</span><br><span class="line">        <span class="attr">"ngram_tokenizer"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"ngram"</span>,</span><br><span class="line">          <span class="attr">"min_gram"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"max_gram"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"token_chars"</span>: [</span><br><span class="line">            <span class="string">"letter"</span>,</span><br><span class="line">            <span class="string">"digit"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"knowledge_info"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"infoId"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoTitle"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoKeywords"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoSummary"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoContent"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyAuthor"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyIssueUnit"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyStandardCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLiteratureCategory"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLcCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLiteratureCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"data"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"attachment.content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"auditState"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoType"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoFileUrl"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoFileName"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">60</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"createTime"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 elasticsearch 需要安装中文分词 ik 插件和附件处理插件 ingest-attachment</p><h3 id="Java-API-调用"><a href="#Java-API-调用" class="headerlink" title="Java API 调用"></a>Java API 调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动完成提示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> search search</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MessageBody</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBody <span class="title">autoCompleteKnowledgeInfo</span><span class="params">(KnowledgeSearch search)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置搜索建议</span></span><br><span class="line">    CompletionSuggestionBuilder infoTitleSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoTitle.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoKeywordsSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoKeywords.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoSummarySuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoSummary.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoFileNameSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoFileName.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    SuggestBuilder suggestBuilder = <span class="keyword">new</span> SuggestBuilder()</span><br><span class="line">            .addSuggestion(<span class="string">"标题"</span>, infoTitleSuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"关键字"</span>, infoKeywordsSuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"摘要"</span>, infoSummarySuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"附件"</span>,infoFileNameSuggestion);</span><br><span class="line">    SearchRequestBuilder searchRequest = client.prepareSearch(ES_KNOWLEDGE_INDEX)</span><br><span class="line">            .setFetchSource(<span class="keyword">false</span>)</span><br><span class="line">            .suggest(suggestBuilder);</span><br><span class="line">    List&lt;JSONObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询结果</span></span><br><span class="line">    SearchResponse searchResponse = searchRequest.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*没查到结果*/</span></span><br><span class="line">    <span class="keyword">if</span> (searchResponse.getSuggest() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageBody.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">    searchResponse.getSuggest().forEach(entries -&gt; &#123;</span><br><span class="line">        String name = entries.getName();</span><br><span class="line">        <span class="keyword">for</span> (Suggest.Suggestion.Entry&lt;? extends Suggest.Suggestion.Entry.Option&gt; entry : entries) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Suggest.Suggestion.Entry.Option option : entry.getOptions()) &#123;</span><br><span class="line">                JSONObject object = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                object.put(<span class="string">"name"</span>,name);</span><br><span class="line">                object.put(<span class="string">"text"</span>,option.getText().string());</span><br><span class="line">                list.add(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> MessageBody.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码摘取自项目中的部分, 另外前端还可以配合自动完成的插件,最终来实现效果.</p>]]></content>
    
    <summary type="html">
    
      我们经常能看到在各大电商网站搜索关键字的时候,底下下拉框会补全你要搜索的商品,或者类似的商品,有时候甚至连错别字也能纠正过来,其实ElasticSearch也能实现这样的功能
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 查询全部数据</title>
    <link href="http://blog.joylau.cn/2018/08/09/Elasticsearch-SearchAll/"/>
    <id>http://blog.joylau.cn/2018/08/09/Elasticsearch-SearchAll/</id>
    <published>2018-08-09T07:27:16.000Z</published>
    <updated>2018-08-13T02:51:53.682Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有时我们希望查询 固定条件下的全部数据<br>ES 默认的策略是返回10条数据<br>虽然可以 setSize()<br>但是默认上限是 10 万还是 100 万条数据,这不够优雅,一般不这么干</p><h3 id="TransportClient-方法"><a href="#TransportClient-方法" class="headerlink" title="TransportClient 方法"></a>TransportClient 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TimeValue keepAlive = TimeValue.timeValueMinutes(<span class="number">30</span>);</span><br><span class="line">    SearchRequestBuilder searchRequest = client.prepareSearch(ES_KNOWLEDGE_INDEX)</span><br><span class="line">            .setScroll(keepAlive)</span><br><span class="line">            .setSize(<span class="number">10000</span>);</span><br><span class="line">    SearchResponse searchResponse = searchRequest.get();</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//处理的业务 saveIds(searchResponse);</span></span><br><span class="line">        searchResponse = client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(keepAlive).execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">    &#125; <span class="keyword">while</span> (searchResponse.getHits().getHits().length != <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下 ES 查询全部数据的 API 使用用法
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>$(...).autocomplete is not a function 问题的解决</title>
    <link href="http://blog.joylau.cn/2018/08/09/Jquery-Load-Plugins/"/>
    <id>http://blog.joylau.cn/2018/08/09/Jquery-Load-Plugins/</id>
    <published>2018-08-09T02:04:52.000Z</published>
    <updated>2018-08-09T02:29:19.757Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>因项目需求,需要一个自动提示的功能,想到之前有 jquery 的 jQuery-Autocomplete 插件,于是就直接拿来用了,<br>直接在github 上找到了一个 starts 最多的项目 <a href="https://github.com/devbridge/jQuery-Autocomplete.git" target="_blank" rel="noopener">jQuery-Autocomplete</a><br>看了下插件的 API 可配置项很多,有一个 appendTo 配置,是我想要的,于是就决定使用这个差价</p><p>直接把 插件下载下来 放到项目中去,直接 $(…).autocomplete is not a function<br>……</p><p>项目中我写的只是其中的一个模块,页面的代码是纯 html 页面写的,然后通过 panel 引入 html 代码片段<br>很奇怪,为什么插件无法加载</p><p>于是就就把官方的demo跑了一下,没有问题</p><p>又怀疑是 jQuery 版本的问题,<br>官方的demo jQuery 版本是 1.8.2,项目使用的是1.11.1,<br>于是又在官方的 demo 下替换jQuery的版本<br>发现使用没有问题</p><p>又怀疑是插件的版本过高,于是再 GitHub 的 release 上找了个2014年发布的1.2.2的版本,这已经是能找到的最低版本了<br>发现还是不行</p><p>这就奇怪了,我之前也引入过其他的插件,正常使用都没有问题,偏偏使用这个有问题<br>于是想着插件的引入方式有问题,打开一看,jQuery插件的引入方式都是大同小异的<br>本人前端不擅长,也不知道怎么改…..</p><p>于是又在 GitHub上找了其他的插件,有的能用,但是没有我想要的功能….</p><p>一直这么来来回回的测试,已经晚上 10 点了…..<br>从吃完晚饭一直研究到现在还是没有解决<br>心里好气啊!!!!!<br>空调一关,直接回家了!!!!</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>今天早上来又差了点资料,找到了个不太靠谱,但又想尝试了下的方法<br><a href="https://blog.verysu.com/article/328" target="_blank" rel="noopener">TypeError: $(…).autocomplete is not a function</a></p><p>试一下吧,没想到真的可以</p><p>发一张对比图</p><p><img src="http://image.joylau.cn/blog/Jquery-Load-Plugins.md.png" alt="query-Load-Plugins"></p>]]></content>
    
    <summary type="html">
    
      因项目需求,需要一个自动提示的功能,想到之前有 jquery 的 jQuery-Autocomplete 插件,于是就直接拿来用了,但是使用情况却不是如此
    
    </summary>
    
      <category term="前端篇" scheme="http://blog.joylau.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
      <category term="Jquery" scheme="http://blog.joylau.cn/tags/Jquery/"/>
    
  </entry>
  
</feed>
