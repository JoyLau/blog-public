<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2020-01-02T16:01:04.894Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-App-Rewired 的一些配置</title>
    <link href="http://blog.joylau.cn/2019/12/26/React-App-Rewired/"/>
    <id>http://blog.joylau.cn/2019/12/26/React-App-Rewired/</id>
    <published>2019-12-26T08:32:18.000Z</published>
    <updated>2020-01-02T16:01:04.894Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="添加多页面配置"><a href="#添加多页面配置" class="headerlink" title="添加多页面配置"></a>添加多页面配置</h3><p>之前写过一篇 npm eject 之后的多页面配置,可以往前翻阅 , 现在不想 eject, 该怎么配置多页面?</p><ol><li><p>npm install react-app-rewire-multiple-entry –save-dev</p></li><li><p>在 config-overrides.js 中添加配置<br>现在 public 里复制一个 html 页面, 在 src 目录下再新增一个目录,里面的文件拷贝 index 的稍微改动下,<br>大致目录如下:</p></li></ol><p>-serviceWorker.js<br>-metadata.js<br>-metadata.css<br>-logo.svg<br>-App.test.js<br>-App.js<br>-App.css</p><p>基本使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multipleEntry = <span class="built_in">require</span>(<span class="string">'react-app-rewire-multiple-entry'</span>)([&#123;</span><br><span class="line">    entry: <span class="string">'src/metadata/metadata.js'</span>,</span><br><span class="line">    template: <span class="string">'public/metadata.html'</span>,</span><br><span class="line">    outPath: <span class="string">'/metadata'</span>,</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  webpack: <span class="function"><span class="keyword">function</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    multipleEntry.addMultiEntry(config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 customize-cra 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multipleEntry = <span class="built_in">require</span>(<span class="string">'react-app-rewire-multiple-entry'</span>)([</span><br><span class="line">  &#123;</span><br><span class="line">    entry: <span class="string">'src/entry/landing.js'</span>,</span><br><span class="line">    template: <span class="string">'public/landing.html'</span>,</span><br><span class="line">    outPath: <span class="string">'/landing.html'</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  override,</span><br><span class="line">  overrideDevServer</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  webpack: override(</span><br><span class="line">    multipleEntry.addMultiEntry</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结合 ant-design 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;override, fixBabelImports, addLessLoader&#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multipleEntry = <span class="built_in">require</span>(<span class="string">'react-app-rewire-multiple-entry'</span>)([&#123;</span><br><span class="line">    entry: <span class="string">'src/metadata/metadata.js'</span>,</span><br><span class="line">    template: <span class="string">'public/metadata.html'</span>,</span><br><span class="line">    outPath: <span class="string">'/metadata'</span>,</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    multipleEntry.addMultiEntry,</span><br><span class="line">    fixBabelImports(<span class="string">'import'</span>, &#123;</span><br><span class="line">        libraryName: <span class="string">'antd'</span>,</span><br><span class="line">        libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">        style: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    addLessLoader(&#123;</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">        modifyVars: &#123; <span class="string">'@primary-color'</span>: <span class="string">'#1890ff'</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意,这样配置的话, 请求的 uri 是 /metadata, 在 build 后会生成 metadata 文件, 将打包后的文件拷贝到服务器上运行效果不好<br>一般我都注释掉 template, 再将 outPath 写成 /metadata.html</p></blockquote><h3 id="打包不生成-source-map-文件"><a href="#打包不生成-source-map-文件" class="headerlink" title="打包不生成 source-map 文件"></a>打包不生成 source-map 文件</h3><p>在项目更目录下创建文件 .env, 写入: GENERATE_SOURCEMAP=false 即可.</p>]]></content>
    
    <summary type="html">
    
      React-App-Rewired 创建的项目的一些配置记录
    
    </summary>
    
      <category term="React篇" scheme="http://blog.joylau.cn/categories/React%E7%AF%87/"/>
    
    
      <category term="react" scheme="http://blog.joylau.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Nested 类型动态数据的组合查询</title>
    <link href="http://blog.joylau.cn/2019/12/23/Elasticsearch-Multi-NestedQuery/"/>
    <id>http://blog.joylau.cn/2019/12/23/Elasticsearch-Multi-NestedQuery/</id>
    <published>2019-12-23T01:51:46.000Z</published>
    <updated>2019-12-23T16:01:04.888Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Nested 类型的数据不多说了,<br>先看 mapping:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">"metaArray": &#123;</span><br><span class="line">    "type": "nested",</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "key": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word",</span><br><span class="line">        "fields": &#123;</span><br><span class="line">          "full": &#123;</span><br><span class="line">            "type": "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "value": &#123;</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word",</span><br><span class="line">        "fields": &#123;</span><br><span class="line">          "full": &#123;</span><br><span class="line">            "type": "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>再看数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>:<span class="string">"category_libs_v1.x"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>:<span class="string">"category_info"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>:<span class="string">"526"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_score"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_source"</span>:&#123;</span><br><span class="line">        <span class="attr">"categoryName"</span>:<span class="string">"投标文件"</span>,</span><br><span class="line">        <span class="attr">"createTime"</span>:<span class="string">"2019-12-23 00:07:15"</span>,</span><br><span class="line">        <span class="attr">"id"</span>:<span class="string">"526"</span>,</span><br><span class="line">        <span class="attr">"metaArray"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"value"</span>:<span class="string">"Joy"</span>,</span><br><span class="line">                <span class="attr">"key"</span>:<span class="string">"作者"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"value"</span>:<span class="string">"txt"</span>,</span><br><span class="line">                <span class="attr">"key"</span>:<span class="string">"文件类型"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"pathName"</span>:<span class="string">"企业空间导航/业务条块"</span>,</span><br><span class="line">        <span class="attr">"pids"</span>:<span class="string">"|1|525|"</span>,</span><br><span class="line">        <span class="attr">"status"</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">"updateTime"</span>:<span class="string">"2019-12-23 00:07:15"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>想查作者是 Joy 并且文件类型是 txt 的记录</p><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><p>使用 nestedQuery + queryStringQuery</p><p>语句:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"size"</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">            <span class="attr">"must"</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"nested"</span>:&#123;</span><br><span class="line">                        <span class="attr">"query"</span>:&#123;</span><br><span class="line">                            <span class="attr">"query_string"</span>:&#123;</span><br><span class="line">                                <span class="attr">"query"</span>:<span class="string">"metaArray.key.full:作者 AND metaArray.value.full:Joy"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"path"</span>:<span class="string">"metaArray"</span>,</span><br><span class="line">                        <span class="attr">"score_mode"</span>:<span class="string">"max"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"nested"</span>:&#123;</span><br><span class="line">                        <span class="attr">"query"</span>:&#123;</span><br><span class="line">                            <span class="attr">"query_string"</span>:&#123;</span><br><span class="line">                                <span class="attr">"query"</span>:<span class="string">"metaArray.key.full:文件类型 AND metaArray.value.full:txt"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"path"</span>:<span class="string">"metaArray"</span>,</span><br><span class="line">                        <span class="attr">"score_mode"</span>:<span class="string">"max"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String key = xxxx</span><br><span class="line">String value = xxxx</span><br><span class="line">nestedQuery(<span class="string">"metaArray"</span>, queryStringQuery(<span class="string">"metaArray.key.full:"</span> + key + <span class="string">" AND metaArray.value.full:"</span> + value), ScoreMode.Max);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下Elasticsearch Nested 类型动态数据的组合查询
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>开源项目申请 JetBrains 家族系列软件的 License</title>
    <link href="http://blog.joylau.cn/2019/11/29/IntelliJIDEA-JetBrains-License/"/>
    <id>http://blog.joylau.cn/2019/11/29/IntelliJIDEA-JetBrains-License/</id>
    <published>2019-11-29T01:28:23.000Z</published>
    <updated>2019-11-29T16:01:07.837Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前一直用我弟弟的学生证申请的 license,可惜今年毕业了,无法在续费申请了<br>早期已经听说 JetBrains 可以使用自己的开源项目进行申请免费的 license<br>正好使用我的这个博客来申请一波</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>前往 JetBrains 官方提供的申请链接 (<a href="https://www.jetbrains.com/shop/eform/opensource?product=ALL" target="_blank" rel="noopener">https://www.jetbrains.com/shop/eform/opensource?product=ALL</a>)</li><li>填写资料,其中注意,需要在项目的根目录下创建 License 文件,类型没有差别,我使用的是 MIT LICENSE,还有就是邮箱地址和 github profile 页面的邮箱地址一致</li><li>等待了 2 天,收到了 JetBrains 工作人员的回复</li><li>点击邮件中的 <code>Take me to my license(s)</code></li><li>使用申请的邮箱地址登录已有的账号或者创建新的账号</li><li>登录成功后点击 license tab 页面,会看到你填的项目名</li><li>点击 <code>Active subscriptions</code>, 激活,在点击 <code>Assign</code>分配使用</li><li>看到一些提示成功信息,就说明没有问题了,直接在 IDEA 的激活页面登录账户使用即可</li></ol><h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>我这里因为之前使用 QQ 邮箱创建过 JetBrains 的账号,这次不想使用新的邮箱再次创建账号<br>于是在第四步点击 <code>Take me to my license(s)</code> 后,我选择授权其他邮箱,填写邮箱地址,之后你的邮箱会收到邮件,点击接受授权的链接<br>之后的操作都一致了,成功使用我原来的邮箱获取到了 license.</p>]]></content>
    
    <summary type="html">
    
      之前一直用我弟弟的学生证申请的 license,可惜今年毕业了,无法在续费申请了
    
    </summary>
    
      <category term="IntelliJ IDEA篇" scheme="http://blog.joylau.cn/categories/IntelliJ-IDEA%E7%AF%87/"/>
    
    
      <category term="IntelliJ IDEA" scheme="http://blog.joylau.cn/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Spring EL 表达式 ${} 和</title>
    <link href="http://blog.joylau.cn/2019/11/20/SpringBoot-Spel/"/>
    <id>http://blog.joylau.cn/2019/11/20/SpringBoot-Spel/</id>
    <published>2019-11-20T02:20:15.000Z</published>
    <updated>2019-11-20T16:01:03.771Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>个人理解:<br><code>${}</code> : 用于加载外部文件中指定key的值<br><code>#{}</code> : 功能更强大的SpEl表达式，将内容赋值给属性<br><code>#{…}</code> 和 <code>${…}</code> 可以混合使用，但是必须<code>#{}</code>外面，${}在里面,#{ ‘${}’ } ，注意单引号，注意不能反过来</p><h3 id="功能"><a href="#功能" class="headerlink" title="#{} 功能"></a><strong>#{}</strong> 功能</h3><ol><li>直接量表达式: “#{‘Hello World’}”</li><li>使用java代码new/instance of: 此方法只能是java.lang 下的类才可以省略包名 #{“new Spring(‘Hello World’)”}</li><li>使用T(Type): 使用“T(Type)”来表示java.lang.Class实例，同样，只有java.lang 下的类才可以省略包名。此方法一般用来引用常量或静态方法 ,#{“T(Integer).MAX_VALUE”}</li><li>变量: 使用“#bean_id”来获取,#{“beanId.field”}</li><li>方法调用: #{“#abc.substring(0,1)”}</li><li>运算符表达式: 算数表达式,比较表达式,逻辑表达式,赋值表达式,三目表达式,正则表达式</li><li>判断空: #{“name?:’other’”}</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>springboot 和 elasticsearch 的整合包里有一个注解<br>@Document(indexName = “”, type = “”)<br>indexName 和 type 都是字符串<br>这个注解写在实体类上,代表该实体类是一个索引<br>现在, indexName 和 type 不能为固定写死,需要从配置文件读取,<br>于是想到了 spring  的 el 表达式<br>使用<br>@Document(indexName = “${xxxx}”, type = “${xxxx}”)<br>启动后<br>无效,spring 直接将其解析成了字符串<br>于是,查看 @Document 这个注解实现的源码<br>在这个包中 org.springframework.data.elasticsearch.core.mapping 找到了实现类 SimpleElasticsearchPersistentEntity<br>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleElasticsearchPersistentEntity</span><span class="params">(TypeInformation&lt;T&gt; typeInformation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(typeInformation);</span><br><span class="line">    <span class="keyword">this</span>.context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">    <span class="keyword">this</span>.parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">    Class&lt;T&gt; clazz = typeInformation.getType();</span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(Document.class)) &#123;</span><br><span class="line">        Document document = clazz.getAnnotation(Document.class);</span><br><span class="line">        Assert.hasText(document.indexName(),</span><br><span class="line">                <span class="string">" Unknown indexName. Make sure the indexName is defined. e.g @Document(indexName=\"foo\")"</span>);</span><br><span class="line">        <span class="keyword">this</span>.indexName = document.indexName();</span><br><span class="line">        <span class="keyword">this</span>.indexType = hasText(document.type()) ? document.type() : clazz.getSimpleName().toLowerCase(Locale.ENGLISH);</span><br><span class="line">        <span class="keyword">this</span>.useServerConfiguration = document.useServerConfiguration();</span><br><span class="line">        <span class="keyword">this</span>.shards = document.shards();</span><br><span class="line">        <span class="keyword">this</span>.replicas = document.replicas();</span><br><span class="line">        <span class="keyword">this</span>.refreshInterval = document.refreshInterval();</span><br><span class="line">        <span class="keyword">this</span>.indexStoreType = document.indexStoreType();</span><br><span class="line">        <span class="keyword">this</span>.createIndexAndMapping = document.createIndex();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(Setting.class)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.settingPath = typeInformation.getType().getAnnotation(Setting.class).settingPath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIndexName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Expression expression = parser.parseExpression(indexName, ParserContext.TEMPLATE_EXPRESSION);</span><br><span class="line">    <span class="keyword">return</span> expression.getValue(context, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIndexType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Expression expression = parser.parseExpression(indexType, ParserContext.TEMPLATE_EXPRESSION);</span><br><span class="line">    <span class="keyword">return</span> expression.getValue(context, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了 <code>SpelExpressionParser</code> 和 <code>ParserContext.TEMPLATE_EXPRESSION</code><br>那么这里就很肯定 indexName 和 type 是支持 spel 的写法了,只是怎么写,暂时不知道<br>再看<br>ParserContext.TEMPLATE_EXPRESSION 的源码是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default ParserContext implementation that enables template expression</span></span><br><span class="line"><span class="comment"> * parsing mode. The expression prefix is "#&#123;" and the expression suffix is "&#125;".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isTemplate()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ParserContext TEMPLATE_EXPRESSION = <span class="keyword">new</span> ParserContext() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExpressionPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"#&#123;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExpressionSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到上面的注释,知道是使用 #{}<br>接着<br>新建一个类,使用 @Configuration 和 @ConfigurationProperties(prefix = “xxx”) 注册一个 bean<br>再在实体类上加上注解 @Component 也注册一个bean<br>之后就可以使用 #{bean.indexName} 来读取到配置属性了</p>]]></content>
    
    <summary type="html">
    
      Spring EL 表达式 ${} 和
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker 日志信息</title>
    <link href="http://blog.joylau.cn/2019/11/19/Docker-Logs/"/>
    <id>http://blog.joylau.cn/2019/11/19/Docker-Logs/</id>
    <published>2019-11-19T03:43:08.000Z</published>
    <updated>2019-11-19T16:01:04.205Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>docker 容器启动, 通过 docker logs -f container 可以实时查看日志</p><p>但是控制台输出的日志太多,会怎么样,容器里控制台输出的日志在宿主机什么位置?</p><p>有时容器输出太多,运行时间长了后,会把磁盘撑满…</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>docker 里容器的日志都属于标准输出（stdout）<br>每个 container 都是一个特殊的进程，由 docker daemon 创建并启动,docker daemon 来守护和管理</p><p>docker daemon 有一个默认的日志驱动程序，默认为json-file<br>json-file 会把所有容器的标准输出和标准错误以json格式写入文件中，这个文件每行记录一个标准输出或标准错误并用时间戳注释</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ol><li><p>vim /etc/docker/daemon.json</p></li><li><p>增加一条：{“log-driver”: “none”} （也可以添加{“log-opts”: {“max-size”: “10m” }} 来控制log文件的大小）</p></li><li><p>重新加载配置文件并重启docker服务: systemctl daemon-reload</p></li></ol><h2 id="查看日志位置"><a href="#查看日志位置" class="headerlink" title="查看日志位置"></a>查看日志位置</h2><ol><li>docker inspect container_id | grep log</li><li>进入上述目录</li><li>du -sh *</li></ol>]]></content>
    
    <summary type="html">
    
      docker 容器启动, 通过 docker logs -f container 可以实时查看日志,但是控制台输出的日志太多,会怎么样,容器里控制台输出的日志在宿主机什么位置?
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>gradle No cached version available for offline mode</title>
    <link href="http://blog.joylau.cn/2019/11/13/Gradle-Offline-Mode/"/>
    <id>http://blog.joylau.cn/2019/11/13/Gradle-Offline-Mode/</id>
    <published>2019-11-13T08:23:12.000Z</published>
    <updated>2019-11-13T16:01:05.956Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在 idea 以前的版本里,在 Preferences | Build, Execution, Deployment | Gradle 去掉勾选 Offline work 即可</p><p>但是在最新版 2019.2 里,需要点击 gradle 面板里最上面一排小扳手左边一个图标,取消离线模式 </p>]]></content>
    
    <summary type="html">
    
      gradle 添加新的依赖报错 No cached version available for offline mode
    
    </summary>
    
      <category term="Gradle篇" scheme="http://blog.joylau.cn/categories/Gradle%E7%AF%87/"/>
    
    
      <category term="Gradle" scheme="http://blog.joylau.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>PM2 集群模式使用 ES6 语法</title>
    <link href="http://blog.joylau.cn/2019/10/27/PM2-Cluster-ES6/"/>
    <id>http://blog.joylau.cn/2019/10/27/PM2-Cluster-ES6/</id>
    <published>2019-10-27T03:14:03.000Z</published>
    <updated>2019-10-26T16:01:04.097Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>fork 模式下</li></ol><ul><li>使用命令参数 <code>pm2 start app.js --node-args=&quot;--harmony&quot;</code></li><li>json 文件添加配置: <code>&quot;node_args&quot; : &quot;--harmony&quot;</code></li></ul><ol start="2"><li>cluster 模式下<br>使用上一篇的方法 <code>require(&quot;babel-register&quot;);</code><br>在更改配置:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"my_name"</span>,</span><br><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"./"</span>,</span><br><span class="line">      <span class="attr">"script"</span>: <span class="string">"bin/start"</span>,</span><br><span class="line">      <span class="attr">"instances"</span> : <span class="string">"max"</span>,</span><br><span class="line">      <span class="attr">"exec_mode"</span> : <span class="string">"cluster"</span>,</span><br><span class="line">      <span class="attr">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm Z"</span>,</span><br><span class="line">      <span class="attr">"error_file"</span>: <span class="string">"./logs/error.log"</span>,</span><br><span class="line">      <span class="attr">"watch"</span>: [<span class="string">"routes"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意:</p><ol><li>exec_mode 要改为 <code>cluster</code>, instances 为实例数, max 为 CPU 的核心数,</li><li>script 里配置的直接就是 js 文件,不需要加 node 命令(如 “script”: “node bin/start”) ,否则启动会报错,我踩过这个坑</li></ol>]]></content>
    
    <summary type="html">
    
      前面一篇介绍了 Nodejs 使用 ES6 的语法,本篇继续 PM2 使用 ES6 语法
    
    </summary>
    
      <category term="PM2篇" scheme="http://blog.joylau.cn/categories/PM2%E7%AF%87/"/>
    
    
      <category term="Nodejs" scheme="http://blog.joylau.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs 使用 ES6 语法</title>
    <link href="http://blog.joylau.cn/2019/10/26/Node-Use-ES6/"/>
    <id>http://blog.joylau.cn/2019/10/26/Node-Use-ES6/</id>
    <published>2019-10-26T07:44:30.000Z</published>
    <updated>2019-10-26T16:01:04.097Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>package.json 添加 </li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"babel": &#123;</span><br><span class="line">    "presets": [</span><br><span class="line">      <span class="string">"es2015"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">"devDependencies": &#123;</span><br><span class="line">    "babel-cli": "^6.26.0",</span><br><span class="line">    "babel-preset-es2015": "^6.24.1",</span><br><span class="line">    "babel-register": "^6.26.0"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>npm install</p></li><li><p>有 2 种方法可配置</p></li></ol><ul><li>第一种: 启动命令改为: <code>./node_modules/.bin/babel-node app.js</code></li><li>第二种: 在 app.js 头部里添加 <code>require(&quot;babel-register&quot;);</code></li></ul>]]></content>
    
    <summary type="html">
    
      Nodejs 本身并没有完全支持 ES6 的语法,想 import , export 都无法使用,这里简单一种简单的方式在 nodejs 里使用 es6 语法
    
    </summary>
    
      <category term="Node篇" scheme="http://blog.joylau.cn/categories/Node%E7%AF%87/"/>
    
    
      <category term="Nodejs" scheme="http://blog.joylau.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 升级到 5.x+ 之后遇到的问题记录</title>
    <link href="http://blog.joylau.cn/2019/09/28/Gradle-Update-5-Questions/"/>
    <id>http://blog.joylau.cn/2019/09/28/Gradle-Update-5-Questions/</id>
    <published>2019-09-28T03:59:46.000Z</published>
    <updated>2019-09-28T16:01:03.682Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="lombok-依赖编译报错"><a href="#lombok-依赖编译报错" class="headerlink" title="lombok 依赖编译报错"></a>lombok 依赖编译报错</h3><p>在gradle4.7以后对于加入依赖lombok方式发生变化，gradle4.7版本以前，可以直接如下引用：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">"org.projectlombok:lombok:1.18.2"</span>)或者compileOnly(<span class="string">"org.projectlombok:lombok:1.18.2"</span>)</span><br></pre></td></tr></table></figure><p>在gradle5.0这种方式会产生警告,在gradle5.0里面会直接报编译错误</p><p>有 2 中解决方式:</p><ol><li>官方推荐</li></ol><p>开发依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">annotationProcessor <span class="string">'org.projectlombok:lombok:1.18.2'</span></span><br><span class="line"></span><br><span class="line">compileOnly <span class="string">'org.projectlombok:lombok:1.18.2'</span></span><br></pre></td></tr></table></figure><p>测试依赖:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testAnnotationProcessor <span class="string">'org.projectlombok:lombok:1.18.2'</span></span><br><span class="line"></span><br><span class="line">testCompileOnly <span class="string">'org.projectlombok:lombok:1.18.2'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>gradle-lombok插件方式</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;                 </span><br><span class="line">  mavenCentral()          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugins &#123; </span><br><span class="line"> </span><br><span class="line">   id <span class="string">'net.ltgt.apt'</span> version <span class="string">'0.10'</span> </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  </span><br><span class="line">        compileOnly <span class="string">'org.projectlombok:lombok:1.18.2'</span></span><br><span class="line">        </span><br><span class="line">        apt <span class="string">"org.projectlombok:lombok:1.18.2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="log4j-报错"><a href="#log4j-报错" class="headerlink" title="log4j 报错"></a>log4j 报错</h3><p>错误信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Errors occurred <span class="keyword">while</span> build effective model from /Users/joylau/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.16/88efb1b8d3d993fe339e9e2b201c75eed57d4c65/log4j-1.2.16.pom:</span><br><span class="line"><span class="string">'build.plugins.plugin[io.spring.gradle.dependencymanagement.org.apache.maven.plugins:maven-antrun-plugin].dependencies.dependency.scope'</span> <span class="keyword">for</span> junit:junit:jar must be one of [compile, runtime, system] but is <span class="string">'test'</span>. <span class="keyword">in</span> log4j:log4j:1.2.16</span><br></pre></td></tr></table></figure></p><p>这是因为 Log4J 1.2.16 的 pom 中存在一个Bug。1.2.16 已经在 2010 年停止更新了<br>可以通过声明对 log4j：log4j：1.2.17 的显式依赖<br>或通过依赖关系管理确保使用 1.2.17 来解决</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"log4j:log4j:1.2.17"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      之前项目升级到 Gradle 5.2 版本后,出现了一点问题,现记录并解决如下
    
    </summary>
    
      <category term="Gradle篇" scheme="http://blog.joylau.cn/categories/Gradle%E7%AF%87/"/>
    
    
      <category term="Gradle" scheme="http://blog.joylau.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Docker --- Maridb 容器启动时初始化数据库</title>
    <link href="http://blog.joylau.cn/2019/09/23/Docker-Mariadb-InitDB/"/>
    <id>http://blog.joylau.cn/2019/09/23/Docker-Mariadb-InitDB/</id>
    <published>2019-09-23T09:43:01.000Z</published>
    <updated>2019-09-24T16:01:05.640Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="容器启动时初始化数据的方法"><a href="#容器启动时初始化数据的方法" class="headerlink" title="容器启动时初始化数据的方法"></a>容器启动时初始化数据的方法</h3><ol><li>编写好脚本,支持 .sql;.sh;.sql.gz</li><li>容器启动时, 将脚本挂载到容器的 <code>/docker-entrypoint-initdb.d</code> 目录下即可</li></ol><p>可就是这么简单的操作,我却没有成功…</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>该方法只在初始化数据库的时候起作用,意思是,当你想把 mariadb 的数据目录 <code>/var/lib/mysql</code> 挂载到本地盘上,那么 该目下有文件时,放置的脚本将不会执行</p>]]></content>
    
    <summary type="html">
    
      Maridb 容器启动时初始化数据库问题的记录
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="docker" scheme="http://blog.joylau.cn/tags/docker/"/>
    
      <category term="mariaDB" scheme="http://blog.joylau.cn/tags/mariaDB/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- 关于自动更新的一系列折腾</title>
    <link href="http://blog.joylau.cn/2019/09/16/Electron-AutoUpdater/"/>
    <id>http://blog.joylau.cn/2019/09/16/Electron-AutoUpdater/</id>
    <published>2019-09-16T01:00:12.000Z</published>
    <updated>2019-09-24T16:01:05.640Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Electron-自动更新的方法"><a href="#Electron-自动更新的方法" class="headerlink" title="Electron 自动更新的方法"></a>Electron 自动更新的方法</h3><ol><li>使用 Electron 自己提供的 autoUpdater 模块</li><li>使用更新服务器</li><li>自己实现自动更新逻辑</li></ol><p>为什么说经过了一系列的折腾呢, 因为前 2 中方式都没有解决我的问题,最后我是自己实现了自动更新的逻辑<br>没有解决我的问题是因为我需要兼顾到 mac 平台和 Windows 平台,然而 mac 平台比较麻烦,代码需要签名<br>我自己亲测方式一和方式二在 mac 平台上都需要代码签名, 而签名代码需要注册苹果开发者账号,需要付年费<br>于是这 2 条路就走不通了  </p><p>最后我决定自己实现更新的逻辑</p><h3 id="更新逻辑分析"><a href="#更新逻辑分析" class="headerlink" title="更新逻辑分析"></a>更新逻辑分析</h3><ol><li>自动触发或手动触发软件更新检查</li><li>服务器版本号大于本地版本才出现更新提示</li><li>对于更新,无非就是卸载之前的版本,安装新下载的安装包</li><li>软件的打包我选择的是 Electron Builder, 分别打成 dmg , setup.exe , app.zip</li><li>更新的时候先从服务器下载新版本</li><li>下载完成后对于安装包的安装分平台来说</li></ol><h3 id="Windows-下的更新"><a href="#Windows-下的更新" class="headerlink" title="Windows 下的更新"></a>Windows 下的更新</h3><ol><li>Windows 下的安装包是 exe 可执行文件,安装包本身是有处理逻辑在里面的</li><li>于是我们只需要将安装包下载到临时目录,然后再软件里打开它,再退出软件,剩下的安装步骤交给用户</li><li>有一点需要注意的是,NSIS 的新安装包在安装前会自动卸载掉之前的版本,不过不会提示用户,我们可以在 nsis 脚本里加一个提示</li></ol><h3 id="MacOS-下的更新"><a href="#MacOS-下的更新" class="headerlink" title="MacOS 下的更新"></a>MacOS 下的更新</h3><ol><li>相比于 Windows 下的安装包, macOS 下的 dmg 安装包就没有什么逻辑了,直接打开,然后将 app 文件拖到 Applications 目录中即可完成安装</li><li>于是有 2 中方法可选</li><li>一. 挂载 dmg, 找到挂载目录,在 mac 下是 /Volumes 目录下; 删除 /Applications 下的 app, 将 /Volumes 下的 app 拷贝到 /Applications 目录下; 再卸载 dmg; 重启应用即可,该方法可实现类似无缝更新的效果</li><li>二. 和方法一一个道理,只不过不是挂载 dmg 来查找 app, 直接解压 app.zip 压缩文件即可得到 app ,在使用相同的方式覆盖即可.</li></ol><h3 id="软件的版本控制"><a href="#软件的版本控制" class="headerlink" title="软件的版本控制"></a>软件的版本控制</h3><p>可以采取一个 json 文件来记录个版本的更新记录, 这里给个参考:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.1.0"</span>,</span><br><span class="line">    <span class="attr">"force"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"2019-09-14"</span>,</span><br><span class="line">    <span class="attr">"download"</span>: &#123;</span><br><span class="line">      <span class="attr">"winSetup"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"dmg"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"appZip"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"description"</span>: [</span><br><span class="line">      <span class="string">"1. 修复若干 BUG,稳定性提升"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"force"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"2019-09-01"</span>,</span><br><span class="line">    <span class="attr">"download"</span>: &#123;</span><br><span class="line">      <span class="attr">"winSetup"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"dmg"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"appZip"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"description"</span>: [</span><br><span class="line">      <span class="string">"1. 全新界面,主体功能完成"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"><span class="keyword">import</span> semver <span class="keyword">from</span> <span class="string">'semver'</span>;</span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> progress <span class="keyword">from</span> <span class="string">'request-progress'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//global.fs = require('fs');</span></span><br><span class="line"><span class="comment">//global.cp = require('child_process');</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">window</span>.fs;</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">window</span>.cp;</span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">window</span>.electron;</span><br><span class="line"><span class="keyword">const</span> &#123;app, shell&#125; = electron.remote;</span><br><span class="line"></span><br><span class="line">state = &#123;</span><br><span class="line">    check: <span class="literal">true</span>,</span><br><span class="line">    latest: &#123;&#125;,</span><br><span class="line">    <span class="comment">// wait,download,install,error</span></span><br><span class="line">    update: <span class="string">'wait'</span>,</span><br><span class="line">    downloadState: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查更新</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: appConfig.updateCheckURL,</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    cache:<span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> latest = data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(semver.satisfies(latest.version, <span class="string">'&gt;'</span> + app.getVersion()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (latest.force) &#123;</span><br><span class="line">                that.updateVersion();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, status</span>) </span>&#123;</span><br><span class="line">        that.setState(&#123;</span><br><span class="line">            check: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">updateVersion()&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> platform = osInfo.platform();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> downloadUrl = platform === <span class="string">'darwin'</span> ? <span class="keyword">this</span>.state.latest.download.dmg : platform === <span class="string">'win32'</span> ? <span class="keyword">this</span>.state.latest.download.winSetup : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (downloadUrl === <span class="string">''</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> downloadUrlArr = downloadUrl.split(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> filename = downloadUrlArr[downloadUrlArr.length<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> savePath = osInfo.tmpdir() + <span class="string">'/'</span> + filename;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> _request = request(downloadUrl);</span><br><span class="line">        progress(_request, &#123;</span><br><span class="line">            <span class="comment">// throttle: 2000,                    // Throttle the progress event to 2000ms, defaults to 1000ms</span></span><br><span class="line">            <span class="comment">// delay: 1000,                       // Only start to emit after 1000ms delay, defaults to 0ms</span></span><br><span class="line">            <span class="comment">// lengthHeader: 'x-transfer-length'  // Length header to use, defaults to content-length</span></span><br><span class="line">        &#125;)</span><br><span class="line">            .on(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// The state is an object that looks like this:</span></span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//     percent: 0.5,               // Overall percent (between 0 to 1)</span></span><br><span class="line">                <span class="comment">//     speed: 554732,              // The download speed in bytes/sec</span></span><br><span class="line">                <span class="comment">//     size: &#123;</span></span><br><span class="line">                <span class="comment">//         total: 90044871,        // The total payload size in bytes</span></span><br><span class="line">                <span class="comment">//         transferred: 27610959   // The transferred payload size in bytes</span></span><br><span class="line">                <span class="comment">//     &#125;,</span></span><br><span class="line">                <span class="comment">//     time: &#123;</span></span><br><span class="line">                <span class="comment">//         elapsed: 36.235,        // The total elapsed seconds since the start (3 decimals)</span></span><br><span class="line">                <span class="comment">//         remaining: 81.403       // The remaining seconds to finish (3 decimals)</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                that.setState(&#123;<span class="attr">downloadState</span>: state&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                that.setState(&#123;</span><br><span class="line">                    downloadState:&#123;</span><br><span class="line">                        error: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (that.state.update === <span class="string">'error'</span>) <span class="keyword">return</span>;</span><br><span class="line">                that.setState(&#123;</span><br><span class="line">                    update: <span class="string">'install'</span>,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (platform === <span class="string">'darwin'</span>)&#123;</span><br><span class="line">                        <span class="keyword">const</span> appName = pjson.build.productName;</span><br><span class="line">                        <span class="keyword">const</span> appVersion = app.getVersion();</span><br><span class="line">                        <span class="built_in">console</span>.info(appName,appVersion);</span><br><span class="line">                        <span class="comment">// 挂载</span></span><br><span class="line">                        cp.execSync(<span class="string">`hdiutil attach '<span class="subst">$&#123;savePath&#125;</span>' -nobrowse`</span>, &#123;</span><br><span class="line">                            stdio: [<span class="string">'ignore'</span>, <span class="string">'ignore'</span>, <span class="string">'ignore'</span>]</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 覆盖原 app</span></span><br><span class="line">                        cp.execSync(<span class="string">`rm -rf '/Applications/<span class="subst">$&#123;appName&#125;</span>.app' &amp;&amp; cp -R '/Volumes/<span class="subst">$&#123;appName&#125;</span> <span class="subst">$&#123;appVersion&#125;</span>/<span class="subst">$&#123;appName&#125;</span>.app' '/Applications/<span class="subst">$&#123;appName&#125;</span>.app'`</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 卸载挂载的 dmg</span></span><br><span class="line">                        cp.execSync(<span class="string">`hdiutil eject '/Volumes/<span class="subst">$&#123;appName&#125;</span> <span class="subst">$&#123;appVersion&#125;</span>'`</span>, &#123;</span><br><span class="line">                            stdio: [<span class="string">'ignore'</span>, <span class="string">'ignore'</span>, <span class="string">'ignore'</span>]</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 重启</span></span><br><span class="line">                        app.relaunch();</span><br><span class="line">                        app.quit();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">                        shell.openItem(savePath);</span><br><span class="line">                        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            app.quit();</span><br><span class="line">                        &#125;,<span class="number">1500</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">2000</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .pipe(fs.createWriteStream(savePath));</span><br><span class="line"></span><br><span class="line">        that.setState(&#123;<span class="attr">update</span>:<span class="string">'download'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(e);</span><br><span class="line">        that.setState(&#123;</span><br><span class="line">            update: <span class="string">'error'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于 Electron 自动更新的一系列折腾
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- Electron-Builder 打包的各种配置</title>
    <link href="http://blog.joylau.cn/2019/09/14/Electron-Electron-Builder/"/>
    <id>http://blog.joylau.cn/2019/09/14/Electron-Electron-Builder/</id>
    <published>2019-09-14T01:00:12.000Z</published>
    <updated>2019-09-24T16:01:05.640Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="打包的资源无法包含-build-目录"><a href="#打包的资源无法包含-build-目录" class="headerlink" title="打包的资源无法包含 build 目录"></a>打包的资源无法包含 build 目录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"files": [</span><br><span class="line">      "**/*",</span><br><span class="line">      "build/",</span><br><span class="line">      "!build/static/js/*.js.map",</span><br><span class="line">      <span class="string">"!src/"</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>同时该配置也可防止源码被打包进去,</p><h3 id="查看打包后的目录结构"><a href="#查看打包后的目录结构" class="headerlink" title="查看打包后的目录结构"></a>查看打包后的目录结构</h3><p><code>&quot;asar&quot;: false,</code> </p><h3 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a>引入外部文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"extraResources": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"from"</span>: <span class="string">"./LICENSE"</span>,</span><br><span class="line">        <span class="attr">"to"</span>: <span class="string">"./../LICENSE.txt"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h3 id="定义安装包输出目录"><a href="#定义安装包输出目录" class="headerlink" title="定义安装包输出目录"></a>定义安装包输出目录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"directories": &#123;</span><br><span class="line">  "output": "dist"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Windows-环境下打出-32-位和-64-位二合一包"><a href="#Windows-环境下打出-32-位和-64-位二合一包" class="headerlink" title="Windows 环境下打出 32 位和 64 位二合一包"></a>Windows 环境下打出 32 位和 64 位二合一包</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"win": &#123;</span><br><span class="line">  "target": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"nsis"</span>,</span><br><span class="line">      <span class="attr">"arch"</span>: [</span><br><span class="line">        <span class="string">"ia32"</span>,</span><br><span class="line">        <span class="string">"x64"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="打出的-mac-包写入数据到-Info-plist-文件"><a href="#打出的-mac-包写入数据到-Info-plist-文件" class="headerlink" title="打出的 mac 包写入数据到 Info.plist 文件"></a>打出的 mac 包写入数据到 Info.plist 文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"mac": &#123;</span><br><span class="line">  "extendInfo": &#123;</span><br><span class="line">    "URL types": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"URL identifier"</span>: <span class="string">"Joy Security"</span>,</span><br><span class="line">        <span class="attr">"URL Schemes"</span>: [</span><br><span class="line">          <span class="string">"joy-security"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="NSIS-配置"><a href="#NSIS-配置" class="headerlink" title="NSIS 配置"></a>NSIS 配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"nsis": &#123;</span><br><span class="line">  "oneClick": false, // 一键安装</span><br><span class="line">  "perMachine": true, // 为所有用户安装</span><br><span class="line">  "allowElevation": true, // 允许权限提升, 设置 false 的话需要重新允许安装程序</span><br><span class="line">  "allowToChangeInstallationDirectory": true, // 允许更改安装目录</span><br><span class="line">  "installerIcon": "./public/icons/win.ico",</span><br><span class="line">  "uninstallerIcon": "./public/icons/win_uninstall.ico",</span><br><span class="line">  "installerHeaderIcon": "./public/icons/win.ico",</span><br><span class="line">  "createDesktopShortcut": true,</span><br><span class="line">  "createStartMenuShortcut": true,</span><br><span class="line">  "shortcutName": "Joy Security",</span><br><span class="line">  "license": "./LICENSE",</span><br><span class="line">  "include": "./public/nsis/installer.nsh" // 包含的脚本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSIS-脚本"><a href="#NSIS-脚本" class="headerlink" title="NSIS 脚本"></a>NSIS 脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">!macro customHeader</span><br><span class="line"></span><br><span class="line">!macroend</span><br><span class="line"></span><br><span class="line">!macro preInit</span><br><span class="line"></span><br><span class="line">!macroend</span><br><span class="line"></span><br><span class="line">!macro customInit</span><br><span class="line">        # guid=7e51495b-3f4d-5235-aadd-5636863064f0</span><br><span class="line">        ReadRegStr $0 HKLM &quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\&#123;7e51495b-3f4d-5235-aadd-5636863064f0&#125;&quot; &quot;UninstallString&quot;</span><br><span class="line">        $&#123;If&#125; $0 != &quot;&quot;</span><br><span class="line">            MessageBox MB_ICONINFORMATION|MB_TOPMOST  &quot;检测到系统中已安装本程序，将卸载旧版本&quot; IDOK</span><br><span class="line">            # ExecWait $0 $1</span><br><span class="line">        $&#123;EndIf&#125;</span><br><span class="line">!macroend</span><br><span class="line"></span><br><span class="line">!macro customInstall</span><br><span class="line"></span><br><span class="line">!macroend</span><br><span class="line"></span><br><span class="line">!macro customInstallMode</span><br><span class="line">  # set $isForceMachineInstall or $isForceCurrentInstall</span><br><span class="line">  # to enforce one or the other modes.</span><br><span class="line">  #set $isForceMachineInstall</span><br><span class="line">!macroend</span><br></pre></td></tr></table></figure><h3 id="NSIS-引入-license-文件包含中文的问题"><a href="#NSIS-引入-license-文件包含中文的问题" class="headerlink" title="NSIS 引入 license 文件包含中文的问题"></a>NSIS 引入 license 文件包含中文的问题</h3><p>当引入的 license 文件里有中文时, 在 Windows (中文操作系统) 平台下打包需要 GBK 编码, 在 macOS 下,GBK 编码会直接报错,需要修改为 UTF-8 编码</p>]]></content>
    
    <summary type="html">
    
      Electron-Builder 打包的各种配置记录
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- Windows 和 MacOS 套娃图标的制作</title>
    <link href="http://blog.joylau.cn/2019/09/13/Electron-Icon-Icns/"/>
    <id>http://blog.joylau.cn/2019/09/13/Electron-Icon-Icns/</id>
    <published>2019-09-13T08:11:42.000Z</published>
    <updated>2019-09-16T06:33:04.875Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="什么是套娃图标"><a href="#什么是套娃图标" class="headerlink" title="什么是套娃图标"></a>什么是套娃图标</h3><p>可能见过一种套娃的玩具,就是一个大的套着一个小的,每一个玩具的形状颜色都一样,只是大小比例不一样,套娃图标也是这个意思</p><h3 id="什么工具"><a href="#什么工具" class="headerlink" title="什么工具"></a>什么工具</h3><p>需要这么一个工具, IconFX : <a href="http://nas.joylau.cn:5000/sharing/Y3xyQ0OJV" target="_blank" rel="noopener">下载</a></p><p><img src="http://image.joylau.cn/blog/Electron-icon-icns-iconfx.png.png" alt="IconFX"></p><p>制做一组至少有 256<em>256 (此外还有 128</em>128 , 96<em>96, 64</em>64, 48<em>48,32</em>32,16*16)的一套图标, Windows 下格式为 icon, Mac 下格式为 icns</p><h3 id="怎么制作"><a href="#怎么制作" class="headerlink" title="怎么制作"></a>怎么制作</h3><p>使用 PS 制作一张图片或者下载一张图片,按照下面的步骤完成所有大小的图标创建,之后保存.</p><p>图像 — 从图像创建 Windows 图标</p><p><img src="http://image.joylau.cn/blog/Electron-icon-icns-iconfx-make.png" alt="IconFX-make"></p><p>MacOS 也是同样的道理</p>]]></content>
    
    <summary type="html">
    
      Electron Windows 和 MacOS 套娃图标的制作
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- 在 Windows 下和在 MacOS 下 Scheme 协议的使用</title>
    <link href="http://blog.joylau.cn/2019/09/12/Electron-URL-Scheme/"/>
    <id>http://blog.joylau.cn/2019/09/12/Electron-URL-Scheme/</id>
    <published>2019-09-12T03:21:12.000Z</published>
    <updated>2019-09-24T16:01:05.640Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="什么是-URL-Scheme-协议"><a href="#什么是-URL-Scheme-协议" class="headerlink" title="什么是 URL Scheme 协议"></a>什么是 URL Scheme 协议</h3><p>个人理解为注册一种协议来实现应用间的跳转</p><h3 id="Windows-上的实现"><a href="#Windows-上的实现" class="headerlink" title="Windows 上的实现"></a>Windows 上的实现</h3><p>Windows 上是通过注册表实现的</p><p>通过在 HKCR (HKEY_CALSSES_ROOT) 添加一条注册表记录</p><p><img src="http://image.joylau.cn/blog/Electron-URL-Scheme-win.png" alt="Win Registry"></p><p>其中 command 的命令即为要执行的命令,注意后面要加一个参数 <code>&quot;%1&quot;</code></p><h3 id="Mac-上的实现"><a href="#Mac-上的实现" class="headerlink" title="Mac 上的实现"></a>Mac 上的实现</h3><p>在应用里显示包内容,使用 xcode 查看 Info.plist 找到 URL types – URL Schemes 里添加一项</p><p><img src="http://image.joylau.cn/blog/Electron-URL-Scheme-mac.png" alt="Mac Info.plist"></p><h3 id="Electron-的实现"><a href="#Electron-的实现" class="headerlink" title="Electron 的实现"></a>Electron 的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.setAsDefaultProtocolClient(PROTOCOL, process.execPath, [<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>`</span>]);</span><br></pre></td></tr></table></figure><p>这一句话即可完成 Windows 下和 macOS 下的协议注册,只不过需要应用启动后才可注册成功,就是说如果安装过后不打开的话,无法通过协议来唤醒应用,解决方式我们后面再讲</p><p>第一个参数为协议的名称, 第二个参数为执行的命令,第三个参数为所传字符串参数数组</p><p>在 Windows 环境下最后一项需要带上当前的项目路径,否则的话在开发模式下会打不开 electron 应用,打包完成后不会存在这个问题, mac 上也不会存在这个问题</p><h3 id="Electron-上协议参数的处理"><a href="#Electron-上协议参数的处理" class="headerlink" title="Electron 上协议参数的处理"></a>Electron 上协议参数的处理</h3><p>参数的处理分 2 中情况</p><ol><li>新打开的窗口</li><li>打开的第二个实例</li></ol><p>对于新打开的窗口:<br>使用 <code>let argv = process.argv;</code> 来获取进程参数,得到的是一个数组,如果做够一项包含我们的协议,则需要根据自己的字符串规则来进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> argv = process.argv;</span><br><span class="line"><span class="keyword">if</span> (argv[argv.length - <span class="number">1</span>].indexOf(PROTOCOL + <span class="string">"://"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于打开的第二个实例:<br>windows 上监听的事件是 <code>second-instance</code>, mac 上监听的事件是 <code>open-url</code>, 2 个事件传入参数还不一样, Windows 下传入的参数是字符串数组,mac 传入的参数是字符串,都包含了协议名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">'second-instance'</span>, (event, commandLine, workingDirectory) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当运行第二个实例时,主动对焦</span></span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        <span class="keyword">if</span> (win.isMinimized()) win.restore();</span><br><span class="line">        win.focus();</span><br><span class="line">        win.show();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> message = handleArgv(commandLine);</span><br><span class="line">        processSend(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// macOS</span></span><br><span class="line">app.on(<span class="string">'open-url'</span>, (event, urlStr) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        win.showInactive();</span><br><span class="line">        <span class="keyword">let</span> message = handleArgv(urlStr);</span><br><span class="line">        processSend(message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        global.shareObject.message = handleArgv(urlStr);</span><br><span class="line">        global.shareObject.isSend = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processSend</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    global.shareObject.message = message;</span><br><span class="line">    win.webContents.send(<span class="string">'ch-1'</span>, <span class="string">'send'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleArgv</span>(<span class="params">argv</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> urlObj = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(argv)) &#123;</span><br><span class="line">        urlObj = argv[argv.length - <span class="number">1</span>].replace(PROTOCOL + <span class="string">"://"</span>, <span class="string">""</span>).split(<span class="string">"_"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        urlObj = argv.replace(PROTOCOL + <span class="string">"://"</span>, <span class="string">""</span>).split(<span class="string">"_"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urlObj.length &gt;= <span class="number">2</span> ? &#123;<span class="attr">sessionId</span>: urlObj[<span class="number">0</span>], <span class="attr">url</span>: urlObj[<span class="number">1</span>], <span class="attr">macInfo</span>: os.networkInterfaces()&#125; : &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器判断-scheme-协议是否存在"><a href="#浏览器判断-scheme-协议是否存在" class="headerlink" title="浏览器判断 scheme 协议是否存在"></a>浏览器判断 scheme 协议是否存在</h3><p>使用 setTimeout, 如果超时未打开的话则说明协议不存在 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> downloadURL = <span class="string">"http://xxxx"</span>;</span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">"joy-security://xxxxxx_xxxxxxx"</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.location = downloadURL;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Electron Scheme 协议的使用
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- 知识点小记</title>
    <link href="http://blog.joylau.cn/2019/09/11/Electron-Questions/"/>
    <id>http://blog.joylau.cn/2019/09/11/Electron-Questions/</id>
    <published>2019-09-11T10:11:32.000Z</published>
    <updated>2019-09-12T16:01:05.650Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Electron-只启动一个实例"><a href="#Electron-只启动一个实例" class="headerlink" title="Electron 只启动一个实例"></a>Electron 只启动一个实例</h3><p>使用 app.requestSingleInstanceLock()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gotTheLock = app.requestSingleInstanceLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!gotTheLock) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    app.on(<span class="string">'ready'</span>, createWindow);</span><br><span class="line"></span><br><span class="line">    app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (win == <span class="literal">null</span>) &#123;</span><br><span class="line">            createWindow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Electron-不显示菜单栏"><a href="#Electron-不显示菜单栏" class="headerlink" title="Electron 不显示菜单栏"></a>Electron 不显示菜单栏</h3><p>经过实测<br><code>Menu.setApplicationMenu(null);</code><br>在 Windows 环境下没有菜单栏, 在 MAC 系统上开发模式下有菜单栏</p><p>正确的解决方式是<br><code>Menu.setApplicationMenu(Menu.buildFromTemplate([]));</code></p><h3 id="注册快捷键"><a href="#注册快捷键" class="headerlink" title="注册快捷键"></a>注册快捷键</h3><p>electron 自带的注册快捷键的功能函数是 globalShortcut, 这个是全局的快捷键,就是说焦点不在当前程序上也能触发快捷键<br>我这里使用的是一个第三方的组件 electron-localshortcut</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">electronLocalshortcut.register(win, <span class="string">'F12'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    win.webContents.isDevToolsOpened() ? win.webContents.closeDevTools() : win.webContents.openDevTools();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">electronLocalshortcut.register(win, <span class="string">'F5'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    win.reload();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="主线程和渲染线程之间的通信"><a href="#主线程和渲染线程之间的通信" class="headerlink" title="主线程和渲染线程之间的通信"></a>主线程和渲染线程之间的通信</h3><p>这里使用的是 ipcMain 和 ipcRenderer<br>渲染进程使用ipcRenderer.send发送异步消息，然后使用on事件监控主进程的返回值。主进程使用on事件监听消息，使用event.sender.send返回数据</p><p>App.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcRenderer.send(<span class="string">'asynchronous-message'</span>, <span class="string">'ping'</span>)</span><br><span class="line">ipcRenderer.on(<span class="string">'asynchronous-reply'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(arg) <span class="comment">// prints "pong"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcMain.on(<span class="string">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg)  <span class="comment">// prints "ping"</span></span><br><span class="line">  event.sender.send(<span class="string">'asynchronous-reply'</span>, <span class="string">'pong'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>渲染进程使用ipcRenderer.sendSync发送同步消息。主进程使用on事件监控消息，使用event.returnValue返回数据给渲染进程。返回值在渲染进程中，就直接体现为ipcRenderer.sendSync的函数返回值</p><h3 id="主线程如何给渲染线程发送消息"><a href="#主线程如何给渲染线程发送消息" class="headerlink" title="主线程如何给渲染线程发送消息"></a>主线程如何给渲染线程发送消息</h3><p>上面的示例没有说主线程如何对小渲染线程发送消息,应该这样做:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.webContents.send(<span class="string">'ch-1'</span>, <span class="string">'send'</span>);</span><br></pre></td></tr></table></figure><h3 id="渲染进程和渲染进程如何互发消息"><a href="#渲染进程和渲染进程如何互发消息" class="headerlink" title="渲染进程和渲染进程如何互发消息"></a>渲染进程和渲染进程如何互发消息</h3><ol><li>渲染进程的页面自己处理</li><li>通过主线程进行中间转换</li></ol><h3 id="渲染线程如何使用-electron-的功能"><a href="#渲染线程如何使用-electron-的功能" class="headerlink" title="渲染线程如何使用 electron 的功能"></a>渲染线程如何使用 electron 的功能</h3><p>渲染窗口添加配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: &#123;</span><br><span class="line">    nodeIntegration: <span class="literal">true</span>, <span class="comment">// 开启 node 功能</span></span><br><span class="line">    preload: path.join(__dirname, <span class="string">'./public/renderer.js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 renderer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.electron = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br></pre></td></tr></table></figure><p>渲染进程的页面使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">window</span>.electron;</span><br><span class="line">electron.xxxx</span><br></pre></td></tr></table></figure><h3 id="主线程和渲染进程如何共享对象"><a href="#主线程和渲染进程如何共享对象" class="headerlink" title="主线程和渲染进程如何共享对象"></a>主线程和渲染进程如何共享对象</h3><p>不需要引入任何包,直接在主线程使用 global</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共享对象</span></span><br><span class="line">global.shareObject = &#123;</span><br><span class="line">    osInfo: os</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>渲染进程获取信息: let osInfo = electron.remote.getGlobal(‘shareObject’).osInfo;</p><p>主线程修改对象: global.shareObject.osInfo = message;</p><p>渲染线程修改对象: electron.remote.getGlobal(‘shareObject’).osInfo = null;</p><h3 id="区分开发模式还是生产模式"><a href="#区分开发模式还是生产模式" class="headerlink" title="区分开发模式还是生产模式"></a>区分开发模式还是生产模式</h3><p>建议使用 <code>app.isPackaged</code></p><h3 id="通过协议打开第二个实例的情况下触发的事件"><a href="#通过协议打开第二个实例的情况下触发的事件" class="headerlink" title="通过协议打开第二个实例的情况下触发的事件"></a>通过协议打开第二个实例的情况下触发的事件</h3><p>Windows 环境下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">'second-instance'</span>, (event, commandLine, workingDirectory) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当运行第二个实例时,主动对焦</span></span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        <span class="keyword">if</span> (win.isMinimized()) win.restore();</span><br><span class="line">        win.focus();</span><br><span class="line">        win.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Mac 环境下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// macOS</span></span><br><span class="line">app.on(<span class="string">'open-url'</span>, (event, urlStr) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">        win.showInactive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="开发环境和生成环境加载不同的页面"><a href="#开发环境和生成环境加载不同的页面" class="headerlink" title="开发环境和生成环境加载不同的页面"></a>开发环境和生成环境加载不同的页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (app.isPackaged) &#123;</span><br><span class="line">    win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/build/index.html`</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    win.loadURL(<span class="string">'http://localhost:3000'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Electron 平时使用过程中遇到的问题小记
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Create-React-App 的一些配置</title>
    <link href="http://blog.joylau.cn/2019/09/10/React-Create-React-App/"/>
    <id>http://blog.joylau.cn/2019/09/10/React-Create-React-App/</id>
    <published>2019-09-10T08:52:54.000Z</published>
    <updated>2019-09-24T16:01:05.640Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="添加多页面配置"><a href="#添加多页面配置" class="headerlink" title="添加多页面配置"></a>添加多页面配置</h3><ol><li><code>npm run eject</code></li><li>修改 webpack.config.js</li></ol><p>entry 修改:<br>这里我加了一个 update.html 页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  index: [</span><br><span class="line">    <span class="comment">// Include an alternative client for WebpackDevServer. A client's job is to</span></span><br><span class="line">    <span class="comment">// connect to WebpackDevServer by a socket and get notified about changes.</span></span><br><span class="line">    <span class="comment">// When you save a file, the client will either apply hot updates (in case</span></span><br><span class="line">    <span class="comment">// of CSS changes), or refresh the page (in case of JS changes). When you</span></span><br><span class="line">    <span class="comment">// make a syntax error, this client will display a syntax error overlay.</span></span><br><span class="line">    <span class="comment">// Note: instead of the default WebpackDevServer client, we use a custom one</span></span><br><span class="line">    <span class="comment">// to bring better experience for Create React App users. You can replace</span></span><br><span class="line">    <span class="comment">// the line below with these two lines if you prefer the stock client:</span></span><br><span class="line">    <span class="comment">// require.resolve('webpack-dev-server/client') + '?/',</span></span><br><span class="line">    <span class="comment">// require.resolve('webpack/hot/dev-server'),</span></span><br><span class="line">    isEnvDevelopment &amp;&amp;</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'react-dev-utils/webpackHotDevClient'</span>),</span><br><span class="line">    <span class="comment">// Finally, this is your app's code:</span></span><br><span class="line">    paths.appIndexJs,</span><br><span class="line">    <span class="comment">// We include the app code last so that if there is a runtime error during</span></span><br><span class="line">    <span class="comment">// initialization, it doesn't blow up the WebpackDevServer client, and</span></span><br><span class="line">    <span class="comment">// changing JS code would still trigger a refresh.</span></span><br><span class="line">  ].filter(<span class="built_in">Boolean</span>),</span><br><span class="line">  update: [</span><br><span class="line">    isEnvDevelopment &amp;&amp;</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'react-dev-utils/webpackHotDevClient'</span>),</span><br><span class="line">    paths.appSrc + <span class="string">'/update.js'</span>,</span><br><span class="line">  ].filter(<span class="built_in">Boolean</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>output 修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">      <span class="comment">// The build folder.</span></span><br><span class="line">      path: isEnvProduction ? paths.appBuild : <span class="literal">undefined</span>,</span><br><span class="line">      <span class="comment">// Add /* filename */ comments to generated require()s in the output.</span></span><br><span class="line">      pathinfo: isEnvDevelopment,</span><br><span class="line">      <span class="comment">// There will be one main bundle, and one file per asynchronous chunk.</span></span><br><span class="line">      <span class="comment">// In development, it does not produce real files.</span></span><br><span class="line">      filename: isEnvProduction</span><br><span class="line">        ? <span class="string">'static/js/[name].[contenthash:8].js'</span></span><br><span class="line">        : isEnvDevelopment &amp;&amp; <span class="string">'static/js/[name]bundle.js'</span>,</span><br><span class="line">      <span class="comment">// There are also additional JS chunk files if you use code splitting.</span></span><br><span class="line">      chunkFilename: isEnvProduction</span><br><span class="line">        ? <span class="string">'static/js/[name].[contenthash:8].chunk.js'</span></span><br><span class="line">        : isEnvDevelopment &amp;&amp; <span class="string">'static/js/[name].chunk.js'</span>,</span><br><span class="line">      <span class="comment">// We inferred the "public path" (such as / or /my-project) from homepage.</span></span><br><span class="line">      <span class="comment">// We use "/" in development.</span></span><br><span class="line">      publicPath: publicPath,</span><br><span class="line">      <span class="comment">// Point sourcemap entries to original disk location (format as URL on Windows)</span></span><br><span class="line">      devtoolModuleFilenameTemplate: isEnvProduction</span><br><span class="line">        ? <span class="function"><span class="params">info</span> =&gt;</span></span><br><span class="line">            path</span><br><span class="line">              .relative(paths.appSrc, info.absoluteResourcePath)</span><br><span class="line">              .replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>)</span><br><span class="line">        : isEnvDevelopment &amp;&amp;</span><br><span class="line">          (<span class="function"><span class="params">info</span> =&gt;</span> path.resolve(info.absoluteResourcePath).replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>)),</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>注意修改其中的 filename</p><p>HtmlWebpackPlugin 修改:<br>新增一个 HtmlWebpackPlugin </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">        <span class="built_in">Object</span>.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            template: paths.appHtml,</span><br><span class="line">            chunks: [<span class="string">"index"</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          isEnvProduction</span><br><span class="line">            ? &#123;</span><br><span class="line">                minify: &#123;</span><br><span class="line">                  removeComments: <span class="literal">true</span>,</span><br><span class="line">                  collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                  removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">                  useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">                  removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">                  removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">                  keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">                  minifyJS: <span class="literal">true</span>,</span><br><span class="line">                  minifyCSS: <span class="literal">true</span>,</span><br><span class="line">                  minifyURLs: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">            : <span class="literal">undefined</span></span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">          <span class="built_in">Object</span>.assign(</span><br><span class="line">              &#123;&#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                inject: <span class="literal">true</span>,</span><br><span class="line">                template: paths.appHtml,</span><br><span class="line">                chunks: [<span class="string">"update"</span>],</span><br><span class="line">                filename: <span class="string">"update.html"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              isEnvProduction</span><br><span class="line">                  ? &#123;</span><br><span class="line">                    minify: &#123;</span><br><span class="line">                      removeComments: <span class="literal">true</span>,</span><br><span class="line">                      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                      removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">                      useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">                      removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">                      removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">                      keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">                      minifyJS: <span class="literal">true</span>,</span><br><span class="line">                      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">                      minifyURLs: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  &#125;</span><br><span class="line">                  : <span class="literal">undefined</span></span><br><span class="line">          )</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure><p>在 public 目录里添加 update.html, 内容照抄 index.html 文件即可;<br>在 src 目录下添加 update.js 文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Update <span class="keyword">from</span> <span class="string">'./page/Update'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">'./serviceWorker'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Update</span> /&gt;</span>, document.getElementById('root'));</span></span><br><span class="line"><span class="xml">serviceWorker.register();</span></span><br></pre></td></tr></table></figure><p>之后, <a href="http://localhost:3000/update.html" target="_blank" rel="noopener">http://localhost:3000/update.html</a> 即可访问; 如果想加个路径,直接修改 HtmlWebpackPlugin 里的 filename, 例如 <code>filename: &quot;index/update.html&quot;</code><br>就可以 使用 <a href="http://localhost:3000/index/update.html" target="_blank" rel="noopener">http://localhost:3000/index/update.html</a> 来访问</p><h3 id="引入-src-目录以外的文件报错"><a href="#引入-src-目录以外的文件报错" class="headerlink" title="引入 src 目录以外的文件报错"></a>引入 src 目录以外的文件报错</h3><p>例如需要引入 public 目录下的图片,就会报错,此时,注释掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson]),</span></span><br></pre></td></tr></table></figure><p>这一行,重启即可.</p>]]></content>
    
    <summary type="html">
    
      Create-React-App 创建的项目的一些配置记录
    
    </summary>
    
      <category term="React篇" scheme="http://blog.joylau.cn/categories/React%E7%AF%87/"/>
    
    
      <category term="react" scheme="http://blog.joylau.cn/tags/react/"/>
    
      <category term="webpack" scheme="http://blog.joylau.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Electron --- Create-React-App + Antd + Electron 的搭建</title>
    <link href="http://blog.joylau.cn/2019/09/10/Electron-Create-React-App/"/>
    <id>http://blog.joylau.cn/2019/09/10/Electron-Create-React-App/</id>
    <published>2019-09-10T08:41:30.000Z</published>
    <updated>2019-09-12T16:01:05.650Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建-create-react-app-antd-项目"><a href="#创建-create-react-app-antd-项目" class="headerlink" title="创建 create-react-app-antd 项目"></a>创建 create-react-app-antd 项目</h3><ol><li>git clone <a href="https://github.com/ant-design/create-react-app-antd" target="_blank" rel="noopener">https://github.com/ant-design/create-react-app-antd</a></li><li>npm install</li><li>将 webpack 所有内建的配置暴露出来, <code>npm run eject</code>, 如果发现错误,看下 package.json 里 eject 的脚本是不是为 <code>react-scripts eject</code></li><li>修改 config-overrides.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>修改 webpack.config.js 里的 <code>module.rules.oneOf</code> 支持 css 和 less, 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'less-loader'</span>),</span><br><span class="line">      options: &#123; <span class="attr">javascriptEnabled</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 start.js 注释掉下面代码关闭项目启动自动打开浏览器</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openBrowser(urls.localUrlForBrowser);</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>package.json 添加 <code>&quot;homepage&quot;: &quot;.&quot;</code> ,防止打包后的静态文件 index.html 引入 css 和 js 的路径错误</p></li><li><p>App.less 修改为 <code>@import &#39;~antd/dist/antd.less&#39;;</code></p></li></ol><h3 id="添加-electron"><a href="#添加-electron" class="headerlink" title="添加 electron"></a>添加 electron</h3><ol><li>package.json 添加 <code>&quot;main&quot;: &quot;main.js&quot;,</code> 和 electron 依赖</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"electron"</span>: <span class="string">"^6.0.7"</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 main.js,添加以下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow, Menu&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> windowConfig = &#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    title: <span class="string">"Joy Security"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> menuTemplate = [&#123;</span><br><span class="line">    label: <span class="string">'Joy Security'</span>,</span><br><span class="line">    submenu: [&#123;</span><br><span class="line">        label: <span class="string">'退出'</span>,</span><br><span class="line">        role: <span class="string">'quit'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        label: <span class="string">`关于 <span class="subst">$&#123;windowConfig.title&#125;</span>`</span>,</span><br><span class="line">        role: <span class="string">'about'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    app.quit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (win == <span class="literal">null</span>) &#123;</span><br><span class="line">        createWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 隐藏菜单栏,兼容 MAC</span></span><br><span class="line">    Menu.setApplicationMenu(Menu.buildFromTemplate([]));</span><br><span class="line"></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(windowConfig);</span><br><span class="line"></span><br><span class="line">    win.loadURL(<span class="string">'http://localhost:3000'</span>);</span><br><span class="line"></span><br><span class="line">    win.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//回收BrowserWindow对象</span></span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.on(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// win.reload();</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>package.json 更改脚本</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"react-start"</span>: <span class="string">"node scripts/start.js"</span>,</span><br><span class="line">    <span class="attr">"eletron-start"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">    <span class="attr">"react-build"</span>: <span class="string">"node scripts/build.js"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动时先 react-start 再 eletron-start 即可看到效果</li></ol>]]></content>
    
    <summary type="html">
    
      Create-React-App + Antd + Electron 项目的搭建
    
    </summary>
    
      <category term="Electron篇" scheme="http://blog.joylau.cn/categories/Electron%E7%AF%87/"/>
    
    
      <category term="Electron" scheme="http://blog.joylau.cn/tags/Electron/"/>
    
      <category term="React" scheme="http://blog.joylau.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>群晖系列 --- 添加私有仓库无法下载镜像问题的解决</title>
    <link href="http://blog.joylau.cn/2019/09/09/Synology-Docker-Insecure/"/>
    <id>http://blog.joylau.cn/2019/09/09/Synology-Docker-Insecure/</id>
    <published>2019-09-09T04:45:26.000Z</published>
    <updated>2019-09-12T16:01:05.650Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在群晖的 Docker 组件里添加了个人的私有仓库,发现却无法下载镜像….</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在 Docker 组件里添加新的仓库,并设置为使用仓库,发现在仓库里下载镜像总是失败,状态栏提示查看日志,可是在日志里总看不到东西</p><p>想了想,可能是新添加的 docker 私服是 http 的服务,而不是 https</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li>于是我使用 GateOne 组件进入 shell </li><li>使用命令 docker pull xxx:xxx, 发现报错 <code>Get https://172.18.18.90:5000/v2/: http: server gave HTTP response to HTTPS client</code> , 果然是这个问题</li><li>于是找到 Docker 组件的配置文件目录,在 <code>/var/packages/Docker/etc</code> 目录下,添加配置文件 daemon.json </li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"insecure-registries"</span>: [<span class="string">"domain:5000"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重启 Docker 组件, 发现不起作用,在命令行下 pull 依然报错,可想配置文件错了</li><li>转眼看到一个可疑的配置文件 <code>dockerd.json</code>, 里面已经有一些配置了,于是就把配置写到这个里面</li><li>再重启,问题解决.可见群晖对于 docker 是做了一些改变的.</li></ol>]]></content>
    
    <summary type="html">
    
      在群晖的 Docker 组件里添加了个人的私有仓库,发现却无法下载镜像....
    
    </summary>
    
      <category term="群晖篇" scheme="http://blog.joylau.cn/categories/%E7%BE%A4%E6%99%96%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="群晖" scheme="http://blog.joylau.cn/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>InnoSetup --- 使用心得记录</title>
    <link href="http://blog.joylau.cn/2019/09/04/InnoSetup-Experience/"/>
    <id>http://blog.joylau.cn/2019/09/04/InnoSetup-Experience/</id>
    <published>2019-09-04T01:08:13.000Z</published>
    <updated>2019-09-04T01:28:20.033Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="添加环境变量【Registry】"><a href="#添加环境变量【Registry】" class="headerlink" title="添加环境变量【Registry】"></a>添加环境变量【Registry】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Registry]</span><br><span class="line">Root: HKCR; Subkey: &quot;JOY-SECURITY&quot;; ValueType: string; ValueData: &quot;URL:JOY-SECURITY Protocol Handler&quot;; Flags: uninsdeletekey</span><br></pre></td></tr></table></figure><h3 id="Root-必需的"><a href="#Root-必需的" class="headerlink" title="Root  (必需的)"></a>Root  (必需的)</h3><p>根键。必须是下列值中的一个:</p><p>HKCR  (HKEY_CLASSES_ROOT)<br>HKCU  (HKEY_CURRENT_USER)<br>HKLM  (HKEY_LOCAL_MACHINE)<br>HKU  (HKEY_USERS)<br>HKCC  (HKEY_CURRENT_CONFIG) </p><h3 id="Subkey-必需的"><a href="#Subkey-必需的" class="headerlink" title="Subkey  (必需的)"></a>Subkey  (必需的)</h3><p>子键名，可以包含常量。</p><h3 id="ValueType"><a href="#ValueType" class="headerlink" title="ValueType"></a>ValueType</h3><p>值的数据类型。必须是下面中的一个:</p><p>none<br>string<br>expandsz<br>multisz<br>dword<br>qword<br>binary </p><p>如果指定了 none (默认设置)，安装程序将创建一个没有键值的键，在这种情况下，ValueData 参数将被忽略。<br>如果指定了 string，安装程序将创建一个字符串 (REG_SZ) 值。<br>如果指定了 expandsz，安装程序将创建一个扩展字符串 (REG_EXPAND_SZ) 值。<br>如果指定了 multisz，安装程序将创建一个多行文本 (REG_MULTI_SZ) 值。<br>如果指定了 dword，安装程序将创建一个32位整数 (REG_DWORD) 值。<br>如果指定了 qdword，安装程序将创建一个64位整数 (REG_QDWORD) 值。<br>如果指定了 binary，安装程序将创建一个二进制 (REG_BINARY) 值。</p><h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><p>这个参数是额外选项设置。多个选项可以使用空格隔开。支持下面的选项:</p><p>createvalueifdoesntexist<br>当指定了这个标记，安装程序只在如果没有相同名字的值存在时创建值。如果值类型是 none，或如果你指定了 deletevalue 标记，这个标记无效。</p><p>deletekey<br>当指定了这个标记，安装程序在如果条目存在的情况下，先将尝试删除它，包括其中的所有值和子键。如果 ValueType 不是 none，那么它将创建一个新的键和值。</p><p>要防止意外，如果 Subkey 是空白的或只包含反斜框符号，安装时这个标记被忽略。</p><p>deletevalue<br>当指定了这个标记，安装程序在如果值存在的情况下，先将尝试删除值，如果 ValueType 是 none，那么在键不存在的情况下，它将创建键以及新值。</p><p>dontcreatekey<br>当指定了这个标记，如果键已经在用户系统中不存在，安装程序将不尝试创建键或值。如果键不存在，不显示错误消息。</p><p>一般来说，这个键与 uninsdeletekey 标记组合使用，在卸载时删除键，但安装时不创建键。</p><p>noerror<br>如果安装程序因任何原因创建键或值失败，不显示错误消息。</p><p>preservestringtype<br>这只在当 ValueType 参数是 string 或 expandsz 时适用。当指定这个标记，并且值不存在或现有的值不是 string 类型 (REG_SZ 或 REG_EXPAND_SZ)，它将用 ValueType 指定的类型创建。如果值存在，并且是 string 类型，它将用先存在值的相同值类型替换。</p><p>uninsclearvalue<br>当卸载程序时，设置值数据为空字符 (类型 REG_SZ)。这个标记不能与 uninsdeletekey 标记组合使用。</p><p>uninsdeletekey<br>当卸载程序时，删除整个键，包含其中的所有值和子键。这对于 Windows 自身使用的键明显不是一个好方法。你只能用于你的应用程序特有的键中。</p><p>为防止意外，安装期间如果 Subkey 空白或只包含反斜框符号，这个标记被忽略。</p><p>uninsdeletekeyifempty<br>当程序卸载时，如果这个键的内部没有值或子键，则删除这个键。这个标记可以与 uninsdeletevalue 组合使用</p><p>为防止意外，安装期间如果 Subkey 空白或只包含反斜框符号，这个标记被忽略。</p><p>uninsdeletevalue<br>当程序卸载时删除该值。这个标记不能与 uninsdeletekeyifempty 组合使用</p><p>注意: 在早于 1.1 的 Inno Setup 版本中，你可以使用这个标记连同数据类型 none，那么它的功能与“如果空则删除键”标记一样。这个方法已经不支持了。你必须使用 uninsdeletekeyifempty 标记实现。</p><h2 id="添加环境变量【Code】"><a href="#添加环境变量【Code】" class="headerlink" title="添加环境变量【Code】"></a>添加环境变量【Code】</h2><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加环境变量</span></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">CurStepChanged</span><span class="params">(CurStep: TSetupStep)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">oldpath:<span class="keyword">String</span>;</span><br><span class="line">newpath:<span class="keyword">String</span>;</span><br><span class="line">ErrorCode: Integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> CurStep = ssPostInstall <span class="keyword">then</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   RegQueryStringValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'Path'</span>, oldPath);</span><br><span class="line">   newPath := oldPath + <span class="string">';%JAVA_HOME%\bin\;'</span>;</span><br><span class="line">   RegWriteStringValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'PATH'</span>, newPath);</span><br><span class="line">   RegWriteStringValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'JAVA_HOME'</span>, ExpandConstant(<span class="string">'&#123;app&#125;\java\jdk1.8.0_45'</span>));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>添加环境变量后记得在 setup 中配置 <code>ChangesEnvironment=yes</code> 通知其他应用程序从注册表重新获取环境变量</p><h2 id="删除环境变量【Code】"><a href="#删除环境变量【Code】" class="headerlink" title="删除环境变量【Code】"></a>删除环境变量【Code】</h2><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">CurUninstallStepChanged</span><span class="params">(CurUninstallStep: TUninstallStep)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">oldpath:<span class="keyword">String</span>;</span><br><span class="line">newpath:<span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> CurUninstallStep = usDone <span class="keyword">then</span></span><br><span class="line">   RegDeleteValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'JAVA_HOME'</span>);</span><br><span class="line">   RegQueryStringValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'Path'</span>, oldPath);</span><br><span class="line">   StringChangeEx(oldPath, <span class="string">';%JAVA_HOME%\bin\;'</span>, <span class="string">''</span>, True);</span><br><span class="line">   newPath := oldPath;</span><br><span class="line">   RegWriteStringValue(HKEY_LOCAL_MACHINE, <span class="string">'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'</span>, <span class="string">'PATH'</span>, newPath);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="安装完成后执行脚本"><a href="#安装完成后执行脚本" class="headerlink" title="安装完成后执行脚本"></a>安装完成后执行脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Run]</span><br><span class="line">Filename: &quot;&#123;app&#125;\service-install.bat&quot;; Description: &quot;&#123;cm:LaunchProgram,&#123;#StringChange(&apos;SERVICE_INSTALL&apos;, &apos;&amp;&apos;, &apos;&amp;&amp;&apos;)&#125;&#125;&quot;; Flags: shellexec postinstall waituntilterminated runascurrentuser</span><br></pre></td></tr></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>程序的可选命令行参数，可以包含常量。</p><h3 id="Flags-1"><a href="#Flags-1" class="headerlink" title="Flags"></a>Flags</h3><p>这个参数是额外选项设置。多个选项可以使用空格隔开。支持下面的选项:</p><p>32bit<br>Causes the {sys} constant to map to the 32-bit System directory when used in the Filename and WorkingDir parameters. This is the default behavior in a 32-bit mode install。</p><p>这个标记不能与 shellexec 组合使用。</p><p>64bit<br>Causes the {sys} constant to map to the 64-bit System directory when used in the Filename and WorkingDir parameters. This is the default behavior in a 64-bit mode install。</p><p>This flag can only be used when Setup is running on 64-bit Windows, otherwise an error will occur. On an installation supporting both 32- and 64-bit architectures, it is possible to avoid the error by adding a Check: IsWin64 parameter, which will cause the entry to be silently skipped when running on 32-bit Windows。</p><p>这个标记不能与 shellexec 组合使用。</p><p>hidewizard<br>如果指定了这个标记，向导将在程序运行期间隐藏。</p><p>nowait<br>如果指定了这个标记，它将在处理下一个 [Run] 条目前或完成安装前不等待进程执行完成。不能与 waituntilidle 或 waituntilterminated 组合使用。</p><p>postinstall<br>仅在 [Run] 段有效。告诉安装程序在安装完成向导页创建一个选择框，用户可以选中或不选中这个选择框从而决定是否处理这个条目。以前这个标记调用 showcheckbox。</p><p>如果安装程序已经重新启动了用户的电脑 (安装了一个带 restartreplace 标记的文件或如果 [Setup] 段的 AlwaysRestart 指令是 yes 引起的)，选择框没有机会出现，因此这些条目不会被处理。</p><p>[Files] 段条目中的 isreadme 标记现在已被废弃。如果编译器带 isreadme 标记的条目，它将从 [Files] 段条目中忽略这个标记，并在 [Run] 段条目列表的开头插入一个生成的 [Run] 条目。这相生成的 [Run] 段条目运行自述文件，并带有 shellexec，skipifdoesntexist，postinstall 和 skipifsilent 标记。</p><p>runascurrentuser<br>如果指定了这个标记，the spawned process will inherit Setup/Uninstall’s user credentials (typically, full administrative privileges)。</p><p>This is the default behavior when the postinstall flag is not used。</p><p>这个标记不能与 runasoriginaluser 组合使用。</p><p>runasoriginaluser<br>仅在 [Run] 段有效。If this flag is specified and the system is running Windows Vista or later, the spawned process will execute with the (normally non-elevated) credentials of the user that started Setup initially (i.e., the “pre-UAC dialog” credentials)。</p><p>This is the default behavior when the postinstall flag is used。</p><p>If a user launches Setup by right-clicking its EXE file and selecting “Run as administrator”, then this flag, unfortunately, will have no effect, because Setup has no opportunity to run any code with the original user credentials. The same is true if Setup is launched from an already-elevated process. Note, however, that this is not an Inno Setup-specific limitation; Windows Installer-based installers cannot return to the original user credentials either in such cases。</p><p>这个标记不能与 runascurrentuser 组合使用。</p><p>runhidden<br>如果指定了这个标记，它将在隐藏窗口中运行程序。请在执行一个要提示用户输入的程序中不要使用这个标记。</p><p>runmaximized<br>如果指定了这个标记，将在最大化窗口运行程序或文档。</p><p>runminimized<br>如果指定了这个标记，将在最小化窗口运行程序或文档。</p><p>shellexec<br>如果 Filename 不是一个直接可执行文件 (.exe 或 .com 文件)，这个标记是必需的。当设置这个标记时，Filename 可以是一个文件夹或任何已注册的文件类型 – 包括 .hlp，.doc 等。该文件将用用户系统中与这个文件类型关联的应用程序打开，与在资源管理器双击文件的方法是相同的。</p><p>按默认，当使用 shellexec 标记时，将不等待，直到生成的进程终止。<br>如果你需要，你必须添加标记 waituntilterminated。注意，如果新进程未生成，它不能执行也将不等待 – 例如，文件指定指定为一个文件夹。</p><p>skipifdoesntexist<br>如果这个标记在 [Run] 段中指定，如果 Filename 不存在，安装程序不显示错误消息。</p><p>如果这个标记在 [UninstallRun] 段中指定，如果 Filename 不存在，卸载程序不显示“一些元素不能删除”的警告。</p><p>在使用这个标记时， Filename 必须是一个绝对路径。</p><p>skipifnotsilent<br>仅在 [Run] 段有效。告诉安装程序如果安装程序未在后台运行则跳过这个条目。</p><p>skipifsilent<br>仅在 [Run] 段有效。告诉安装程序如果安装程序在后台运行则跳过这个条目。</p><p>unchecked<br>仅在 [Run] 段有效。告诉安装程序初始为不选中选择框。如果用户希望处理这个条目，可以通过选取选择框执行。如果 postinstall 标记未同时指定，这个标记被忽略。</p><p>waituntilidle<br>如果指定了这个标记，它将在未输入期间等待，直到进程等待用户输入，而不是等待进程终止。(调用 WaitForInputIdle Win32 函数。) 不能与 nowait 或 waituntilterminated 组合使用。</p><p>waituntilterminated<br>如果指定这个标记，将等待到进程完全终止。注意这是一个默认动作 (也就是你不需要指定这个标记)，除非你使用了 shellexec 标记，在这种情况下，如果你要等待，需要指定这个标记。不能与 nowait 或 waituntilidle 组合使用。</p><h2 id="安装前卸载旧版本"><a href="#安装前卸载旧版本" class="headerlink" title="安装前卸载旧版本"></a>安装前卸载旧版本</h2><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InitializeSetup</span><span class="params">()</span>:</span> boolean;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">bRes: Boolean;</span><br><span class="line">ResultStr: <span class="keyword">String</span>;</span><br><span class="line">ResultCode: Integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> RegQueryStringValue(HKLM, <span class="string">'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\&#123;4AA89D60-9EB2-4A69-B73E-67E3AC22CF8E&#125;_is1'</span>, <span class="string">'UninstallString'</span>, ResultStr) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    MsgBox(<span class="string">'检测到系统之前安装过本程序,即将卸载低版本！'</span>, mbInformation, MB_OK);</span><br><span class="line">    ResultStr := RemoveQuotes(ResultStr);</span><br><span class="line">    bRes := Exec(ResultStr, <span class="string">'/silent'</span>, <span class="string">''</span>, SW_HIDE, ewWaitUntilTerminated, ResultCode);</span><br><span class="line">    <span class="keyword">if</span> bRes <span class="keyword">and</span> (ResultCode = <span class="number">0</span>) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">      result := true;</span><br><span class="line">      <span class="keyword">Exit</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">      MsgBox(<span class="string">'卸载低版本失败！'</span>, mbInformation, MB_OK);</span><br><span class="line">      result:= false;</span><br><span class="line">      <span class="keyword">Exit</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  result := true;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="检测服务是否存在并删除"><a href="#检测服务是否存在并删除" class="headerlink" title="检测服务是否存在并删除"></a>检测服务是否存在并删除</h2><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeleteService</span><span class="params">(strExeName: <span class="keyword">String</span>)</span>:</span> Boolean;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">ErrorCode: Integer;</span><br><span class="line">bRes: Boolean;</span><br><span class="line">strCmdFind: <span class="keyword">String</span>;</span><br><span class="line">strCmdDelete: <span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  strCmdFind := Format(<span class="string">'/c sc query "%s"'</span>, [strExeName]);</span><br><span class="line">  strCmdDelete := Format(<span class="string">'/c sc stop "%s" &amp; sc delete "%s"'</span>, [strExeName, strExeName]);</span><br><span class="line">  bRes := ShellExec(<span class="string">'open'</span>, ExpandConstant(<span class="string">'&#123;cmd&#125;'</span>), strCmdFind, <span class="string">''</span>, SW_HIDE, ewWaitUntilTerminated, ErrorCode);</span><br><span class="line">  <span class="keyword">if</span> bRes <span class="keyword">and</span> (ErrorCode = <span class="number">0</span>) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> MsgBox(<span class="string">'检测到 '</span> + strExeName + <span class="string">' 服务存在，需要删除，是否继续？'</span>, mbConfirmation, MB_YESNO) = IDYES <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">          bRes := ShellExec(<span class="string">'open'</span>, ExpandConstant(<span class="string">'&#123;cmd&#125;'</span>), strCmdDelete, <span class="string">''</span>, SW_HIDE, ewWaitUntilTerminated, ErrorCode);</span><br><span class="line">          <span class="keyword">if</span> bRes <span class="keyword">and</span> (ErrorCode = <span class="number">0</span>) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">             MsgBox(<span class="string">'服务 '</span>+strExeName+<span class="string">' 删除成功！'</span>, mbInformation, MB_OK);</span><br><span class="line">             result := true;</span><br><span class="line">             <span class="keyword">Exit</span>;</span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">             MsgBox(<span class="string">'删除失败，请手动删除服务 '</span> + strExeName, mbError, MB_OK);</span><br><span class="line">             result := false;</span><br><span class="line">             <span class="keyword">Exit</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">      result := false;</span><br><span class="line">      <span class="keyword">Exit</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  MsgBox(<span class="string">'服务 '</span>+strExeName+<span class="string">' 不存在！'</span>, mbInformation, MB_OK);</span><br><span class="line">  result := true;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下 InnoSetup 的使用心得记录
    
    </summary>
    
      <category term="InnoSetup篇" scheme="http://blog.joylau.cn/categories/InnoSetup%E7%AF%87/"/>
    
    
      <category term="InnoSetup" scheme="http://blog.joylau.cn/tags/InnoSetup/"/>
    
  </entry>
  
  <entry>
    <title>git pull 和 git push 记住用户名密码</title>
    <link href="http://blog.joylau.cn/2019/09/03/Git-RememberMe/"/>
    <id>http://blog.joylau.cn/2019/09/03/Git-RememberMe/</id>
    <published>2019-09-03T09:14:14.000Z</published>
    <updated>2019-09-03T09:15:50.860Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>执行 <code>git config credential.helper store</code></p><p>或者在 .gitconfig 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">helper = store</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      git pull 和 git push 记住用户名密码
    
    </summary>
    
      <category term="Git篇" scheme="http://blog.joylau.cn/categories/Git%E7%AF%87/"/>
    
    
      <category term="Git" scheme="http://blog.joylau.cn/tags/Git/"/>
    
  </entry>
  
</feed>
