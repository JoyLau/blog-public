<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2018-07-19T03:32:00.283Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DenyHosts 清除黑名单 IP 地址</title>
    <link href="http://blog.joylau.cn/2018/07/19/Linux-Cancel-DenyHosts/"/>
    <id>http://blog.joylau.cn/2018/07/19/Linux-Cancel-DenyHosts/</id>
    <published>2018-07-19T02:47:25.000Z</published>
    <updated>2018-07-19T03:32:00.283Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天连接远程服务器发生了以下的错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset</span><br></pre></td></tr></table></figure></p><p>我想应该是我当前的 IP 地址被 DenyHosts 加入了黑名单<br>本来想只要将当前的 ip 地址在黑名单中去掉就可以了<br>没想到事实并不是如此,为此还查资料花费了一点功夫<br>现记录下来</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>停用 DenyHosts : <code>systemctl stop denyhosts.service</code></li><li>删除黑名单中当前的ip地址: <code>vim /etc/hosts.deny</code></li><li>进入  <code>/var/lib/denyhosts</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root    39 2月  16 2015 allowed-hosts</span><br><span class="line">-rw-r--r-- 1 root root 71451 7月  19 10:58 hosts</span><br><span class="line">-rw-r--r-- 1 root root 71270 7月  19 10:58 hosts-restricted</span><br><span class="line">-rw-r--r-- 1 root root 71433 7月  19 10:58 hosts-root</span><br><span class="line">-rw-r--r-- 1 root root 71280 7月  19 10:58 hosts-valid</span><br><span class="line">-rw-r--r-- 1 root root   105 7月  19 10:58 offset</span><br><span class="line">-rw-r--r-- 1 root root     0 7月  19 10:58 suspicious-logins</span><br><span class="line">-rw-r--r-- 1 root root 44731 7月  19 10:58 users-hosts</span><br><span class="line">-rw-r--r-- 1 root root 50925 7月  19 10:58 users-invalid</span><br><span class="line">-rw-r--r-- 1 root root   643 7月  19 10:58 users-valid</span><br></pre></td></tr></table></figure><ol start="4"><li>依次在上面各个文件中移除自己当前的IP地址</li><li>如果要将当前的IP地址添加到白名单中,可以在 /etc/hosts.allow 添加<br>sshd: ip地址<br>allowed-hosts 添加 IP地址</li><li>重启 DenyHosts</li></ol><blockquote><p>注意: 这些文件里有很多被拉入黑名单的IP地址,vim编辑的时候可以在命令行模式下使用 <code>/ip地址</code> 来查找, n 和 N 上下翻动,再在命令行模式下 <code>:noh</code> 取消查找</p></blockquote>]]></content>
    
    <summary type="html">
    
      今天连接远程服务器发生了错误,我想应该是我当前的 IP 地址被 DenyHosts 加入了黑名单,想取消的话还是花了一点的功夫
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 最佳编程字体 Monaco 的优化显示</title>
    <link href="http://blog.joylau.cn/2018/07/13/Ubuntu-Fonts-Monaco/"/>
    <id>http://blog.joylau.cn/2018/07/13/Ubuntu-Fonts-Monaco/</id>
    <published>2018-07-13T03:03:44.000Z</published>
    <updated>2018-07-18T06:22:55.427Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自从入了 MBP 后就被其默认的字体显示效果吸引了，在编辑器里写代码更是舒服，于是想着把 Mac 下的字体也移植到 Ubuntu 下，但是显示效果并不是特别的好，尤其是粗体字的显示</p><h2 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a>前后对比</h2><p>左侧使用前，右侧使用后</p><figure class="half"><img src="http://image.joylau.cn/blog/Monaco1.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco4.png" width="50%"></figure><figure class="half"><img src="http://image.joylau.cn/blog/Monaco2.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco5.png" width="50%"></figure><figure class="half"><img src="http://image.joylau.cn/blog/Monaco3.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco6.png" width="50%"></figure><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>该字体为开源字体，字体地址： <a href="https://github.com/vjpr/monaco-bold" target="_blank" rel="noopener">https://github.com/vjpr/monaco-bold</a></li><li>复制到 <code>/usr/share/fonts</code></li><li><code>fc-cache -fv</code> 生成字体缓存</li></ol><p>我的 1080P 分辨率，我的配置如下：<br><img src="http://image.joylau.cn/blog/Monaco7.png" alt="MonacoB2"></p><h2 id="2018-07-18-14-22-05-更新"><a href="#2018-07-18-14-22-05-更新" class="headerlink" title="2018-07-18 14:22:05 更新"></a>2018-07-18 14:22:05 更新</h2><p>看到一篇关于 Ubuntu 字体渲染问题的文章: 修复 Ubuntu 中文字体渲染  <a href="https://i-meto.com/fix-chinese-font-display/" target="_blank" rel="noopener">https://i-meto.com/fix-chinese-font-display/</a></p>]]></content>
    
    <summary type="html">
    
      自从入了 MBP 后就被其默认的字体显示效果吸引了，在编辑器里写代码更是舒服，于是想着把 Mac 下的字体也移植到 Ubuntu 下，但是显示效果并不是特别的好，尤其是粗体字的显示
    
    </summary>
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用阿里云个人专属加速器</title>
    <link href="http://blog.joylau.cn/2018/07/12/Docker-AliAccelerator/"/>
    <id>http://blog.joylau.cn/2018/07/12/Docker-AliAccelerator/</id>
    <published>2018-07-12T01:48:38.000Z</published>
    <updated>2018-07-12T01:53:22.650Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol start="0"><li>原来阿里云给每个账户都有分配专属的加速器地址</li><li>登录阿里云控制台</li><li>进入容器镜像服务，点击最下方的镜像加速器，会出现个人的专属加速器地址，我的是： <a href="https://0ppztvl0.mirror.aliyuncs.com" target="_blank" rel="noopener">https://0ppztvl0.mirror.aliyuncs.com</a></li><li><p>Docker客户端版本大于1.10.0的用户，创建 <code>/etc/docker/daemon.json</code><br> {<br>   “registry-mirrors”: [“<a href="https://0ppztvl0.mirror.aliyuncs.com&quot;]" target="_blank" rel="noopener">https://0ppztvl0.mirror.aliyuncs.com&quot;]</a><br> }</p><p> sudo systemctl daemon-reload<br> sudo systemctl restart docker</p></li></ol>]]></content>
    
    <summary type="html">
    
      原来阿里云给每个账户都有分配专属的加速器地址
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>以非 root 用户身份管理 Docker</title>
    <link href="http://blog.joylau.cn/2018/07/05/Docker-Manager-NonRoot/"/>
    <id>http://blog.joylau.cn/2018/07/05/Docker-Manager-NonRoot/</id>
    <published>2018-07-05T08:51:49.000Z</published>
    <updated>2018-07-05T08:59:34.722Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>docker 安装完成后，其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行，这样每次在使用命令时都需要在前面加上sudo,这很不方便。<br>有没有什么方式能够解决？<br>官方文档地址： <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/linux-postinstall/</a></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>docker 守护进程绑定至 Unix 套接字，而不是 TCP 端口。默认情况下，该 Unix 套接字由用户 root 所有，而其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行。</p><p>在使用 docker 命令时，如果您不想使用 sudo，请创建名为 docker 的 Unix 组并向其中添加用户。docker 守护进程启动时，它将使 Unix 套接字的所有权可由 docker 组进行读取/写入。</p><blockquote><blockquote><blockquote><p>警告： docker 组将授予等同于 root 用户的特权。如需有关此操作如何影响系统安全性的详细信息，请参阅 Docker 守护进程攻击面。</p></blockquote></blockquote></blockquote><p>如需创建 docker 组并添加您的用户，请执行下列操作：</p><ol><li>创建 docker 组。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker</span></span><br></pre></td></tr></table></figure><p>向 docker 组中添加您的用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -aG docker <span class="variable">$USER</span></span></span><br></pre></td></tr></table></figure><p>注销并重新登录，以便对您的组成员资格进行重新评估。</p><p>如果在虚拟机上进行测试，可能必须重启此虚拟机才能使更改生效。</p><p>在桌面 Linux 环境（例如，X Windows）中，彻底从您的会话中注销，然后重新登录。</p><p>验证您是否可以在不使用 sudo 的情况下运行 docker 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure><p>此命令将下载一个测试镜像并在容器中运行它。容器运行时，它将输出一条参考消息并退出。</p><p>经过实测，Ubuntu通过源添加安装最新版 Docker 时，已经自动添加了 docker 组，只需要将 当前用户添加到组里面在重新登录就可以了。</p>]]></content>
    
    <summary type="html">
    
      docker 安装完成后，其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行，这样每次在使用命令时都需要在前面加上sudo,这很不方便。
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>office 套件的一系列研究记录</title>
    <link href="http://blog.joylau.cn/2018/07/02/OfficeSuiteStudy/"/>
    <id>http://blog.joylau.cn/2018/07/02/OfficeSuiteStudy/</id>
    <published>2018-07-02T09:06:58.000Z</published>
    <updated>2018-07-02T09:08:59.779Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="ElasticSearch-环境准备"><a href="#ElasticSearch-环境准备" class="headerlink" title="ElasticSearch 环境准备"></a>ElasticSearch 环境准备</h2><p>略</p><h2 id="中文分词实现"><a href="#中文分词实现" class="headerlink" title="中文分词实现"></a>中文分词实现</h2><ol><li><p>安装插件 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p></li><li><p>测试分词：</p><p>ik_max_word会将文本做最细粒度的拆分；<br>ik_smart 会做最粗粒度的拆分。</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.10.74:9200/_analyze/ POST</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"绝地求生是最好玩的游戏"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">和</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"绝地求生是最好玩的游戏"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">和</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"绝地求生是最好玩的游戏"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建索引</p><p> <a href="http://192.168.10.74:9200/ik-index" target="_blank" rel="noopener">http://192.168.10.74:9200/ik-index</a>  PUT<br> 指定使用 ik_max_word 分词器</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"analysis"</span> : &#123;</span><br><span class="line">            <span class="attr">"analyzer"</span> : &#123;</span><br><span class="line">                <span class="attr">"ik"</span> : &#123;</span><br><span class="line">                    <span class="attr">"tokenizer"</span> : <span class="string">"ik_max_word"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">        <span class="attr">"article"</span> : &#123;</span><br><span class="line">            <span class="attr">"dynamic"</span> : <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"properties"</span> : &#123;</span><br><span class="line">                <span class="attr">"subject"</span> : &#123;</span><br><span class="line">                    <span class="attr">"type"</span> : <span class="string">"string"</span>,</span><br><span class="line">                    <span class="attr">"analyzer"</span> : <span class="string">"ik_max_word"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"content"</span> : &#123;</span><br><span class="line">                    <span class="attr">"type"</span> : <span class="string">"string"</span>,</span><br><span class="line">                    <span class="attr">"analyzer"</span> : <span class="string">"ik_max_word"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><ol start="4"><li><p>添加数据<br> 略</p></li><li><p>查询：<br> <a href="http://192.168.10.74:9200/index/_search" target="_blank" rel="noopener">http://192.168.10.74:9200/index/_search</a>    POST</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"subject"</span>: <span class="string">"合肥送餐冲突"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: [<span class="string">"&lt;span style = 'color:red'&gt;"</span>],</span><br><span class="line">    <span class="attr">"post_tags"</span>: [<span class="string">"&lt;/span&gt;"</span>],</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;<span class="attr">"subject"</span>: &#123;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>热更新<br> IKAnalyzer.cfg.xml</p> <entry key="remote_ext_dict"><a href="http://localhost/hotload.dic" target="_blank" rel="noopener">http://localhost/hotload.dic</a></entry><p> 放入到 静态资源服务器下面</p></li></ol><ol start="7"><li>同义词配置<br> <a href="http://192.168.10.74:9200/synonyms-ik-index" target="_blank" rel="noopener">http://192.168.10.74:9200/synonyms-ik-index</a>  PUT</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line"><span class="attr">"analysis"</span>: &#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line"><span class="attr">"by_smart"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"custom"</span>,</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"filter"</span>: [</span><br><span class="line"><span class="string">"by_tfr"</span>,</span><br><span class="line"><span class="string">"by_sfr"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"char_filter"</span>: [</span><br><span class="line"><span class="string">"by_cfr"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"by_max_word"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"custom"</span>,</span><br><span class="line">  <span class="attr">"tokenizer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="attr">"filter"</span>: [</span><br><span class="line"><span class="string">"by_tfr"</span>,</span><br><span class="line"><span class="string">"by_sfr"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"char_filter"</span>: [</span><br><span class="line"><span class="string">"by_cfr"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"filter"</span>: &#123;</span><br><span class="line"><span class="attr">"by_tfr"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"stop"</span>,</span><br><span class="line">  <span class="attr">"stopwords"</span>: [</span><br><span class="line"><span class="string">" "</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"by_sfr"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"synonym"</span>,</span><br><span class="line">  <span class="attr">"synonyms_path"</span>: <span class="string">"synonyms.dic"</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"char_filter"</span>: &#123;</span><br><span class="line"><span class="attr">"by_cfr"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"mapping"</span>,</span><br><span class="line">  <span class="attr">"mappings"</span>: [</span><br><span class="line"><span class="string">"| =&gt; |"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line"><span class="attr">"article"</span>: &#123;</span><br><span class="line">  <span class="attr">"dynamic"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line"><span class="attr">"subject"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"by_max_word"</span>,</span><br><span class="line">  <span class="attr">"search_analyzer"</span>: <span class="string">"by_smart"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"content"</span>: &#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"by_max_word"</span>,</span><br><span class="line">  <span class="attr">"search_analyzer"</span>: <span class="string">"by_smart"</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>测试同义词</p><p> <a href="http://192.168.10.74:9200/synonyms-ik-index/_analyze" target="_blank" rel="noopener">http://192.168.10.74:9200/synonyms-ik-index/_analyze</a>  POST</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"by_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"绝地求生是最好玩的游戏"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>查询同义词<br> <a href="http://192.168.10.74:9200/synonyms-ik-index/_search" target="_blank" rel="noopener">http://192.168.10.74:9200/synonyms-ik-index/_search</a>  POST</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"match"</span>: &#123;</span><br><span class="line">  <span class="attr">"subject"</span>: <span class="string">"吃鸡"</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line"><span class="attr">"pre_tags"</span>: [</span><br><span class="line">  <span class="string">"&lt;span style = 'color:red'&gt;"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"post_tags"</span>: [</span><br><span class="line">  <span class="string">"&lt;/span&gt;"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"fields"</span>: &#123;</span><br><span class="line">  <span class="attr">"subject"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据导入/导出 ： <a href="https://github.com/taskrabbit/elasticsearch-dump" target="_blank" rel="noopener">elasticdump</a> </p><p>github 地址： <a href="https://github.com/taskrabbit/elasticsearch-dump" target="_blank" rel="noopener">https://github.com/taskrabbit/elasticsearch-dump</a></p><h2 id="文件搜索实现"><a href="#文件搜索实现" class="headerlink" title="文件搜索实现"></a>文件搜索实现</h2><ol><li><p>文档地址： <a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.3/using-ingest-attachment.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/plugins/5.3/using-ingest-attachment.html</a></p></li><li><p>安装插件<br>./bin/elasticsearch-plugin install ingest-attachment</p></li><li><p>创建管道single_attachment<br> <a href="http://192.168.10.74:9200/_ingest/pipeline/single_attachment" target="_blank" rel="noopener">http://192.168.10.74:9200/_ingest/pipeline/single_attachment</a>  PUT</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Extract single attachment information"</span>,</span><br><span class="line">  <span class="attr">"processors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"attachment"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"data"</span>,</span><br><span class="line">        <span class="attr">"indexed_chars"</span>: <span class="number">-1</span>,</span><br><span class="line">        <span class="attr">"ignore_missing"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建索引<br> <a href="http://192.168.10.74:9200/file_attachment/" target="_blank" rel="noopener">http://192.168.10.74:9200/file_attachment/</a>  PUT</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"ik"</span>: &#123;</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"attachment"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"filename"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"data"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"time"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"attachment.content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加数据<br> <a href="http://192.168.10.74:9200/file_attachment/attachment/1?pipeline=single_attachment&amp;refresh=true&amp;pretty=1/" target="_blank" rel="noopener">http://192.168.10.74:9200/file_attachment/attachment/1?pipeline=single_attachment&amp;refresh=true&amp;pretty=1/</a>  POST</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"filename"</span>: <span class="string">"测试文档.txt"</span>,</span><br><span class="line">  <span class="attr">"time"</span>: <span class="string">"2018-06-13 15:14:00"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: <span class="string">"6L+Z5piv56ys5LiA5Liq55So5LqO5rWL6K+V5paH5pys6ZmE5Lu255qE5YaF5a6577yb5paH5Lu25qC85byP5Li6dHh0LOaWh+acrOS4uuS4reaWhw=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>文档查询<br> <a href="http://192.168.10.74:9200/file_attachment/_search" target="_blank" rel="noopener">http://192.168.10.74:9200/file_attachment/_search</a> POST</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"attachment.content"</span>: <span class="string">"测试"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;span style = 'color:red'&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"post_tags"</span>: [</span><br><span class="line">      <span class="string">"&lt;/span&gt;"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"attachment.content"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 使用 nginx 的静态资源目录作为 文件的存放，那么在下载文件时，想要 txt ,html ,pdf 等文件直接被下载而不被浏览器打开时，可在 nginx 的配置文件加入以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_filename</span> ~* ^.*?.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|jpg|png|html|xml)$)&#123;</span><br><span class="line">                        add_header Content-Disposition attachment; </span><br><span class="line">                        add_header Content-Type <span class="string">'APPLICATION/OCTET-STREAM'</span>;                 </span><br><span class="line">                 &#125; </span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重点是 :<br>if ($request_filename ~<em> ^.</em>?.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|jpg|png|html|xml)$){<br>      add_header Content-Disposition attachment;<br>      add_header Content-Type ‘APPLICATION/OCTET-STREAM’;<br>   }<br>或者也可以这样处理：<br>if ($args ~* “target=download”) {<br>      add_header Content-Disposition ‘attachment’;<br>      add_header Content-Type ‘APPLICATION/OCTET-STREAM’;<br> }</p><p>这样的话只要在 get请求加上 target=download 参数就可以下载了。</p><h2 id="Office-套件研究"><a href="#Office-套件研究" class="headerlink" title="Office 套件研究"></a>Office 套件研究</h2><h3 id="OpenOffice-服务搭建"><a href="#OpenOffice-服务搭建" class="headerlink" title="OpenOffice 服务搭建"></a>OpenOffice 服务搭建</h3><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li><p>下载 rpm 包 ： 官网： <a href="https://www.openoffice.org/download/" target="_blank" rel="noopener">https://www.openoffice.org/download/</a></p></li><li><p>解压，进入 /zh-CN/RPMS/ ， 安装 rpm 包： <code>rpm -ivh *.rpm</code></p></li><li><p>安装完成后，生成 desktop-integration 目录，进入，因为我的系统是 centos 的 ，我选择安装 <code>rpm -ivh openoffice4.1.5-redhat-menus-4.1.5-9789.noarch.rpm</code></p></li><li><p>安装完成后，目录在 /opt/openoffice4 下<br> 启动： <code>/opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=0.0.0.0,port=8100;urp;&quot; -nofirststartwizard &amp;</code></p></li></ol><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol><li><p>libXext.so.6: cannot open shared object file: No such file or directory<br> 解决 ： <code>yum install libXext.x86_64</code></p></li><li><p>no suitable windowing system found, exiting.<br> 解决： <code>yum groupinstall &quot;X Window System&quot;</code></p></li></ol><p>之后再启动，查看监听端口 <code>netstat -lnp |grep 8100</code><br>已经可以了。</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>对很多中文字体的支持并不是很好，很多中文字符及特殊字符无法显示</p><h3 id="LibreOffice-服务搭建"><a href="#LibreOffice-服务搭建" class="headerlink" title="LibreOffice 服务搭建"></a>LibreOffice 服务搭建</h3><h4 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li><p>下载 Linux系统下的 rpm 安装包</p></li><li><p>将安装包解压缩到目录下</p></li><li><p>安装<br>$ sudo yum install ./RPMS/<em>.rpm  /</em> 安装主安装程序的所有rpm包 <em>/<br>$ sudo yum install ./RPMS/</em>.rpm  /<em> 安装中文语言包中的所有rpm包 </em>/<br>$ sudo yum install ./RPMS/<em>.rpm  /</em> 安装中文离线帮助文件中的所有rpm包 */</p></li><li><p>卸载<br> $ sudo apt-get remove –purge libreoffice6.x-<em>  /</em> 移除所有类似libreoffice6.x-<em>的包。–purge表示卸载的同时移除所有相关的配置文件 </em>/</p></li></ol><h4 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h4><p>LibreOffice 的安装表示没有像 OpenOffice 那样遇到很多问题，且对中文字符的支持较为友好，官网也提供了相应的中文字体下载。</p><h3 id="Spring-Boot-连接并调用-Office-服务"><a href="#Spring-Boot-连接并调用-Office-服务" class="headerlink" title="Spring Boot 连接并调用 Office 服务"></a>Spring Boot 连接并调用 Office 服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">preview</span><span class="params">(@PathVariable String fileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Resource resource = <span class="keyword">new</span> UrlResource(remoteAddr + fileName);</span><br><span class="line">        <span class="keyword">if</span> (FilenameUtils.getExtension(resource.getFilename()).equalsIgnoreCase(<span class="string">"pdf"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Is the PDF file"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> DocumentFormat targetFormat =</span><br><span class="line">                    DefaultDocumentFormatRegistry.getFormatByExtension(<span class="string">"pdf"</span>);</span><br><span class="line">            converter</span><br><span class="line">                    .convert(resource.getInputStream())</span><br><span class="line">                    .as(</span><br><span class="line">                            DefaultDocumentFormatRegistry.getFormatByExtension(</span><br><span class="line">                                    FilenameUtils.getExtension(resource.getFilename())))</span><br><span class="line">                    .to(baos)</span><br><span class="line">                    .as(targetFormat)</span><br><span class="line">                    .execute();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">            headers.setContentType(MediaType.parseMediaType(targetFormat.getMediaType()));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(baos.toByteArray(), headers, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (OfficeException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"convert error: "</span> + e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File does not exist;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collabora-Office-服务搭建"><a href="#Collabora-Office-服务搭建" class="headerlink" title="Collabora Office 服务搭建"></a>Collabora Office 服务搭建</h3><p>官方地址： <a href="https://www.collaboraoffice.com/solutions/collabora-office/" target="_blank" rel="noopener">https://www.collaboraoffice.com/solutions/collabora-office/</a></p><h4 id="Collabora-CODE-服务搭建"><a href="#Collabora-CODE-服务搭建" class="headerlink" title="Collabora CODE 服务搭建"></a>Collabora CODE 服务搭建</h4><p>官方建议采用docker来安装</p><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull collabora/code</span><br><span class="line">$ docker run -t -d -p 127.0.0.1:9980:9980 -e <span class="string">"domain=&lt;your-dot-escaped-domain&gt;"</span> \</span><br><span class="line">        -e <span class="string">"username=admin"</span> -e <span class="string">"password=S3cRet"</span> --restart always --<span class="built_in">cap</span>-add MKNOD collabora/code</span><br></pre></td></tr></table></figure><h5 id="Linux-packages"><a href="#Linux-packages" class="headerlink" title="Linux packages"></a>Linux packages</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> import the signing key</span></span><br><span class="line">wget https://www.collaboraoffice.com/repos/CollaboraOnline/CODE-centos7/repodata/repomd.xml.key &amp;&amp; rpm --import repomd.xml.key</span><br><span class="line"><span class="meta">#</span><span class="bash"> add the repository URL to yum</span></span><br><span class="line">yum-config-manager --add-repo https://www.collaboraoffice.com/repos/CollaboraOnline/CODE-centos7</span><br><span class="line"><span class="meta">#</span><span class="bash"> perform the installation</span></span><br><span class="line">yum install loolwsd CODE-brand</span><br></pre></td></tr></table></figure><h3 id="Office-套件文档在线协作"><a href="#Office-套件文档在线协作" class="headerlink" title="Office 套件文档在线协作"></a>Office 套件文档在线协作</h3><p> 需要域名和SSL证书，尚未实际研究</p>]]></content>
    
    <summary type="html">
    
      包含 es 的中文分词检索，附件检索，office 套件在线预览等等
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
      <category term="OpenOffice" scheme="http://blog.joylau.cn/tags/OpenOffice/"/>
    
      <category term="LibreOffice" scheme="http://blog.joylau.cn/tags/LibreOffice/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 自用配置记录</title>
    <link href="http://blog.joylau.cn/2018/06/28/Ubuntu-SystemConfig/"/>
    <id>http://blog.joylau.cn/2018/06/28/Ubuntu-SystemConfig/</id>
    <published>2018-06-28T07:16:22.000Z</published>
    <updated>2018-07-19T01:14:51.525Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装完系统后的一些配置"><a href="#安装完系统后的一些配置" class="headerlink" title="安装完系统后的一些配置"></a>安装完系统后的一些配置</h2><ol><li><p>关闭并禁用 swap 分区： sudo swapoff 并且 sudo vim /etc/fstab 注释掉 swap 那行</p></li><li><p>开启点击图标最小化： gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true</p></li><li><p>开机开启小键盘： sudo apt-get install numlockx 然后 sudo vim /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf 在最后添加：greeter-setup-script=/usr/bin/numlockx on</p></li><li><p>用久显示隐藏文件夹： Edit -&gt; Preferences -&gt; Views 勾选 Show hidden and backup files</p></li><li><p>禁用客人会话： <a href="https://blog.csdn.net/thuyx/article/details/78503870" target="_blank" rel="noopener">https://blog.csdn.net/thuyx/article/details/78503870</a></p></li><li><p>jdk 10 的配置？？<br> 分别下载 jdk10 和 jre 10 解压缩到 /usr/java目录下<br> 配置如下环境变量</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk-10</span><br><span class="line">JRE_HOME=/usr/java/jre-10</span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"></span><br><span class="line">MAVEN_HOME=/usr/maven/apache-maven-3.5.3</span><br><span class="line">NODE_HOME=/usr/nodejs/node-v8.11.2-linux-x64</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$&#123;NODE_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH MAVEN_HOME NODE_HOME PATH</span><br></pre></td></tr></table></figure><ol start="7"><li><p>安装中文字体文泉译：sudo apt-get install fonts-wqy-microhei</p></li><li><p>防火墙配置<br> sudo ufw enable</p><p> sudo ufw default deny</p><p> 运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常</p><p> sudo ufw disable 关闭防火墙</p></li><li><p>鼠标移动速度调整<br> xset m N<br> 其中，N是速度，估计取值为0-10<br> 恢复默认 xset m default</p></li></ol><h2 id="apt-get-命令的记录"><a href="#apt-get-命令的记录" class="headerlink" title="apt-get 命令的记录"></a>apt-get 命令的记录</h2><ol><li>卸载软件： sudo apt-get purge docker-ce</li><li>查看软件版本： apt-cache madison docker-ce </li></ol><h2 id="2018年07月19日09-10-55-更新"><a href="#2018年07月19日09-10-55-更新" class="headerlink" title="2018年07月19日09:10:55 更新"></a>2018年07月19日09:10:55 更新</h2><p>indicator-sysmonitor 显示网速时,在状态栏会左右移动,解决方法是:<br>修改源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi  /usr/lib/indicator-sysmonitor/sensors.py</span><br></pre></td></tr></table></figure><p>打开后，修改第29行的B_UNITS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B_UNITS = [<span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>]</span><br></pre></td></tr></table></figure><p>接着修改下面的bytes_to_human函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_human</span><span class="params">(bytes_)</span>:</span>                 </span><br><span class="line">unit = <span class="number">0</span>    </span><br><span class="line">bytes_ = bytes_ / <span class="number">1024</span> / <span class="number">1024</span>    </span><br><span class="line"><span class="keyword">while</span> bytes_ &gt; <span class="number">1024</span>:    </span><br><span class="line">    unit += <span class="number">1</span>    </span><br><span class="line">    bytes_ /= <span class="number">1024</span>    </span><br><span class="line"><span class="comment"># 做成00.00MB/s的形式，避免变化     </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&#123;:0&gt;5.2f&#125;&#123;:0&gt;2&#125;'</span>.format(bytes_, B_UNITS[unit])</span><br></pre></td></tr></table></figure><p>然后保存退出，重启就可以了。</p>]]></content>
    
    <summary type="html">
    
      安装完 Ubuntu 后自定义的一些配置记录
    
    </summary>
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 自用配置记录</title>
    <link href="http://blog.joylau.cn/2018/06/25/IntelliJIDEA-MyConfigs/"/>
    <id>http://blog.joylau.cn/2018/06/25/IntelliJIDEA-MyConfigs/</id>
    <published>2018-06-25T08:57:59.000Z</published>
    <updated>2018-06-25T09:31:01.676Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我自己在多个系统中都有使用 IDEA， IDEA登录账户的话是支持配置同步的。但是由于每个系统的环境变量配置（JAVA_HOME,MAVEN_HOME,GIT,NODE,…..），文件目录结构，字体，快捷键等等不同,导致一套配置并不能很好的通用，于是我在此记录下我平时的一些配置，忘了的话翻出来看看，马上就能达到我要的配置</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ol><li>UI 菜单字体</li><li>编辑器字体 注意：在 Ubuntu 系统下中文字体显得很难看，这时候设置支持中文的第二字体</li><li>控制台字体</li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件我使用的是 IDEA 的自动同步功能，在一台客户端下载过的插件都会自动同步，这个不需担心</p><h3 id="编辑器变量颜色"><a href="#编辑器变量颜色" class="headerlink" title="编辑器变量颜色"></a>编辑器变量颜色</h3><p>进入设置： File | Settings | Editor | Color Scheme | Language Defaults， 开启 Semantic highlighting 功能</p><h3 id="代码改动后目录颜色"><a href="#代码改动后目录颜色" class="headerlink" title="代码改动后目录颜色"></a>代码改动后目录颜色</h3><p>File | Settings | Version Control， 开启 show directoris with ….</p><h3 id="自动导包优化"><a href="#自动导包优化" class="headerlink" title="自动导包优化"></a>自动导包优化</h3><p>File | Settings | Editor | General | Auto Import， 勾选 fly</p><h3 id="设置-alt"><a href="#设置-alt" class="headerlink" title="设置 alt + /"></a>设置 alt + /</h3><p>File | Settings | Keymap | main menu | code | completion | basic 设为 alt + /<br>同时 取消 cyclic expand word 的 快捷键</p><h3 id="自动提示忽略大小写"><a href="#自动提示忽略大小写" class="headerlink" title="自动提示忽略大小写"></a>自动提示忽略大小写</h3><p>File | Settings | Editor | General | Code Completion，将 case sensitive completion 修改为NONE</p><h3 id="idea64-vmoptions-配置"><a href="#idea64-vmoptions-配置" class="headerlink" title="idea64.vmoptions 配置"></a>idea64.vmoptions 配置</h3><p>16G 以上的机器：<br>    -Xms512m<br>    -Xmx1500m<br>    -XX:ReservedCodeCacheSize=500m<br>    -XX:SoftRefLRUPolicyMSPerMB=100<br>添加编码 ：<br>    -Dfile.encoding=UTF-8</p><h3 id="idea-properties-配置"><a href="#idea-properties-配置" class="headerlink" title="idea.properties 配置"></a>idea.properties 配置</h3><p>控制台打印日志的行数：默认为 1024，不限制的话：<br>    idea.cycle.buffer.size=disabled</p>]]></content>
    
    <summary type="html">
    
      我自己在多个系统中都有使用 IDEA， IDEA登录账户的话是支持配置同步的。但是由于每个系统的环境变量配置，字体，快捷键等等不同,导致一套配置并不能很好的通用，于是我在此记录下我平时的一些配置，忘了的话翻出来看看，马上就能达到我要的配置
    
    </summary>
    
      <category term="IntelliJ IDEA篇" scheme="http://blog.joylau.cn/categories/IntelliJ-IDEA%E7%AF%87/"/>
    
    
      <category term="IntelliJ IDEA" scheme="http://blog.joylau.cn/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 OpenOffice 服务小记</title>
    <link href="http://blog.joylau.cn/2018/06/22/Linux-OpenOffice/"/>
    <id>http://blog.joylau.cn/2018/06/22/Linux-OpenOffice/</id>
    <published>2018-06-22T03:53:49.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>下载 rpm 包 ： 官网： <a href="https://www.openoffice.org/download/" target="_blank" rel="noopener">https://www.openoffice.org/download/</a></p></li><li><p>解压，进入 /zh-CN/RPMS/ ， 安装 rpm 包： <code>rpm -ivh *.rpm</code></p></li><li><p>安装完成后，生成 desktop-integration 目录，进入，因为我的系统是 centos 的 ，我选择安装 <code>rpm -ivh openoffice4.1.5-redhat-menus-4.1.5-9789.noarch.rpm</code></p></li><li><p>安装完成后，目录在 /opt/openoffice4 下<br> 启动： <code>/opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=0.0.0.0,port=8100;urp;&quot; -nofirststartwizard &amp;</code></p></li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li><p>libXext.so.6: cannot open shared object file: No such file or directory<br> 解决 ： <code>yum install libXext.x86_64</code></p></li><li><p>no suitable windowing system found, exiting.<br> 解决： <code>yum groupinstall &quot;X Window System&quot;</code></p></li></ol><p>之后再启动，查看监听端口 <code>netstat -lnp |grep 8100</code><br>已经可以了。</p>]]></content>
    
    <summary type="html">
    
      最近在研究 office 套件在线预览的功能 ，在此记下安装过程和出错的解决方式
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="linux" scheme="http://blog.joylau.cn/tags/linux/"/>
    
      <category term="openoffice" scheme="http://blog.joylau.cn/tags/openoffice/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 文档文本内容搜索</title>
    <link href="http://blog.joylau.cn/2018/06/21/Elasticsearch-ingest-attachment/"/>
    <id>http://blog.joylau.cn/2018/06/21/Elasticsearch-ingest-attachment/</id>
    <published>2018-06-21T08:53:49.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="http://image.joylau.cn/blog/attachment.gif" alt="IdiomsDictionary"></p><p><a href="https://github.com/JoyLau/es-doc-node" target="_blank" rel="noopener">https://github.com/JoyLau/es-doc-node</a></p>]]></content>
    
    <summary type="html">
    
      整合之前的 IK 分词插件 + 文件搜索（TXT,WORD,EXCEL,PPT,PDF,HTML）
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>React 项目使用 IDEA 进行调试</title>
    <link href="http://blog.joylau.cn/2018/06/20/React-DebugWithIDEA/"/>
    <id>http://blog.joylau.cn/2018/06/20/React-DebugWithIDEA/</id>
    <published>2018-06-19T17:02:35.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p>You would need to have WebStorm and JetBrains IDE Support Chrome extension installed.<br> 需要安装 JetBrains IDE Support 的 chrome 插件</p></li><li><p>In the WebStorm menu Run select Edit Configurations…. Then click + and select JavaScript Debug. Paste <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> into the URL field and save the configuration.<br> 在 Edit Configurations 选项里添加一个 JavaScript Debug 的项目，并且地址写上 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p></li></ol><blockquote><blockquote><p>Note: the URL may be different if you’ve made adjustments via the HOST or PORT environment variables.<br>    地址根据配置环境而异</p></blockquote></blockquote><ol start="3"><li>Start your app by running npm start, then press ^D on macOS or F9 on Windows and Linux or click the green debug icon to start debugging in WebStorm.<br> 运行项目，点击 debug 按钮调试项目，注意在页面上开启插件的调试功能，此后就能像调式Java 一样调试 js 代码了。</li></ol>]]></content>
    
    <summary type="html">
    
      react 项目使用 IDEA 进行调试
    
    </summary>
    
      <category term="React篇" scheme="http://blog.joylau.cn/categories/React%E7%AF%87/"/>
    
    
      <category term="nodejs" scheme="http://blog.joylau.cn/tags/nodejs/"/>
    
      <category term="react" scheme="http://blog.joylau.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 修改 mac 地址</title>
    <link href="http://blog.joylau.cn/2018/06/14/MacOS-ChangeMacAddr/"/>
    <id>http://blog.joylau.cn/2018/06/14/MacOS-ChangeMacAddr/</id>
    <published>2018-06-14T01:03:16.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>公司的网络接入是需要 ip 地址和 mac 地址绑定在一起的，笔记接入的 WiFi 没绑定就无法上网，公司那么多电脑不用，就使用他们已经绑定好的 静态 IP 地址和 mac 地址来上网</p><ol><li>随机生成一个全新的MAC网卡地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'</span><br></pre></td></tr></table></figure><ol start="2"><li>断开airport无线网卡连接</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 mac 地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig en0 ether xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure><p>xx:xx:xx:xx:xx:xx ＝输入你想要修改成的MAC地址来代替。</p><p>en0 ＝ 输入你想要修改成的网卡代替。一般 en0 就为无线网卡</p><ol start="4"><li>重新打开网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networksetup -detectnewhardware</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      公司的网络接入是需要 ip 地址和 mac 地址绑定在一起的，笔记接入的 WiFi 没绑定就无法上网，公司那么多电脑不用，就使用他们已经绑定好的 静态 IP 地址和 mac 地址来上网
    
    </summary>
    
      <category term="MacOS篇" scheme="http://blog.joylau.cn/categories/MacOS%E7%AF%87/"/>
    
    
      <category term="MacOS" scheme="http://blog.joylau.cn/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 分词插件的使用及 demo</title>
    <link href="http://blog.joylau.cn/2018/06/12/Elasticsearch-Ik/"/>
    <id>http://blog.joylau.cn/2018/06/12/Elasticsearch-Ik/</id>
    <published>2018-06-12T02:53:54.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="http://image.joylau.cn/blog/idioms.gif" alt="IdiomsDictionary"></p><p><a href="https://github.com/JoyLau/es-doc-node" target="_blank" rel="noopener">https://github.com/JoyLau/es-doc-node</a></p>]]></content>
    
    <summary type="html">
    
      记录下 ik 分词插件的使用,及使用 react + antd 做了一个小 demo
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 前后台时间传参格式化</title>
    <link href="http://blog.joylau.cn/2018/05/23/MyBatis-DateFormat/"/>
    <id>http://blog.joylau.cn/2018/05/23/MyBatis-DateFormat/</id>
    <published>2018-05-23T09:37:34.000Z</published>
    <updated>2018-06-07T05:27:36.220Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久不用 mybatis 了,今天突然遇到了一个时间参数的格式化问题…..<br>mysql 后台取出的时间格式的字段，传到前台变成了时间戳<br>一下就想到有一个注解进行格式化<br>可是半天想不到那个注解怎么写的了，于是一顿查</p><h2 id="记下来"><a href="#记下来" class="headerlink" title="记下来"></a>记下来</h2><p>以前经常使用的注解，现在都忘了，得记下来</p><ol><li>@JsonFormat(pattern=”yyyy-MM-dd HH:mm:ss”,timezone=”GMT+8”) ： 后台 Date 类型转时间字符串，注意时区 （后台 -&gt; 前台）</li><li>@DateTimeFormat(pattern=”yyyy-MM-dd HH:mm:ss”) ：前台时间格式参数转为 javabean 的 Date 类型 （前台 -&gt; 后台）</li><li>@JSONField(name=”end_time”, format=”yyyy-MM-dd hh:mm:ss”) ： fastjson 专用，定义json 的 key，还有时间的格式化，也可以分别在 get set 方法上注解</li></ol>]]></content>
    
    <summary type="html">
    
      好久不用 mybatis 了,今天突然遇到了一个时间参数的格式化问题.....
    
    </summary>
    
      <category term="MyBatis篇" scheme="http://blog.joylau.cn/categories/MyBatis%E7%AF%87/"/>
    
    
      <category term="mybatis" scheme="http://blog.joylau.cn/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 集群安全控制</title>
    <link href="http://blog.joylau.cn/2018/05/21/Elasticsearch-Security/"/>
    <id>http://blog.joylau.cn/2018/05/21/Elasticsearch-Security/</id>
    <published>2018-05-21T07:27:49.000Z</published>
    <updated>2018-06-07T05:27:36.216Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般我们搭建起来的 es 集群都可以通过默认的 9200 端口来进行 API 访问,这在局域网上没有什么大问题，如果说搭建的环境在公网上，这将埋下巨大的隐患，因为任何人都可以操作 API 来进行增删改查，这是多么的恐怖！！</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>集群环境： elasticsearch 5.3.0；centos 7.2</li><li>集群公网环境</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>elasticsearch 集群搭建完成后，通过制定的端口都可以访问，但是实际情况中，我们并不想这样。我们可能想只有固定的ip地址才能访问，或者需要用户名、密码才能访问<br>对于如何控制 Elasticsearch 的安全性，我详细查了下资料，现有如下解决方式</p><ol><li><p>官方的 x-pack 插件，收费的，一下子就觉得用不了了，截止现在（2018年5月21日16:23:19），有最新消息，在 ElasticON 2018 的开幕主题演讲中，x-pack 负责人在博客宣布将开放 X-Pack的代码，但是现在为止只是第一阶段完成，<br> 最后在博客中宣布在6.3版本，其中免费的X-Pack功能将包含在Elastic Stack的默认发行版中，所以说现在没戏</p></li><li><p>官方推荐的shield插件，再5.x的版本后已经集成到 x-pack里了，版本不适合，不用</p></li><li><p>elasticsearch-http-basic 插件， 已经不支持 5.x的版本了，没法用</p></li><li><p>ReadonlyREST : 官网地址： <a href="https://readonlyrest.com/download/" target="_blank" rel="noopener">https://readonlyrest.com/download/</a> elasticsearch 版的插件，是免费的， kibana 的插件是收费的，此法可用</p></li><li><p>使用 nginx 的 http-basic，可用</p></li></ol><h2 id="ReadonlyREST-插件的使用"><a href="#ReadonlyREST-插件的使用" class="headerlink" title="ReadonlyREST 插件的使用"></a>ReadonlyREST 插件的使用</h2><ol><li>官网选择 elasticsearch 的版本，填写邮箱地址，收到邮件后下载插件文件<br> 注意：只能通过官网填写邮箱的方式来进行下载，注意看的话，下载的地址后面有校验参数</li><li>运行 <code>bin/elasticsearch-plugin install file:///tmp/readonlyrest-1.16.19_es5.3.0.zip</code> 安装插件，注意是 file:// 再加上绝对路径<br> 卸载插件 <code>bin/elasticsearch-plugin remove readonlyrest</code></li><li>配置文件 readonlyrest.yml,这个比较坑，插件生成好之后，居然不生成 readonlyrest.yml，还需要我们自己配置，还不知道需要配置什么东西，没办法，只能去 github 上查看文档，<br>文档地址： <a href="https://github.com/beshu-tech/readonlyrest-docs/blob/master/elasticsearch.md" target="_blank" rel="noopener">https://github.com/beshu-tech/readonlyrest-docs/blob/master/elasticsearch.md</a> </li><li>文档说了很多，我找了半天才找到我需要的配置：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readonlyrest:</span></span><br><span class="line"><span class="attr">    prompt_for_basic_auth:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    access_control_rules:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">"::ADMIN::"</span></span><br><span class="line"><span class="attr">      auth_key:</span> <span class="attr">admin:12333</span></span><br></pre></td></tr></table></figure><p>此时启动 elasticsearch， 再次访问 localhost:9200 就会弹出输入用户名和密码的窗口，此时输入 admin/12333 即可看到接口信息，请求成功后，在日志里会看到 ALLOWED by { name: ‘::PERSONAL_GRP::’, p。。。 的日志信息。<br>想要屏蔽这样的日志信息，只需再 <code>auth_key</code> 下面加上配置 <code>verbosity: error</code> 即可。默认为 info</p><p>这里吐槽一下，ReadonlyREST 插件的文档是真的难读，可能是国外人和我们的思维方式不一样吧。</p><p>至此 ReadonlyREST 插件的使用就完毕了。</p><h2 id="nginx-http-basic-的使用"><a href="#nginx-http-basic-的使用" class="headerlink" title="nginx  http-basic 的使用"></a>nginx  http-basic 的使用</h2><p>利用 nginx 的反向代理，分配一个二级域名来进行使用</p><ol><li>一个二级域名，比如xxxx.joylau.cn</li><li>添加 nginx 的配置文件:/etc/nginx/conf.d/elasticsearch.conf, nginx 会默认读取 <code>/etc/nginx/conf.d/</code> 目录下的 *.conf的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">upstream JoyElasticSearch &#123;</span><br><span class="line">        server localhost:port  weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xxxxx.joylau.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 提示信息</span></span><br><span class="line">        auth_basic <span class="string">"请输入账号密码"</span>;</span><br><span class="line">        <span class="comment"># 密码文件，最好写绝对路径</span></span><br><span class="line">        auth_basic_user_file /etc/nginx/conf.d/es-password;</span><br><span class="line">        autoindex on;</span><br><span class="line">        proxy_pass  http://JoyElasticSearch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里访问 xxxxx.joylau.cn 会被定向到 elasticsearch 的http端口<br><code>auth_basic_user_file</code> ：指的是密码文件，注意这里写绝对路径，防止出错</p><ol start="3"><li>用户名，密码文件 es-password</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root:123</span></span><br><span class="line">root:Hx53TyjMWNmLo</span><br></pre></td></tr></table></figure><p>这里假设 用户名是root，密码是123（实际上不是123），该加密方式为 httpd 加密，怎么获取明文加密后的密文，这个在网上有很多的在线工具可以直接使用，这里不再赘述</p><ol start="4"><li>保存并重新加载配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问 xxxxx.joylau.cn 就会提示输入用户名密码，输入正确即可。</p><p>至此，nginx  http-basic 就结束了</p><p>但是还有一个问题，就是直接访问 host + elasticsearch的端口也是可以访问的，解决这个问题，需要使用 iptables 来进行端口的限制访问。</p><h2 id="iptables-限制端口的访问"><a href="#iptables-限制端口的访问" class="headerlink" title="iptables 限制端口的访问"></a>iptables 限制端口的访问</h2><ol><li>禁用防火墙 <code>systemctl stop firewalld</code></li><li>禁用firewalld服务  <code>systemctl mask firewalld</code></li><li>安装iptables  <code>yum install -y iptables</code></li><li>开机自启 <code>systemctl enable iptables</code></li><li><p>启动 iptables <code>systemctl start iptables</code></p></li><li><p>查看现在的所有规则 <code>iptables -L -n</code></p></li><li>清空所有默认规则  <code>iptables -F</code></li><li>清空所有自定义规则  <code>iptables -X</code></li><li>添加限制规则 <code>iptables -A INPUT -p tcp --dport 9200 ! -s 127.0.0.1 -j DROP</code><br> 这句规则的意思是，除了本机，其他的地址都不允许 访问 9200 端口</li><li>保存：<code>service iptables save</code></li></ol><p>注： 后续想要删除这条规则的话<br>       直接修改 iptables.conf 文件后 <code>service iptables save</code><br>       或者 <code>iptables -L INPUT --line-numbers</code> 查看所有规则<br>       iptables -D INPUT 1 （注意，这个1是行号，num下面的数字）<br>       保存：<code>service iptables save</code></p><p>这样的话，其他机器就不能访问 elasticsearch 的http 服务的端口了，这能通过 配置好的二级域名来访问</p><p>至此配置结束</p><h2 id="集群环境下的配置"><a href="#集群环境下的配置" class="headerlink" title="集群环境下的配置"></a>集群环境下的配置</h2><p>在多个 elasticsearch 集群环境下，可配置一台机器作为负载均衡的机器，配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>即可，其他机器的配置 <code>http.enabled: false</code> ，即对外不提供 http 服务<br>访问的时候只需访问那台负载均衡的节点。</p><p>至此，文章结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/elasticsearch-secu.jpg&#39; alt=&#39;elasticsearch-security&#39;/&gt;&lt;/center&gt;&lt;br&gt;一般我们搭建起来的 es 集群都可以通过默认的 9200 端口来进行 API 访问,这在局域网上没有什么大问题，如果说搭建的环境在公网上，这将埋下巨大的隐患
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux菜鸟到熟悉 --- systemctl 托管自定义程序</title>
    <link href="http://blog.joylau.cn/2018/05/18/Linux-Systemctl/"/>
    <id>http://blog.joylau.cn/2018/05/18/Linux-Systemctl/</id>
    <published>2018-05-18T07:31:18.000Z</published>
    <updated>2018-06-07T05:27:36.220Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>系统 centos 7</li><li>能够开机启动</li><li>能够一键开启，关闭，重启</li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>注意文件编码的问题</p><ul><li>service 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frp server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 可以包含的值为simple、forking、oneshot、dbus、notify、idel其中之一。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Type=forking</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 守护进程的PID文件，必须是绝对路径，强烈建议在Type=forking的情况下明确设置此选项</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># PIDFile=/project/frp_0.19.0_linux_amd64</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置启动服务是要执行的命令（命令+参数）</span></span></span><br><span class="line">ExecStart=/project/frp_0.19.0_linux_amd64/systemctl-frps start</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ExecStop=</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ExecReload=</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 当服务进程正常退出、异常退出、被杀死、超时的时候，是否重启系统该服务。进程通过正常操作被停止则不会被执行重启。可选值为：</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># no：默认值，表示任何时候都不会被重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># always：表示会被无条件重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># no-success：表示仅在服务进程正常退出时重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># on-failure：表示仅在服务进程异常退出时重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 所谓正常退出是指，退出码为“0”，或者到IGHUP, SIGINT, SIGTERM, SIGPIPE 信号之一，并且退出码符合 SuccessExitStatus= 的设置。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 所谓异常退出时指，退出码不为“0”，或者被强杀或者因为超时被杀死。</span></span></span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>文件放到 /usr/lib/systemd/system/ 下</p><p>Service 部分的启动、重启、停止命令全部要求使用绝对路径</p><p>如果单独运行的是命令，这个就已经足够了，但是如果运行一些守护进程的话或者更复杂的情况的话，需要单独写一个脚本来运行</p><p>关于 service 里面的详细配置可以参考： <a href="http://blog.51cto.com/littledevil/1912570" target="_blank" rel="noopener">http://blog.51cto.com/littledevil/1912570</a> </p><ul><li>脚本文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set service name</span></span><br><span class="line">SERVICE_NAME=frpServerService</span><br><span class="line">BIN_FILE_NAME=frps</span><br><span class="line"></span><br><span class="line"><span class="comment"># set basic executable environment, do not modify those lines</span></span><br><span class="line">BIN_HOME=$(dirname <span class="variable">$0</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;BIN_HOME&#125;</span>"</span> = <span class="string">"."</span> ]; <span class="keyword">then</span></span><br><span class="line">        BIN_HOME=$(<span class="built_in">pwd</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BIN_HOME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the service pid</span></span><br><span class="line">pid=`ps -ef|grep <span class="variable">$SERVICE_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"service <span class="variable">$&#123;SERVICE_NAME&#125;</span> already start with PID :<span class="variable">$pid</span>"</span></span><br><span class="line">     <span class="built_in">return</span> 0</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   nohup ./<span class="variable">$BIN_FILE_NAME</span> -c ./<span class="variable">$BIN_FILE_NAME</span>.ini &gt;/dev/null 2&gt;&amp;1 &amp; </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$SERVICE_NAME</span> : "</span></span><br><span class="line">   pid=`ps -ef|grep <span class="variable">$SERVICE_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"start <span class="variable">$&#123;SERVICE_NAME&#125;</span> successfully with PID: <span class="variable">$&#123;pid&#125;</span>"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"start <span class="variable">$&#123;SERIVCE_NAME&#125;</span> failed"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">debug</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   ./<span class="variable">$&#123;BIN_FILE_NAME&#125;</span> -c ./<span class="variable">$&#123;BIN_FILE_NAME&#125;</span>.ini</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [ -z <span class="variable">$&#123;pid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> already stopped"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting down <span class="variable">$SERVICE_NAME</span> : "</span></span><br><span class="line">        check_pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">        <span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$&#123;check_pid&#125;</span>"</span> ]</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                check_pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">                <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;check_pid&#125;</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"stop <span class="variable">$&#123;SERVICE_NAME&#125;</span> with PID: <span class="variable">$&#123;pid&#125;</span>"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">   pid=`jps | grep <span class="variable">$&#123;SERVICE_NAME&#125;</span>|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> (pid <span class="variable">$pid</span>) is running ..."</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"service <span class="variable">$SERVICE_NAME</span> is stopped"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  debug)</span><br><span class="line">        debug</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|debug&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上面这个脚本是一个模板，包括了start，stop，status，restart，debug各个命令，是可以直接传参执行的<br>在一个文件上的 ExecStart= 就可以运行脚本文件 并传入 start 参数</p><p>注意： 如果运行的是守护进程的话，Type=forking 要配置上，意指 ExecStart 命令里面运行进程才是主进程</p><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><ol><li>启动服务：systemctl start serviceName</li><li>停止服务：systemctl stop serviceName</li><li>服务状态：systemctl status serviceName</li><li>项目日志：journalctl -u serviceName</li><li>开机启动：systemctl enable serviceName</li><li>重新加载service文件：systemctl daemon-reload</li></ol>]]></content>
    
    <summary type="html">
    
      有时我们会将我们的代码部署到服务器上，希望我们服务能够开机启动和被系统托管
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="CMD" scheme="http://blog.joylau.cn/tags/CMD/"/>
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux菜鸟到熟悉 --- 闲置笔记本安装 Centos</title>
    <link href="http://blog.joylau.cn/2018/05/17/Linux-NoteBookPC/"/>
    <id>http://blog.joylau.cn/2018/05/17/Linux-NoteBookPC/</id>
    <published>2018-05-17T08:29:58.000Z</published>
    <updated>2018-06-25T08:53:48.429Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>以前的笔记本是 windows7 的操作系统</li><li>6GB 内存</li><li>还剩 96G 硬盘</li><li>打算安装 Centos 7.2</li></ol><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ol><li>U 盘一个（&gt;= 8G）</li><li>centos 镜像文件</li><li>刻录软件 UltraISO （官网直接下载试用版的即可）</li></ol><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li>在 windows 系统下压缩出磁盘空间或者直接格式化一个盘出来用来装 centos ，注意盘的格式 要为fat32</li><li>UltraISO 烧录镜像到U盘，U盘会被磁盘格式会改变且会被格式化</li><li>重启系统，以U盘启动</li><li>指定U盘安装</li><li>安装配置</li><li>等待进入系统</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在 U 盘启动的时候，在安装界面上会有三个选项，选择第一个 Install Centos，按tab键进行配置</li><li>找到U盘位置的方法： <code>vmlinuz initrd=initrd.img linux dd</code></li><li>这个时候很容易找到 U 的device，记下来(我当时U的device是 sdb4)，重启机器，在进入上一步的步骤</li><li>这时，将参数改为 ： <code>vmlinuz initrd=initrd.img inst.stage2=hd:/dev/sdb4</code> 接下来等待即可</li><li>选择安装位置，下方一定要选择自定义分区</li><li>分区策略就选默认的，创建新的分区，分区的大小就按照默认分配的就好，不需要改变</li></ol><h2 id="WiFi-问题"><a href="#WiFi-问题" class="headerlink" title="WiFi 问题"></a>WiFi 问题</h2><p>因为笔记本自带了 wifi 模块，想着不要用网线扯来扯去的，直接用wifi连接网络就好了啊<br>一切都没想象的那么简单….</p><p>因为我之前安装的时候选择了最小化安装，进去系统后什么都没有，一起都用通过命令行来解决<br>第一次我是根据这篇文章的步骤来的 <a href="http://www.jb51.net/article/100300.htm" target="_blank" rel="noopener">http://www.jb51.net/article/100300.htm</a><br>中间遇到了很多问题 network 服务不可用；systemctl restart network 也起不来，一直报错；ping 域名不通，ping ip 不通；ifconfig 命令不存在….总之一大堆问题<br>问题一个个解决，最后终于连上家里的wifi<br>后来重启了下，一切回到解放前<br>我去….<br>一顿惆怅<br>后来我装了个gnome图形界面，连上了wifi<br>在切换命令行使用，不使用图形界面，现在一切完好，而且内存占用空间大幅减少</p><h2 id="WiFi-连接命令"><a href="#WiFi-连接命令" class="headerlink" title="WiFi 连接命令"></a>WiFi 连接命令</h2><ol><li>设置NetworkManager自动启动<br> chkconfig NetworkManager on</li><li>安装NetworkManager-wifi<br> yum -y install NetworkManager-wifi</li><li>开启WiFi<br> nmcli r wifi on</li><li>测试（扫描信号）<br> nmcli dev wifi<br> 扫描不到可用 iw wlp8s0b1(网卡名称) scan | grep SSID 扫描一下</li><li>连接<br> nmcli dev wifi connect password</li></ol><p>注： 总结多次安装 centos 系统得出一个结论，如果在安装过程中选择打开 WiFi 并连接网络，系统安装完成后，会在 /etc/sysconfig/network-scripts/ 目录下生成一个 ifcfg-WiFi名称 文件和 keys-WiFi名称的密码文件，之后安装 NetworkManage-wifi 便可每次开机都能自动启动 WiFi，如果是装完系统在命令连接的话则每次重启后都需要自己手动连接 WiFi，这是扫描原因暂且不得而知</p><h2 id="切换命令行和图形界面"><a href="#切换命令行和图形界面" class="headerlink" title="切换命令行和图形界面"></a>切换命令行和图形界面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default multi-user.target  //设置成命令模式</span><br><span class="line">systemctl set-default graphical.target  //设置成图形模式</span><br></pre></td></tr></table></figure><h2 id="关闭盖子不睡眠"><a href="#关闭盖子不睡眠" class="headerlink" title="关闭盖子不睡眠"></a>关闭盖子不睡眠</h2><p>vim /etc/systemd/logind.conf  </p><p>HandlePowerKey　　　　  按下电源键后会触发的行为<br>HandleSleepKey　　 　　 按下挂起键后会触发的行为<br>HandleHibernateKey  　　按下休眠键后会触发的行为<br>HandleLidSwitch　　 　　关闭笔记本盖子后会触发的行为</p><p>只需要把HandleLidSwitch选项设置为 HandleLidSwitch=lock </p><p>设置完成保存后运行 systemctl restart systemd-logind 命令才生效</p><h2 id="恢复-Windows-启动项"><a href="#恢复-Windows-启动项" class="headerlink" title="恢复 Windows 启动项"></a>恢复 Windows 启动项</h2><p>windows 7、8/10 安装centos7双系统后，默认会将mbr改写成为grub2，而默认的centos7不识别windows 的ntfs分区，所以启动项没有windows。<br>可以用3条命令，即可将windows添加到grub2的启动项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install ntfs-3g</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><p>重启</p><h2 id="最小化安装时配置静态-IP-地址"><a href="#最小化安装时配置静态-IP-地址" class="headerlink" title="最小化安装时配置静态 IP 地址"></a>最小化安装时配置静态 IP 地址</h2><ol><li><p>vim /etc/sysconfig/network-scripts/ifcfg-网络接口名称,默认第一个是网络接口名称</p></li><li><p>修改以下红色标注的配置</p><p> TYPE=Ethernet</p> <font color="red" size="3">BOOTPROTO=static</font><p> DEFROUTE=yes</p><p> IPV4_FAILURE_FATAL=no</p><p> IPV6INIT=yes</p><p> IPV6_AUTOCONF=yes</p><p> IPV6_DEFROUTE=yes</p><p> IPV6_FAILURE_FATAL=no</p><p> NAME=eno16777736</p><p> UUID=9e8d604f-d991-4aa2-88a3-4c679e6f139c</p><p> DEVICE=eno16777736</p><p> ONBOOT=yes</p><p> PEERDNS=yes</p><p> PEERROUTES=yes</p><p> IPV6_PEERDNS=yes</p><p> IPV6_PEERROUTES=yes</p><p> <font color="red" size="3">HWADDR=B8:70:F4:24:61:A7</font>  #MAC地址</p><p> <font color="red" size="3">IPADDR=192.168.10.29</font>     #静态IP</p><p> <font color="red" size="3">GATEWAY=192.168.10.1</font>     #默认网关</p><p> <font color="red" size="3">NETMASK=255.255.255.0</font>    #子网掩码</p><p> <font color="red" size="3">DNS1=61.132.163.68</font>       #DNS配置</p></li><li><p>重启网络服务 ：service network restart</p></li></ol>]]></content>
    
    <summary type="html">
    
      家里以前的废旧笔记本突发奇想的想利用起来，由于我自己已经有很好的笔记本配置了，以前的闲置的笔记本打算装个 Centos 做开发使用
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="CMD" scheme="http://blog.joylau.cn/tags/CMD/"/>
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Lombok 注解小记</title>
    <link href="http://blog.joylau.cn/2018/05/15/Lombok/"/>
    <id>http://blog.joylau.cn/2018/05/15/Lombok/</id>
    <published>2018-05-15T02:24:24.000Z</published>
    <updated>2018-06-07T05:27:36.220Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li>val可以将变量申明是final类型。</li><li>@NonNull注解能够为方法或构造函数的参数提供非空检查。</li><li>@Cleanup注解能够自动释放资源。</li><li>@Getter/@Setter注解可以针对类的属性字段自动生成Get/Set方法。</li><li>@ToString注解，为使用该注解的类生成一个toString方法，默认的toString格式为：ClassName(fieldName= fieleValue ,fieldName1=fieleValue)。</li><li>@EqualsAndHashCode注解，为使用该注解的类自动生成equals和hashCode方法。</li><li>@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor,这几个注解分别为类自动生成了无参构造器、指定参数的构造器和包含所有参数的构造器。</li><li>@Data注解作用比较全，其包含注解的集合 @ToString， @EqualsAndHashCode，所有字段的 @Getter和所有非final字段的 @Setter, @RequiredArgsConstructor。</li><li>@Builder注解提供了一种比较推崇的构建值对象的方式。</li><li>@Synchronized注解类似Java中的Synchronized 关键字，但是可以隐藏同步锁</li></ul><p>官网地址： <a href="https://www.projectlombok.org/features/all" target="_blank" rel="noopener">https://www.projectlombok.org/features/all</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&#39;//image.joylau.cn/blog/Lombok.png&#39; alt=&#39;Lombok&#39;&gt;&lt;/center&gt; &lt;br&gt; Lombok 一些常用注解记录
    
    </summary>
    
      <category term="工具类篇" scheme="http://blog.joylau.cn/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%AF%87/"/>
    
    
      <category term="Lombok" scheme="http://blog.joylau.cn/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Filebeat 实时收集 Nginx 日志</title>
    <link href="http://blog.joylau.cn/2018/05/08/Filebeat-Nginx/"/>
    <id>http://blog.joylau.cn/2018/05/08/Filebeat-Nginx/</id>
    <published>2018-05-08T03:08:56.000Z</published>
    <updated>2018-06-07T05:27:36.216Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>Filebeat 版本为 5.3.0<br> 之所以使用 beats 家族的 Filebeat 来替代 Logstash 是因为 Logstash 实在太消耗资源了（服务器资源充足的土豪请无视）<br> 在官网下载 Logstash 有 89M，而 Filebeat 才8.4M，由此可见一斑<br> Logstash 可以配置 jvm 参数，经过我本身的调试，内存分配小了，启动很慢有时根本起不来，分配大了，其他服务就没有资源了<br> 所有说对于配置低的服务器，选择 Filebeat 是最好的选择了，而且现在 Filebeat 已经开始替代 Logstash 了</li><li>依然需要修改 nginx 的日志格式</li></ol><h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx.config"></a>nginx.config</h2><p>更改日志记录的格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                         <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                         <span class="string">'"status": "$status", '</span></span><br><span class="line">                         <span class="string">'"host": "$host", '</span></span><br><span class="line">                         <span class="string">'"request": "$request", '</span></span><br><span class="line">                         <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                         <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                         <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                         <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure><h2 id="filebeat-yml"><a href="#filebeat-yml" class="headerlink" title="filebeat.yml"></a>filebeat.yml</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========================== Filebeat prospectors =============================</span></span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line"></span><br><span class="line">- input_type: <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Paths that should be crawled and fetched. Glob based paths.</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/*access*.<span class="built_in">log</span></span><br><span class="line">  json.keys_under_root: <span class="literal">true</span></span><br><span class="line">  json.overwrite_keys: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------- Elasticsearch output ------------------------------</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  hosts: [<span class="string">"ip:port"</span>,<span class="string">"ip:port"</span>]</span><br><span class="line">  index: <span class="string">"filebeat_server_nginx_%&#123;+YYYY-MM&#125;"</span></span><br></pre></td></tr></table></figure><p>这里面需要注意的是<br>json.keys_under_root： 默认这个值是FALSE的，也就是我们的json日志解析后会被放在json键上。设为TRUE，所有的keys就会被放到根节点<br>json.overwrite_keys: 是否要覆盖原有的key，这是关键配置，将keys_under_root设为TRUE后，再将overwrite_keys也设为TRUE，就能把filebeat默认的key值给覆盖了</p><p>还有其他的配置<br>json.add_error_key：添加json_error key键记录json解析失败错误<br>json.message_key：指定json日志解析后放到哪个key上，默认是json，你也可以指定为log等。</p><p>说白了，差别就是，未配置前elasticsearch的数据是这样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"filebeat_server_nginx_2018-05"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"AWM9sVOkCcRcg0IPg399"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"_source"</span>: &#123;</span><br><span class="line"><span class="attr">"@timestamp"</span>: <span class="string">"2018-05-08T03:00:17.544Z"</span>,</span><br><span class="line"><span class="attr">"beat"</span>: &#123;</span><br><span class="line"><span class="attr">"hostname"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"5.3.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"input_type"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"json"</span>: &#123;&#125;,</span><br><span class="line">"message": "&#123; "@timestamp": "2018-05-08T11:00:11+08:00", "time": "2018-05-08T11:00:11+08:00", "remote_addr": "113.16.251.67", "remote_user": "-", "body_bytes_sent": "403", "request_time": "0.000", "status": "200", "host": "blog.joylau.cn", "request": "GET /img/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90.png HTTP/1.1", "request_method": "GET", "uri": "/img/\xE7\xBD\x91\xE6\x98\x93\xE4\xBA\x91\xE9\x9F\xB3\xE4\xB9\x90.png", "http_referrer": "http://blog.joylau.cn/css/style.css", "body_bytes_sent":"403", "http_x_forwarded_for": "-", "http_user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36" &#125;",</span><br><span class="line">"offset": 7633,</span><br><span class="line">"source": "/var/log/nginx/access.log",</span><br><span class="line">"type": "log"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后，是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>: <span class="string">"filebeat_server_nginx_2018-05"</span>,</span><br><span class="line"><span class="attr">"_type"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"_id"</span>: <span class="string">"AWM9rjLd8mVZNgvhdnN9"</span>,</span><br><span class="line"><span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"_source"</span>: &#123;</span><br><span class="line"><span class="attr">"@timestamp"</span>: <span class="string">"2018-05-08T02:56:50.000Z"</span>,</span><br><span class="line"><span class="attr">"beat"</span>: &#123;</span><br><span class="line"><span class="attr">"hostname"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"VM_252_18_centos"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"5.3.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"body_bytes_sent"</span>: <span class="string">"12576"</span>,</span><br><span class="line"><span class="attr">"host"</span>: <span class="string">"blog.joylau.cn"</span>,</span><br><span class="line"><span class="attr">"http_referrer"</span>: <span class="string">"http://blog.joylau.cn/"</span>,</span><br><span class="line"><span class="attr">"http_user_agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36"</span>,</span><br><span class="line"><span class="attr">"http_x_forwarded_for"</span>: <span class="string">"-"</span>,</span><br><span class="line"><span class="attr">"input_type"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"offset"</span>: <span class="number">3916</span>,</span><br><span class="line"><span class="attr">"remote_addr"</span>: <span class="string">"60.166.12.138"</span>,</span><br><span class="line"><span class="attr">"remote_user"</span>: <span class="string">"-"</span>,</span><br><span class="line"><span class="attr">"request"</span>: <span class="string">"GET /2018/03/01/JDK8-Stream-Distinct/ HTTP/1.1"</span>,</span><br><span class="line"><span class="attr">"request_method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="attr">"request_time"</span>: <span class="string">"0.000"</span>,</span><br><span class="line"><span class="attr">"source"</span>: <span class="string">"/var/log/nginx/access.log"</span>,</span><br><span class="line"><span class="attr">"status"</span>: <span class="string">"200"</span>,</span><br><span class="line"><span class="attr">"time"</span>: <span class="string">"2018-05-08T10:56:50+08:00"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"uri"</span>: <span class="string">"/2018/03/01/JDK8-Stream-Distinct/index.html"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来就很舒服了</p><h2 id="启动-FileBeat"><a href="#启动-FileBeat" class="headerlink" title="启动 FileBeat"></a>启动 FileBeat</h2><p>进入 Filebeat 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sudo ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>nginx 的日志里含有中文的话，会将中文转为 Unicode 编码，如果不转的话，加入 <code>escape=json</code> 参数就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json escape=json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                             <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                             <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                             <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                             <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                             <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                             <span class="string">'"status": "$status", '</span></span><br><span class="line">                             <span class="string">'"host": "$host", '</span></span><br><span class="line">                             <span class="string">'"request": "$request", '</span></span><br><span class="line">                             <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                             <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                             <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                             <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                             <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                             <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                        <span class="string">'&#125;'</span>;</span><br><span class="line">    </span><br><span class="line">        access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Filebeat 取代 Logstash 实时收集 Nginx 日志的方法
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Filebeat" scheme="http://blog.joylau.cn/tags/Filebeat/"/>
    
      <category term="Nginx" scheme="http://blog.joylau.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Logstash 实时收集 Nginx 日志</title>
    <link href="http://blog.joylau.cn/2018/05/08/Logstash-Nginx/"/>
    <id>http://blog.joylau.cn/2018/05/08/Logstash-Nginx/</id>
    <published>2018-05-08T00:38:25.000Z</published>
    <updated>2018-06-07T05:27:36.220Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>logstash 需要和 nginx 部署到一台机器<br>需要修改 nginx 的日志格式</p><h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx.config"></a>nginx.config</h2><p>更改日志记录的格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log_format json <span class="string">'&#123; "@timestamp": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"time": "$time_iso8601", '</span></span><br><span class="line">                         <span class="string">'"remote_addr": "$remote_addr", '</span></span><br><span class="line">                         <span class="string">'"remote_user": "$remote_user", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent": "$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"request_time": "$request_time", '</span></span><br><span class="line">                         <span class="string">'"status": "$status", '</span></span><br><span class="line">                         <span class="string">'"host": "$host", '</span></span><br><span class="line">                         <span class="string">'"request": "$request", '</span></span><br><span class="line">                         <span class="string">'"request_method": "$request_method", '</span></span><br><span class="line">                         <span class="string">'"uri": "$uri", '</span></span><br><span class="line">                         <span class="string">'"http_referrer": "$http_referer", '</span></span><br><span class="line">                         <span class="string">'"body_bytes_sent":"$body_bytes_sent", '</span></span><br><span class="line">                         <span class="string">'"http_x_forwarded_for": "$http_x_forwarded_for", '</span></span><br><span class="line">                         <span class="string">'"http_user_agent": "$http_user_agent" '</span></span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  json;</span><br></pre></td></tr></table></figure><h2 id="log-file-config"><a href="#log-file-config" class="headerlink" title="log-file.config"></a>log-file.config</h2><p>input 里添加 file 类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">        codec =&gt; <span class="string">"json"</span></span><br><span class="line">        start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"server_nginx"</span></span><br><span class="line">        tags =&gt; [<span class="string">"nginx"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      吃个晚饭回来继续写上一篇 Logstash 实时收集 Nginx 日志的方法
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Nginx" scheme="http://blog.joylau.cn/tags/Nginx/"/>
    
      <category term="Logstash" scheme="http://blog.joylau.cn/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>ELK(Elasticsearch + Logstash + Kibana) 日志分析平台搭建及 SpringBoot 如何实时发送日志存储到 ELK 平台</title>
    <link href="http://blog.joylau.cn/2018/05/07/Elasticsearch-ELK/"/>
    <id>http://blog.joylau.cn/2018/05/07/Elasticsearch-ELK/</id>
    <published>2018-05-07T09:11:22.000Z</published>
    <updated>2018-06-07T05:27:36.216Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>Elasticsearch， Logstash，Kibana 版本都是5.3.0</li><li>SpringBoot 集成 ELK，实际上指的就是 SpringBoot 与 Logstash 的整合</li><li>Elasticsearch 负责数据的存储，Logstash 负责数据的接受和数据的发送，相当于一个中转站，Kibana 负责数据的展示，查询</li><li>SpringBoot 项目是我们产生日志并且需要存储和分析的项目</li><li>SpringBoot 我还是使用的默认的 logback 日志系统，当然也可以采用 log4j,不过我还是比较喜欢 logback，性能好，配置少，有颜色</li></ol><h2 id="Elasticsearch-集群搭建"><a href="#Elasticsearch-集群搭建" class="headerlink" title="Elasticsearch 集群搭建"></a>Elasticsearch 集群搭建</h2><p>略</p><h2 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h2><ol><li>官网下载 Logstash</li><li>解压</li><li>添加配置文件 log.config</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"dev"</span></span><br><span class="line">        tags =&gt; [<span class="string">"spring-boot"</span>]</span><br><span class="line">        port =&gt; 4560</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"server"</span></span><br><span class="line">        tags =&gt; [<span class="string">"spring-boot"</span>]</span><br><span class="line">        port =&gt; 4561</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        tcp &#123;</span><br><span class="line">        host =&gt; <span class="string">"192.168.10.78"</span></span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"work_dev"</span></span><br><span class="line">        tags =&gt; [<span class="string">"boot"</span>]</span><br><span class="line">        port =&gt; 4568</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        <span class="keyword">if</span>[<span class="built_in">type</span>] == <span class="string">"work_dev"</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">                        hosts =&gt; [<span class="string">"ip:9268"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"logstash_%&#123;type&#125;_%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">                        hosts =&gt; [<span class="string">"http://192.168.10.232:9211"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"logstash_%&#123;type&#125;_%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>总的来说，配置文件里由 input，filter，output，这里我没有特别复杂的需求，filter就没有配置<br>我这里有三个input，但是都是 tcp 类型的<br>意思配置了三个input,分别监听192.168.10.78（就是安装logstash的机器）的4560，4561，和4568端口，有数据发送过来的话就进行output处理<br>这里我配置了3个type,这个type也就是elasticsearch里索引的type，并且该type可作为参数在output里判断进行不同的处理<br>codec 是的对日志数据进行处理的插件，这里是 json_lines<br>所以需要安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure><p>elasticsearch:hosts es的http地址和端口<br>index 是创建的索引名<br>如果要配置索引模板的话，可以添加以下配置<br>    manage_template =&gt; true<br>    template_name =&gt; “template_name”<br>    template_overwrite =&gt; true<br>    template =&gt; “/usr/local/path.json”</p><p>配置好了，我们检验下配置文件是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /app/logstash-5.3.0/bin/logstash -f /app/logstash-5.3.0/config/log.config -t</span><br></pre></td></tr></table></figure><p>没有问题的话就可启动了,后台启动的就用 nohup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /app/logstash-5.3.0/bin/logstash -f /app/logstash-5.3.0/config/log.config</span><br></pre></td></tr></table></figure><p>启动成功的话，9600端口可以获取到 logstash 的相关信息</p><h2 id="SpringBoot-集成-Logstash"><a href="#SpringBoot-集成-Logstash" class="headerlink" title="SpringBoot 集成 Logstash"></a>SpringBoot 集成 Logstash</h2><ol><li>添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加配置 logstash 文件<br>在 resources 下直接添加 logback.xml 文件即可</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>ip:4568<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我是使用的是 SpringBoot 自带的 logback 日志<br>SpringBoot 默认会读取 resources 目录下的 logback.xml 作为配置文件，别问我怎么知道的（我特地查看了源码：org.springframework.boot.logging.logback.LogbackLoggingSystem，”logback-test.groovy”, “logback-test.xml”, “logback.groovy”, “logback.xml”这些文件检测到都会读取其中的配置的）<br>配置文件里我只配置了 一个Appender，就是net.logstash.logback.appender.LogstashTcpSocketAppender，用来输出日志到logstash的，并且级别是 INFO<br>destination 指的就是 logstash 的地址<br>encoder 就配置LogstashEncoder不要变<br>再把 SpringBoot默认的配置引入base.xml</p><p>好了，SpringBoot 集成 Logstash 完毕</p><p>注 ：后来我想用 javaConfig 去配置 SpringBoot和Logstash，不过没有成功，哪位大佬看到这个信息，可以给我留言下怎么配置<br>xml,也很方便，打包部署后可以作为配置文件修改</p><p>那么，这个时候启动项目，elasticsearch里面就会看到有新的索引数据了</p><h2 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h2><ol><li>其实 Kibana 非必须安装，只是用来统计数据和查询数据的，用来提供一个可视化的界面</li><li>下载 Kibana</li><li>修改配置文件 kibana.yml<br> server.port: 5668<br> server.host: “0.0.0.0”<br> elasticsearch.url: “<a href="http://localhost:9268&quot;" target="_blank" rel="noopener">http://localhost:9268&quot;</a></li><li>后台启动</li><li>访问kibana的地址即可</li></ol>]]></content>
    
    <summary type="html">
    
      Elasticsearch + Logstash + Kibana + SpringBoot 怎么玩
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
