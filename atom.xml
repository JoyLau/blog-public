<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2019-05-29T16:01:05.903Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>群晖系列 --- 如何恢复群晖系统数据盘的数据</title>
    <link href="http://blog.joylau.cn/2019/05/29/Synology-Recover-Data/"/>
    <id>http://blog.joylau.cn/2019/05/29/Synology-Recover-Data/</id>
    <published>2019-05-29T00:51:18.000Z</published>
    <updated>2019-05-29T16:01:05.903Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前使用的是二合一的引导安装黑群晖系统,进入系统中发现一个 9G 的存储空间,顺手就把他删除了,重新建了个存储池,把 mSATA 盘上的引导折腾没了,无法进入系统<br>在 PE 系统下发现无法读取数据盘的数据<br>那么重做系统后如何恢复数据?</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>使用计算机和 Ubuntu live CD 恢复其硬盘上存储的数据。<br>确保 Synology NAS 硬盘上运行的文件系统是 EXT4 或 Btrfs</p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><ol><li>准备一台具有足够数量硬盘插槽的计算机，用于安装从 Synology NAS 卸下的硬盘。</li><li>从 Synology NAS 中卸下硬盘，然后将其安装到计算机中。对于 RAID 或 SHR 配置，必须同时在计算机中安装所有硬盘（不包括 Hot Spare 硬盘）。</li><li>在 Windows 上创建可启动 U 盘中的说明准备 Ubuntu 环境。</li><li>打开终端</li><li>如果要从 RAID 或 SHR 配置恢复数据，请执行步骤 6 到 9；如果要从只有一个硬盘的基本存储类型恢复文件，请执行步骤 9。</li><li>输入以下命令（sudo 执行 root 权限）。<ul><li>Ubuntu@ubuntu:~$ sudo -i</li></ul></li><li>输入以下命令以安装 mdadm 和 lvm2两者都是 RAID 管理工具。必须安装 lvm2，否则 vgchange 无法正常工作。<ul><li>root@ubuntu:~$ apt-get update</li><li>root@ubuntu:~$ apt-get install -y mdadm lvm2</li></ul></li><li>输入以下命令以装载从 Synology NAS 中卸下的所有硬盘。根据 Synology NAS 上的存储池配置，结果可能有所不同。<ul><li>root@ubuntu:~$ mdadm -Asf &amp;&amp; vgchange -ay</li></ul></li><li>输入以下命令以采用只读方式装载所有硬盘，从而可访问数据。在 ${device_path} 中输入设备路径，并在 ${mount_point} 中输入装载点。数据会放在装载点下。<ul><li>$ mount ${device_path} ${mount_point} -o ro</li></ul></li></ol><h3 id="Ubuntu-启动盘制作"><a href="#Ubuntu-启动盘制作" class="headerlink" title="Ubuntu 启动盘制作"></a>Ubuntu 启动盘制作</h3><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ul><li>一个4GB或更大的 U 盘</li><li>Microsoft Windows XP或更高版本</li><li>Rufus，一款免费的开源工具</li><li>一个Ubuntu ISO 文件<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><img src="http://image.joylau.cn/blog/rufus-ubuntu.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      之前有段时间折腾数据盘,把 mSATA 盘上的引导折腾没了,无法进入系统
    
    </summary>
    
      <category term="群晖篇" scheme="http://blog.joylau.cn/categories/%E7%BE%A4%E6%99%96%E7%AF%87/"/>
    
    
      <category term="群晖" scheme="http://blog.joylau.cn/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>日常折腾 --- 蜗牛星际安装黑群晖</title>
    <link href="http://blog.joylau.cn/2019/05/27/Daily-NAS/"/>
    <id>http://blog.joylau.cn/2019/05/27/Daily-NAS/</id>
    <published>2019-05-27T02:29:53.000Z</published>
    <updated>2019-05-29T16:01:05.903Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前一段时间矿难,坑了 20 亿, 5600 多的矿机现在 200 多的甩卖</p><h3 id="蜗牛星际"><a href="#蜗牛星际" class="headerlink" title="蜗牛星际"></a>蜗牛星际</h3><p>蜗牛星际指的是这批矿机的名字, 现一共有四款<br>型号根据网口数据不一样也有不一样的叫法。一个网口称为单，两个网口称为双。<br>分别有：A单，A双；B单，B双；C单，C双；D单。<br>下面是网络上整理的一个表单</p><p><img src="http://image.joylau.cn/blog/heiqun_catg.jpg" alt></p><p>我买的是 B 款单网口的 intel i211 的网卡<br>双网卡,还有一个网卡是 82583 需要短接主板上 2 个触电可完美使用双千兆</p><h3 id="安装黑群晖"><a href="#安装黑群晖" class="headerlink" title="安装黑群晖"></a>安装黑群晖</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>U 盘作为引导启动盘, 系统装入主板上的 16 G SATA 盘</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>将引导系统和系统主程序都装入 sata 盘上</p><p>我选择的是第二种，因为我不想插着个 U 盘在后面的主板上，而且我也没有那么小的U盘</p><h4 id="方式一安装步骤"><a href="#方式一安装步骤" class="headerlink" title="方式一安装步骤"></a>方式一安装步骤</h4><ol start="0"><li>所需资料: 链接: <a href="https://pan.baidu.com/s/1Dk220UoOpDFuTjSV9dUAHw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Dk220UoOpDFuTjSV9dUAHw</a> 提取码: c32z </li><li>插入优盘, 使用芯片精灵查看 U盘的 vid 和 pid ,记录下来</li><li>将引导系统写入 U 盘</li><li>打开 U盘,找到 grub.cfg 文件,修改 pid 和 vid 和 U 盘中的一致即可</li><li>重启</li><li>找到机器的 IP,在浏览器上打开,端口默认是 5000, 在线安装最先的版本即可</li></ol><h4 id="方式二安装步骤"><a href="#方式二安装步骤" class="headerlink" title="方式二安装步骤"></a>方式二安装步骤</h4><ol><li>U 盘上安装一份 PE 系统，这里推荐使用微 PE</li><li>将系统镜像 和 写盘工具 拷贝到 U 盘上：链接: <a href="https://pan.baidu.com/s/1T2KibqcSi6t99BPq8VQA7g" target="_blank" rel="noopener">https://pan.baidu.com/s/1T2KibqcSi6t99BPq8VQA7g</a> 提取码: y7x5 ; 链接: <a href="https://pan.baidu.com/s/1QhAkpGxjYoJiKGgMSdFhyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1QhAkpGxjYoJiKGgMSdFhyQ</a> 提取码: 1s45 </li><li>进入 PE 系统，使用 diskgenius 删除 ssd 上的所有分区，再使用写盘工具将镜像写入 ssd 上</li><li>重启系统</li></ol><h3 id="如何洗白"><a href="#如何洗白" class="headerlink" title="如何洗白?"></a>如何洗白?</h3><p>想要洗白, 修改 grub.cfg 配置文件的 sn 和 mac 地址即可<br>mac 地址需要是 001132 开头的<br>这就需要修改机器的物理 IP<br>我这里提供一个方法: 链接: <a href="https://pan.baidu.com/s/1km_LpQprkxPvpQOoe8Pq9w" target="_blank" rel="noopener">https://pan.baidu.com/s/1km_LpQprkxPvpQOoe8Pq9w</a> 提取码: qsvd<br>SN 需要算号器,我这里提供个工具: 链接: <a href="https://pan.baidu.com/s/1-k9Wp82occb6IzUxt37EBw" target="_blank" rel="noopener">https://pan.baidu.com/s/1-k9Wp82occb6IzUxt37EBw</a> 提取码: yxj6</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol><li>自带的 ZUMAX 电源并不是很好,带 4 块硬盘怕只能呵呵,想稳定点还是换个好点的电源,我换了台达 80 金牌 DPS-400AB-12A 1U 电源</li><li>有条件的话,硬盘的背板也还是换了吧,看着做工不是很好</li></ol><h3 id="关于洗白"><a href="#关于洗白" class="headerlink" title="关于洗白"></a>关于洗白</h3><p>个人的建议是:不要洗白!</p><ol><li>因为洗白的主要是用群晖的快连功能,但是据我所用快连的速度并不是很好,还不如自建内网穿透服务  </li><li>容易被检测出来,容易被封号,一旦被封号,系统显示硬盘损毁,数据拷贝不出来,就损失大了  </li></ol><p>黑群一时爽,一直黑群一直爽</p>]]></content>
    
    <summary type="html">
    
      蜗牛星际安装黑群晖
    
    </summary>
    
      <category term="日常折腾篇" scheme="http://blog.joylau.cn/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E7%AF%87/"/>
    
    
      <category term="日常折腾" scheme="http://blog.joylau.cn/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>日常折腾 --- 软路由攒机记录</title>
    <link href="http://blog.joylau.cn/2019/05/22/Daily-Soft-Router/"/>
    <id>http://blog.joylau.cn/2019/05/22/Daily-Soft-Router/</id>
    <published>2019-05-22T06:45:10.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>上篇说到了家里使用多条宽带,而一般的路由器无法使用多个运营商的宽带进行拨号,这就需要软路由了,其实也就是个小主机</p><h3 id="实机"><a href="#实机" class="headerlink" title="实机"></a>实机</h3><p>看下我攒的把</p><p><img src="http://image.joylau.cn/blog/IMG_0314.jpg" alt></p><p><img src="http://image.joylau.cn/blog/IMG_0315.jpg" alt></p><p><img src="http://image.joylau.cn/blog/IMG_0316.jpg" alt></p><h3 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h3><h3 id="主要硬件"><a href="#主要硬件" class="headerlink" title="主要硬件"></a>主要硬件</h3><ul><li>CPU Intel(R) Atom(TM) CPU D525 @ 1.80GHz | 512 KB | 1796 MHz | ×4</li><li>硬盘 ATA DragonDiamond D2 5 (3.75GB)</li><li>内存 2037MB</li><li>主板芯片：Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx DMI Bridge (rev 02)</li><li>网卡：Intel Corporation 82583V Gigabit Network Connection (eth0 20:90:30:e8:2f:99)</li><li>网卡：Intel Corporation 82583V Gigabit Network Connection (eth1 20:90:30:e8:2f:9a)</li><li>网卡：Intel Corporation 82583V Gigabit Network Connection (eth2 20:90:30:e8:2f:9b)</li><li>网卡：Intel Corporation 82583V Gigabit Network Connection (eth3 20:90:30:e8:2f:9c)</li></ul><h3 id="其它硬件"><a href="#其它硬件" class="headerlink" title="其它硬件"></a>其它硬件</h3><ul><li>显卡：Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx Integrated Graphics Controller (rev 02)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB UHCI Controller #4 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB UHCI Controller #5 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB2 EHCI Controller #2 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB UHCI Controller #1 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB UHCI Controller #2 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB UHCI Controller #3 (rev 03)</li><li>USB控制器：Intel Corporation 82801H (ICH8 Family) USB2 EHCI Controller #1 (rev 03)</li><li>PCI桥：Intel Corporation 82801H (ICH8 Family) PCI Express Port 1 (rev 03)</li><li>PCI桥：Intel Corporation 82801H (ICH8 Family) PCI Express Port 2 (rev 03)</li><li>PCI桥：Intel Corporation 82801H (ICH8 Family) PCI Express Port 3 (rev 03)</li><li>PCI桥：Intel Corporation 82801H (ICH8 Family) PCI Express Port 4 (rev 03)</li><li>PCI桥：Intel Corporation 82801H (ICH8 Family) PCI Express Port 5 (rev 03)</li><li>PCI桥：Intel Corporation 82801 Mobile PCI Bridge (rev f3)</li><li>IDE接口：Intel Corporation 82801HM/HEM (ICH8M/ICH8M-E) IDE Controller (rev 03)</li><li>IDE接口：Intel Corporation 82801HM/HEM (ICH8M/ICH8M-E) SATA Controller [IDE mode] (rev 03)</li><li>SMBus：Intel Corporation 82801H (ICH8 Family) SMBus Controller (rev 03)</li></ul><h3 id="我的使用"><a href="#我的使用" class="headerlink" title="我的使用"></a>我的使用</h3><ol><li>四个网口,2 个作为 WAN 口,一个电信宽带,一个长城宽带,一个作为 LAN 口,接台式机,最后一个作为 LAN 口,接路由器的 LAN 口提供 WIFI</li><li>2 个宽带使用负载均衡实现宽带叠加</li><li>端口分流,实现 WIFI 设备走长城宽带的流量,台式机和一些静态的 DHCP 的 IP 走电信流量</li><li>还有一些端口映射和 DMZ 主机和动态域名绑定等普通路由器的功能 (支持 阿里云的 DDNS, 提供 accessKey 和 Access Key Secret 即可)</li></ol><h3 id="花费"><a href="#花费" class="headerlink" title="花费"></a>花费</h3><p>目前这样的配置完全跑个软路由系统绰绰有余了, 我用的是 iKuai, CPU 温度在 22 度左右, CPU 使用率低于 10%, 内存使用率 20% 左右<br>全部花费 234 元</p>]]></content>
    
    <summary type="html">
    
      日常折腾之家里网线改造记录
    
    </summary>
    
      <category term="日常折腾篇" scheme="http://blog.joylau.cn/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E7%AF%87/"/>
    
    
      <category term="日常折腾" scheme="http://blog.joylau.cn/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>日常折腾 --- 家里网线改造记录</title>
    <link href="http://blog.joylau.cn/2019/05/22/Daily-Reform-Cable/"/>
    <id>http://blog.joylau.cn/2019/05/22/Daily-Reform-Cable/</id>
    <published>2019-05-22T03:43:26.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我新办了个电信宽带,并且搞到了公网 IP, 但是原来的长城宽带没到期我还想继续用,而且办的电信宽带有 iTV, 我还想看电视<br>但是现在从墙里的多媒体集线箱到我卧室的线有 2 根,一根电话线,一根超 5 类网线<br>看我如何改造操作</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ol><li>一根电话线(4 根铜线)</li><li>一根超 5 类网线</li></ol><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol><li>同时使用 电信宽带和原来的长城宽带</li><li>能看 iTV 电视, iTV 的线不与电信宽带共享速率, 也就是电信宽带和 iTV 都直接接到电信的光猫上</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>百兆网类,网络数据的传输使用的 B 类网线接法的 1,2,3,6 根线</li><li>4,5,7,8 其实并没有参与数据传输,只是保持数据的稳定性以及抗干扰</li></ul><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">颜色</td><td style="text-align:center">白橙</td><td style="text-align:center">橙</td><td style="text-align:center">白绿</td><td style="text-align:center">蓝</td><td style="text-align:center">白蓝</td><td style="text-align:center">绿</td><td style="text-align:center">白棕</td><td style="text-align:center">棕</td></tr></tbody></table><p>进行拆分</p><table><thead><tr><th>序号</th><th>1</th><th>2</th><th>3</th><th>6</th></tr></thead><tbody><tr><td>颜色</td><td>白橙</td><td>橙</td><td>白绿</td><td>绿</td></tr></tbody></table><table><thead><tr><th>序号</th><th>4</th><th>5</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>颜色</td><td>蓝</td><td>白蓝</td><td>白棕</td><td>棕</td></tr></tbody></table><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><ul><li>8 根铜线的超五类网线分拆为 2 个 4 根线的网线</li><li>这 2 根线分别直接连接电信光猫,一根连接光猫的 LAN1 口, 一根连接 LAN2 口</li><li>电话线也按 1,2,3,6 的接法连接长城宽带</li></ul><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><ul><li>水晶头</li><li>网线钳</li><li>网线直通连接器</li><li>软路由</li></ul>]]></content>
    
    <summary type="html">
    
      日常折腾之家里网线改造记录
    
    </summary>
    
      <category term="日常折腾篇" scheme="http://blog.joylau.cn/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE%E7%AF%87/"/>
    
    
      <category term="日常折腾" scheme="http://blog.joylau.cn/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV --- 知识点速记</title>
    <link href="http://blog.joylau.cn/2019/05/17/OpenCV-Knowledge-Points/"/>
    <id>http://blog.joylau.cn/2019/05/17/OpenCV-Knowledge-Points/</id>
    <published>2019-05-17T02:50:34.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="CV-type-的转换"><a href="#CV-type-的转换" class="headerlink" title="CV type 的转换"></a>CV type 的转换</h4><p>CV_8UC3 转 CV_8UC1 : convertTo 或者 cvtColor<br>CV_8UC1 转 CV_8UC3 : cvtColor (灰度相同,通道已经转化, CV_GRAY2RGB)</p><h4 id="Mat-初始化"><a href="#Mat-初始化" class="headerlink" title="Mat 初始化"></a>Mat 初始化</h4><p>Mat.zeros: 创建全 0 矩阵<br>Mat.ones: 创建全 1 矩阵<br>Mat.eye: 创建单位矩阵</p><h4 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h4><ol><li>判断点与多边形的关系: pointPolygonTest  </li><li>ROI 区域: Rect(col,row,width,height)<ol><li>col: x 坐标 (坐标以 0 开始, 左上角 0,0)</li><li>row: y 坐标</li><li>width: 宽度</li><li>height: 高度</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      OpenCV 知识点速记
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV --- 基于 OpenCV 的百度路况研究记录 (四)</title>
    <link href="http://blog.joylau.cn/2019/05/15/OpenCV-Baidu-Traffic-4/"/>
    <id>http://blog.joylau.cn/2019/05/15/OpenCV-Baidu-Traffic-4/</id>
    <published>2019-05-15T02:28:53.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本篇主要内容:</p><ol><li>搭建离线地址解析服务</li></ol><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p>继上篇研究内容之后,重新思考了之前抛出的问题: 如何获取某个省或市的道路信息?</p><p>之前对于该问题的解法有 2 种:</p><ol><li><p>使用总队或者支队提供的道路信息,然后根据分析出来的经纬度和提供的道路信息进行匹配</p></li><li><p>调用互联网接口,进行经纬度转道路地址</p></li></ol><p>分析这 2 中方式之后,其弊端很明显:</p><p>第一种方式:  </p><ol><li><p>无法确定总队或者支队是否能够提供道路信息; </p></li><li><p>提供的数据又是否足够详细全面,要知道在百度地图 17 等级下,解析出来的道路是很详细的 </p></li><li><p>姑且算是提供了,格式又是否能够统一? 能否做到一套代码解决普遍问题?</p></li></ol><p>第二种方式:</p><ol><li><p>需要个人申请 key ,才能调用 API</p></li><li><p>解析 API 每日有次数限制, 5000次/天,对于该城市版分析服务来说,远远不够 </p></li></ol><p>经过一番分析和折腾后,于内网搭建了离线版的地址解析服务,提供 API,将经纬度转化为道路信息, API 返回数据如下:</p><p><img src="http://image.joylau.cn/blog/geocoder-reverse.png" alt></p><p>支持返回的数据很详细: 省,市,行政区划,邮编,道路名,附近的建筑物,公交站牌,商场等</p><p>该服务 数据范围覆盖全国,  支持多线程调用,  单次 API 调用耗时为 10 ms - 30 ms 左右,  对机器的磁盘要求高</p><p>最后,我录了个短视频看下实际的使用效果:</p><center><video src="http://image.joylau.cn/blog/geocoder-reverse.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center>]]></content>
    
    <summary type="html">
    
      基于 OpenCV 的百度路况研究记录
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV --- 基于 OpenCV 的百度路况研究记录 (三)</title>
    <link href="http://blog.joylau.cn/2019/05/10/OpenCV-Baidu-Traffic-3/"/>
    <id>http://blog.joylau.cn/2019/05/10/OpenCV-Baidu-Traffic-3/</id>
    <published>2019-05-10T02:06:41.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本篇研究的内容有:</p><ol><li><p>分析得到的大量拥堵点抽稀处理</p></li><li><p>拥堵区域骨架提取</p></li><li><p>部分优化算法和性能</p></li></ol><h3 id="抽稀处理"><a href="#抽稀处理" class="headerlink" title="抽稀处理"></a>抽稀处理</h3><p>根据之前的处理得到一张瓦片的一块拥堵区域时,需要对其进行结构化数据的分析:将坐标转化为百度坐标系的坐标,坐标转经纬度,拥堵距离计算,</p><p>但是一块区域有很多的拥堵点,如果要对每个点进行操作计算的话,会导致性能问题,而且对于密集的点来说</p><p>意义不大,没有必要这么做,如果说能够给这些点进行稀释处理,仅仅分析稀释后点,那么既能保证数据的正确性,又能提升算法的性能</p><p>算法的基本思想: 连接起点 A 和终点 B, 找出某一点到线段 AB 距离 S 最大的点 P, 如果 S 小于手动设置的阈值 H, 则舍弃其他点,直接连接 A B, 抽稀完成</p><p>如 S &gt; H , 则以 P 为终点, 分别计算 2 端 AP 和 PB 上点到相应线段的最大距离,再重复上述步骤, 直到所有的距离均小于 S , 抽稀完成 </p><p>抽稀结果示例:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.27.04.png" alt>  </p><p>上图中,已经将上面的拥堵部分大量点稀释的只剩下 3 个点了,这三个点还是位于原来的轨迹上, 可能看的不太清楚,放大了看  </p><p><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.27.19.png" alt><br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.27.26.png" alt>  </p><p>示例 2 :</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-4.15.27.png" alt>  </p><p>对于抽稀最大直观效果,我通过下面 2 张动图来演示:  </p><p>抽稀前:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.02.49.gif" alt></p><p>抽稀后:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.05.08.gif" alt></p><h3 id="骨架提取"><a href="#骨架提取" class="headerlink" title="骨架提取"></a>骨架提取</h3><p>骨架提取是指从原来的图中层层剥离点,最后仍然要保持原来的形状</p><p>算法基本思想:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-16-52-57.jpeg" alt></p><p>效果示例:</p><p>我以这张拥堵瓦片图来看, 我提取出左上角的拥堵部分来处理</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/17.png" alt></p><p>轮廓提取:</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.24.43.png" alt></p><p>填充内部:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.24.59.png" alt></p><p>上述 2 中图进行加运算, 得到整个拥堵部分,再进行骨架提取:</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.25.07.png" alt></p><p>已经得到最小化的骨架了,基本上都是 1 像素值,这对后续的处理很有利,再放大点看:<br><img src="http://image.joylau.cn/blog/baidu-traffic/2019-04-30-2.25.24.png" alt></p><p>最后,我录了个视频，以展示目前的演示效果:</p><center><video src="http://image.joylau.cn/blog/baidu-traffic/traffic-demo.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center>]]></content>
    
    <summary type="html">
    
      基于 OpenCV 的百度路况研究记录
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV --- 基于 OpenCV 的百度路况研究记录 (二)</title>
    <link href="http://blog.joylau.cn/2019/05/05/OpenCV-Baidu-Traffic-2/"/>
    <id>http://blog.joylau.cn/2019/05/05/OpenCV-Baidu-Traffic-2/</id>
    <published>2019-05-05T01:52:17.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本篇就之前对于拥堵路段为曲线状且涉及多个路段时分析的结果差强人意的情况进行了算法重构</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>之前算法核心是 找出分段拥堵,并提取信息<br>之前算法的缺陷是使用霍夫变换提取瓦片中的直线时, 无法很好的控制参数, 导致在临近的曲线情况下分析结果不正确<br>简单示意图:<br><img src="http://image.joylau.cn/blog/baidu-traffic/8.gif" alt>  </p><p>在二维的坐标系中, 控制直线的是参数 m(斜率) 和 b(截距)</p><p>转化为极坐标系再化简后,控制直线的参数是  θ (极角) 和 r(极径)</p><p>原来的思路是曲线是有很多小部分的直线段构成的,如若能够将曲线分成适合的若干线段,那么同样可以将整个曲线提取出来,继而提取其他信息</p><p>这种思路得考虑三种主要的参数:</p><ol><li><p>threshold：识别某部分为一条直线时必须达到的值</p></li><li><p>min_theta：检测到的直线的最小角度</p></li><li><p>max_theta：检测到的直线的最大角度</p></li></ol><p>然而经过多次测试,按照这个想法进行处理,结果并不好, 出现更多的结果是</p><ol><li><p>曲线 a 会被他的相邻曲线 b 干扰,继续分析的结果是会从 a 与 b 的相邻端直接跳到 b 曲线上,接着分析的线路走向就会直接沿着 b 走下去, 就是上次截图所示的结果</p></li><li><p>曲线 a 会有多处幅度较大的弯曲时,会沿着角度大的地方直接放射出去, 例如下面所测试的</p></li></ol><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>下面测试的参数</p><p>threshold: 65</p><p>min_theta: 0</p><p>max_theta: 5</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/9.gif" alt>  </p><p>对于形态各异的瓦片图来说,很难调整出一个适当的参数.  </p><p>于是我开始重整思路, 但是思路的核心还是不变: 找出分段拥堵  </p><p>目前的思路是:</p><ol><li><p>读入瓦片原图(RGBA)</p></li><li><p>进行色彩空间转换: 将带透明通道的 RGBA 转换为 BGR, 再将 BRG 转化为 HSV 色彩空间,方便颜色的提取</p></li><li><p>在 HSV 的色彩空间上提取出黄色(缓行)和红色(拥堵), 并各自区分保存</p></li><li><p>得到的图像信息二值化, 方便下一步处理</p></li><li><p>在二值化的图像上提取黄色和红色的边缘信息, 分析边缘信息得到分段拥堵的外包矩形</p></li><li><p>已有的黄,红拥堵段做外包矩形的位置定位,得出分段拥堵信息</p></li><li><p>大量坐标点抽稀处理</p></li></ol><p>开发一系列流程截图如下:</p><p><img src="http://image.joylau.cn/blog/baidu-traffic/10.gif" alt>  </p><p>图示的顺序依次对应思路的步骤, 在最后一张图中,已经将分析出来的分段拥堵信息再绘制到原图上, 准确度很高  </p><p>对于之前算法没有解决的瓦片,这个算法暂时算是解决了,那么面对更加复杂的拥堵情况呢?  </p><p>为此我特地抽取了北京天安门附近的拥堵瓦片图  </p><p><img src="http://image.joylau.cn/blog/baidu-traffic/11.gif" alt>  </p><p>这张图里反应的拥堵情况应该很具有代表性了,下面再用此算法对这张图进行分析:  </p><p><img src="http://image.joylau.cn/blog/baidu-traffic/12.gif" alt>  </p><p>值得一提的是, 前一张图片处理耗时时间是: 0.08534727 s; 而后一张图片处理的时间是: 0.084427357 s, 时间基本无差.</p>]]></content>
    
    <summary type="html">
    
      基于 OpenCV 的百度路况研究记录
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV --- 基于 OpenCV 的百度路况研究记录 (一)</title>
    <link href="http://blog.joylau.cn/2019/05/01/OpenCV-Baidu-Traffic-1/"/>
    <id>http://blog.joylau.cn/2019/05/01/OpenCV-Baidu-Traffic-1/</id>
    <published>2019-05-01T01:24:01.000Z</published>
    <updated>2019-05-22T16:01:04.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>城市版交通路况的分析基于高速公路路况的基础上以合肥为试点城市进行的研究课题. </p><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>目前该研究课题已完成:</p><ol><li>筛选出合肥市在百度地图 17 等级下的路况瓦片 62354 张</li><li>对合肥二环路内圈的路况进行分析,目前分析出的路况开发截图</li></ol><p><img src="http://image.joylau.cn/blog/baidu-traffic/1.gif" alt></p><p>分析结果: 用蓝色的线表示,画线时未区分颜色,实际分析已区分<br><img src="http://image.joylau.cn/blog/baidu-traffic/2.gif" alt></p><p>目前已分析提取出的数据有:</p><ol><li><p>拥堵段 2 端点的经纬度(百度,WGS84坐标系)</p></li><li><p>拥堵段距离,精确到到 0.1 m</p></li><li><p>拥堵段的拥堵状态 (缓行,拥堵,严重拥堵)</p></li><li><p>拥堵段的 WKT 空间信息, 单段 拥堵为 lineString格式, 近距离多段拥堵为 multiLineString 格式, 此信息可直接绘制在地图上</p></li><li><p>提取出瓦片的拥堵信息,再根据我们自己项目中使用的地图的比例尺渲染成适合我们地图的路况图层</p></li></ol><p>目前该研究课题存在的问题:</p><ol><li>有些复杂路口分析不正确,例如:<br><img src="http://image.joylau.cn/blog/baidu-traffic/3.gif" alt>  </li></ol><p>进行分析后,会变成下面这样:<br><img src="http://image.joylau.cn/blog/baidu-traffic/4.gif" alt>  </p><p>还有这样的:<br><img src="http://image.joylau.cn/blog/baidu-traffic/5.gif" alt>  </p><p>结果 :<br><img src="http://image.joylau.cn/blog/baidu-traffic/6.gif" alt>  </p><p>目前的分析算法对于单张瓦片多处拥堵,且拥堵路段呈直线状分析结果准确,对于拥堵路段为曲线状且涉及多个路段时分析的结果不如人意,这是目前分析算法的原因,尚待改进.  </p><p>性能问题,我目前测试了合肥二环路内圈的路况耗时日志结果如下:<br><img src="http://image.joylau.cn/blog/baidu-traffic/7.gif" alt>  </p><p>该测试结果是我在笔记本上运行的结果,其中参数配置是:  </p><ol><li><p>CPU : 2.8 GHz Intel Core i7-4 * 2核心, RAM:  16 GB 2133 MHz LPDDR3 , Graphics Card: Radeon Pro 555 2 GB</p></li><li><p>程序运行核心线程数 2 , 最大线程数 5, 运行过程中 CPU 使用率 50% ~ 60%</p></li><li><p>测试时间  4 月 16 日下午 16 点左右</p></li></ol><p>测试结果: 单机运行, 12685 张图片耗时 714 s, 平均处理速度 18 张/秒 左右</p><p>相对于安徽高速,城市版的瓦片分析已经从 Java 的图片处理切换到 OpenCV,有个因素是 OpenCV 绝大数 API 是支持图形卡加速的,我本机的开发环境是开启了图形卡加速,但是一般的服务器是没有图形卡的.</p><p>未知因素: 获取合肥市内路网信息,获取后可进一步分析出以下信息:</p><ol><li><p>获取详细的拥堵文字描述信息</p></li><li><p>按照某一条路进行分组,方便对一条路上多段拥堵进行合并</p></li><li><p>分析出拥堵路段涉及的行政区划</p></li><li><p>分析出该次拥堵的状态(首次拥堵,持续拥堵,结束拥堵),及拥堵持续时间</p></li></ol>]]></content>
    
    <summary type="html">
    
      基于 OpenCV 的百度路况研究记录
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 序列化返回对象时忽略空或者 null 属性</title>
    <link href="http://blog.joylau.cn/2019/04/25/SpringBoot-Response-Ignore-Null/"/>
    <id>http://blog.joylau.cn/2019/04/25/SpringBoot-Response-Ignore-Null/</id>
    <published>2019-04-25T07:24:19.000Z</published>
    <updated>2019-05-15T16:01:05.393Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>在类上加入注解<br><code>@JsonInclude(JsonInclude.Include.NON_EMPTY)</code></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p><code>Include.Include.ALWAYS</code>: 默认<br><code>Include.NON_DEFAULT</code>: 属性为默认值不序列化<br><code>Include.NON_EMPTY</code>: 属性为 空（””） 或者为 NULL 都不序列化<br><code>Include.NON_NULL</code>: 属性为NULL 不序列化</p>]]></content>
    
    <summary type="html">
    
      SpringBoot 序列化返回对象时忽略空或者 null 属性
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 使用 Ajax FromData 上传文件并传参</title>
    <link href="http://blog.joylau.cn/2019/04/15/SpringBoot-Ajax-FormData/"/>
    <id>http://blog.joylau.cn/2019/04/15/SpringBoot-Ajax-FormData/</id>
    <published>2019-04-15T09:04:19.000Z</published>
    <updated>2019-05-15T16:01:05.393Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">fileList.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    formData.append(<span class="string">'file'</span>, file.originFileObj);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个表单是否填写完成</span></span><br><span class="line"><span class="keyword">let</span> params = [];</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">data.filePath = <span class="string">""</span>;</span><br><span class="line">data.markers = params;</span><br><span class="line">formData.append(<span class="string">"params"</span>, data);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"/marker/file"</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    processData: <span class="literal">false</span>,</span><br><span class="line">    contentType: <span class="literal">false</span>,</span><br><span class="line">    data: formData,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="spring-boot-处理"><a href="#spring-boot-处理" class="headerlink" title="spring boot 处理"></a>spring boot 处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">markerFile</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile, Params params)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> markerService.marker(multipartFile,params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>antd 上传组件里,真正的文件是 file.originFileObj</li><li>params 是复杂的对象的话, spring boot 接受的 Params 对象需要使用 String 字符串进行序列化成对象; 或者将 Params 对象的属性分开来写, 如果某个属性又是复杂对象的话通用需要序列化</li></ol>]]></content>
    
    <summary type="html">
    
      SpringBoot 使用 Ajax From Data 来上传文件和参数并进行处理
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 优雅的远程桌面服务端配置</title>
    <link href="http://blog.joylau.cn/2019/04/10/Ubuntu-Remote-Desktop/"/>
    <id>http://blog.joylau.cn/2019/04/10/Ubuntu-Remote-Desktop/</id>
    <published>2019-04-10T08:32:14.000Z</published>
    <updated>2019-04-10T10:12:41.443Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上一篇文章记录了因为远程桌面连接把 Ubuntu 的 <code>/home</code> 弄坏了<br>好一番折腾。。。。<br>其实这个远程桌面我早就想重新配置了，今天我终于受不了它了，于是我觉得仔细研究一番找到适合我自己的方式来操作</p><h2 id="以前的方式"><a href="#以前的方式" class="headerlink" title="以前的方式"></a>以前的方式</h2><p>之前我的远程配置是 <code>xrdp</code> + <code>tightvncserver</code><br>然后我每次都是使用 Windows 上的 <code>mstsc</code> 来连接的<br>连接上后会出现 <code>xrpd</code> 的登录选项<br>每次我都选第一个 <code>sesman-Xvnc</code> 然后输入用户名密码即可</p><p>可这样的连接方式有个很不好的方面，就是这种方式是多用户的，想回家继续没干完的事情<br>连接上发现是一个新的桌面<br>都不知道做到什么地方了</p><p>这也就算了</p><p>最大的问题远程操作操作这就没响应了，鼠标的指针变成了 × 号，所有的东西都不能点，而且第二天到公司桌面卡死不动，只能重启桌面或重启系统，很多打开软件和工具都会还原</p><p>这是我最不能忍的地方</p><h2 id="决定改变"><a href="#决定改变" class="headerlink" title="决定改变"></a>决定改变</h2><p>我决定不使用这种方式来进行远程，远程 <code>teamviewer</code> 是比较合适的选择，但是工作由于连接的终端太多，被检测商用，每次连接都是只有 1 min 的操作时间<br>很尴尬…</p><p>最后决定使用轻量级的 <code>vnc</code> 服务来解决这个问题，并且搭配 <code>xrdp</code> 的 <code>any vnc</code> 来使用 <code>mstsc</code> 远程连接</p><h2 id="重新配置"><a href="#重新配置" class="headerlink" title="重新配置"></a>重新配置</h2><h3 id="x11vnc"><a href="#x11vnc" class="headerlink" title="x11vnc"></a>x11vnc</h3><ol><li>卸载以前的 vnc 服务端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove tigervncserver</span><br><span class="line">sudo apt remove tightvncserver</span><br><span class="line">systemcrl auto remove</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 <code>x11vnc</code> ,并进行配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install x11vnc -y</span><br><span class="line"></span><br><span class="line">sudo x11vnc -storepasswd /etc/x11vnc.pass <span class="comment"># 配置访问密码并存储</span></span><br><span class="line"></span><br><span class="line">vim  /lib/systemd/system/x11vnc.service <span class="comment"># 创建系统服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务配置</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Start x11vnc at startup.</span><br><span class="line">After=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/x11vnc -auth guess -forever -loop -noxdamage -repeat -rfbauth /etc/x11vnc.pass -rfbport 5900 -shared</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> x11vnc.service</span><br><span class="line">systemctl start x11vnc.service</span><br></pre></td></tr></table></figure><h3 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h3><p>下载 vnc-view 新建一个连接发现连不上…<br>尴尬。。。<br>检查 <code>5900</code> 端口，是开放的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">joylau@joylau-work-192:~$ sudo netstat -tnlp | grep :5900</span><br><span class="line">tcp        0      0 0.0.0.0:5900            0.0.0.0:*               LISTEN      4022/vino-server</span><br><span class="line">tcp6       0      0 :::5900                 :::*                    LISTEN      4022/vino-server</span><br></pre></td></tr></table></figure><p>但是使用的进程是 <code>vino-server</code> ，这是 Ubuntu 自带程序开启的服务<br>原来端口被占用了<br>关闭服务 ： 找到桌面共享，关闭 <code>允许其他人查看您的桌面</code><br>重启 <code>x11vnc</code> 服务<br>连接成功</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在有 4 中方式使用</p><ol><li>使用 <code>vnc-view</code> 使用是单用户的，类似 <code>teamviewer</code> 那样，2 边操作都能互相看见</li><li>使用 <code>mstsc</code> , 连接到 <code>xrdp</code> 后，再选中 <code>any vnc</code> 使用 <code>vnc</code> 协议连接，效果和第一种是一样的，只不过不需要客户端了</li><li>浏览器直接远程，这种最方便，下面有说明</li><li>以前的那种使用方式， 多用户的，估计我是不会再用了</li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>第三种多用户方式连接，没连接一次就生成一个新的桌面，这个很烦，想连接回上次的桌面，可修改配置 <code>/etc/xrdp/xrdp.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[globals]</span><br><span class="line"></span><br><span class="line">bitmap_cache=yes 位图缓存</span><br><span class="line"></span><br><span class="line">bitmap_compression=yes 位图压缩</span><br><span class="line"></span><br><span class="line">port=3389 xrdp监听的端口（重要）</span><br><span class="line"></span><br><span class="line">crypt_level=low 加密程度（low为40位，high为128位，medium为双40位）</span><br><span class="line"></span><br><span class="line">channel_code=1</span><br><span class="line"></span><br><span class="line">max_bpp=24 XRDP最大连接数</span><br><span class="line"></span><br><span class="line">[xrdp1]</span><br><span class="line"></span><br><span class="line">name=sesman-Xvnc XRDP的连接模式</span><br><span class="line"></span><br><span class="line">lib=libvnc.so</span><br><span class="line"></span><br><span class="line">username=ask</span><br><span class="line"></span><br><span class="line">password=ask</span><br><span class="line"></span><br><span class="line">ip=127.0.0.1</span><br><span class="line"></span><br><span class="line">port=-1</span><br></pre></td></tr></table></figure><p>修改 port 为 固定端口号或者 <code>ask-1</code><br>下次连接不修改即可</p><p>注：再记录下 <code>sesman.ini</code> 的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[Globals]</span><br><span class="line"></span><br><span class="line">ListenAddress=127.0.0.1 监听ip地址(默认即可)</span><br><span class="line"></span><br><span class="line">ListenPort=3350 监听端口(默认即可)</span><br><span class="line"></span><br><span class="line">EnableUserWindowManager=1 1为开启,可让用户自定义自己的启动脚本</span><br><span class="line"></span><br><span class="line">UserWindowManager=startwm.sh</span><br><span class="line"></span><br><span class="line">DefaultWindowManager=startwm.sh</span><br><span class="line"></span><br><span class="line">[Security]</span><br><span class="line"></span><br><span class="line">AllowRootLogin=1 允许root登陆</span><br><span class="line"></span><br><span class="line">MaxLoginRetry=4 最大重试次数</span><br><span class="line"></span><br><span class="line">TerminalServerUsers=tSUSErs 允许连接的用户组(如果不存在则默认全部用户允许连接)</span><br><span class="line"></span><br><span class="line">TerminalServerAdmins=tsadmins 允许连接的超级用户(如果不存在则默认全部用户允许连接)</span><br><span class="line"></span><br><span class="line">[Sessions]</span><br><span class="line"></span><br><span class="line">MaxSessions=10 每个用户最大会话数</span><br><span class="line"></span><br><span class="line">KillDisconnected=0 是否立即关闭断开的连接(如果为1,则断开连接后会自动注销)</span><br><span class="line"></span><br><span class="line">IdleTimeLimit=0 空闲会话时间限制(0为没有限制)</span><br><span class="line"></span><br><span class="line">DisconnectedTimeLimit=0 断开连接的存活时间(0为没有限制)</span><br><span class="line"></span><br><span class="line">[Logging]</span><br><span class="line"></span><br><span class="line">LogFile=./sesman.log 登陆日志文件</span><br><span class="line"></span><br><span class="line">LogLevel=DEBUG 登陆日志记录等级(级别分别为,core,error,warn,info,debug)</span><br><span class="line"></span><br><span class="line">EnableSyslog=0 是否开启日志</span><br><span class="line"></span><br><span class="line">SyslogLevel=DEBUG 系统日志记录等级</span><br></pre></td></tr></table></figure><h2 id="使用浏览器来远程桌面"><a href="#使用浏览器来远程桌面" class="headerlink" title="使用浏览器来远程桌面"></a>使用浏览器来远程桌面</h2><p>像阿里云等云服务提供商一样直接在浏览器上进行远程操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -e REMOTE_HOST=192.168.10.192 -e REMOTE_PORT=5900 -p 8081:8081 -d --restart always --name novnc dougw/novnc</span><br></pre></td></tr></table></figure><p>打开浏览器 <a href="http://host:8081/vnc.html" target="_blank" rel="noopener">http://host:8081/vnc.html</a></p><p>秀啊！！！</p>]]></content>
    
    <summary type="html">
    
      Ubuntu 自用远程桌面服务端配置
    
    </summary>
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>记录一次 Ubuntu 因磁盘问题导致开机进入紧急模式的情况</title>
    <link href="http://blog.joylau.cn/2019/04/10/Linux-Fix-DiskError/"/>
    <id>http://blog.joylau.cn/2019/04/10/Linux-Fix-DiskError/</id>
    <published>2019-04-10T02:44:10.000Z</published>
    <updated>2019-04-10T03:21:05.620Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在家里使用 vnc 协议远程连接公司的 Ubuntu 电脑<br>导致桌面卡死<br>期间还遇到了 搜狗输入法崩溃，提示我删除用户目录下的一个文件然后重启<br>鼠标可以动<br>界面上的任何东西都无法点击<br>没再操作<br>等第二天到公司解决</p><h2 id="不重启解决-Ubuntu-桌面卡死"><a href="#不重启解决-Ubuntu-桌面卡死" class="headerlink" title="不重启解决 Ubuntu 桌面卡死"></a>不重启解决 Ubuntu 桌面卡死</h2><p>这样的情况遇到很多了<br>ctrl + alt + f1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -t tty7</span><br><span class="line"></span><br><span class="line">PID TTY          TIME CMD</span><br><span class="line">1758 tty7     00:00:55 Xorg</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 1758</span><br></pre></td></tr></table></figure><p>之后桌面上的应用都会被关闭，回到登录界面</p><h2 id="重启进入紧急模式"><a href="#重启进入紧急模式" class="headerlink" title="重启进入紧急模式"></a>重启进入紧急模式</h2><p>之后我想着电脑很久没关机了，想重启一下，顺便去倒杯水<br>回来之后发现系统正在进行磁盘检测并且之后进入了紧急模式</p><p><code>journalctl -xb</code> 查看启动日志</p><p>一直往下翻</p><p>发现 <code>/dev/sdb6</code> 分区出现问题导致系统无法启动</p><p>使用 <code>lsblk</code> 查看分区挂载情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">joylau@joylau-work-192:~$ lsblk -f</span><br><span class="line">NAME   FSTYPE   LABEL    UUID                                 MOUNTPOINT</span><br><span class="line">loop1  squashfs                                               /snap/core/6405</span><br><span class="line">sdb                                                           </span><br><span class="line">├─sdb2                                                        </span><br><span class="line">├─sdb5 ext4              4ff695c6-b2ef-46d9-8501-c7e8ee61edda /</span><br><span class="line">├─sdb1 ext4              98f0eb66-3d90-4bc5-a1f0-d3117de87809 /boot</span><br><span class="line">└─sdb6 ext4              76ad5dc1-37b7-4624-830b-d923dac8ac48 </span><br><span class="line">loop4  squashfs                                               /snap/redis-desktop-manager/191</span><br><span class="line">loop2  squashfs                                               /snap/core/6673</span><br><span class="line">loop0  squashfs                                               /snap/redis-desktop-manager/156</span><br><span class="line">sdc                                                           </span><br><span class="line">├─sdc2 ntfs     新加卷   AE5CA91F5CA8E2F7                     /media/extra</span><br><span class="line">└─sdc1 ntfs     新加卷   0CBC9840BC9825EC                     </span><br><span class="line">sda                                                           </span><br><span class="line">├─sda2 ntfs              5E68EE4D68EE240D                     </span><br><span class="line">├─sda7 ntfs              EAD67107D670D573                     </span><br><span class="line">├─sda5 ntfs              9E14908214905ED9                     </span><br><span class="line">├─sda3                                                        </span><br><span class="line">├─sda1 ntfs     系统保留 A27AE98B7AE95C93                     </span><br><span class="line">└─sda6 ntfs              E2D84A6BD84A3E53                     /media/extra_2</span><br><span class="line">loop3  squashfs</span><br></pre></td></tr></table></figure><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>上面看到 sdb6 没有挂载点，实际上是有的，只不过现在出问题了没有挂载上<br>可以找 UUID <strong>76ad5dc1-37b7-4624-830b-d923dac8ac48</strong></p><p>查看 <code>/etc/fstab</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/fstab: static file system information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use 'blkid' to print the universally unique identifier for a</span></span><br><span class="line"><span class="comment"># device; this may be used with UUID= as a more robust way to name devices</span></span><br><span class="line"><span class="comment"># that works even if disks are added and removed. See fstab(5).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span><br><span class="line"><span class="comment"># / was on /dev/sdb5 during installation</span></span><br><span class="line">UUID=4ff695c6-b2ef-46d9-8501-c7e8ee61edda /               ext4    errors=remount-ro 0       1</span><br><span class="line"><span class="comment"># /boot was on /dev/sdb1 during installation</span></span><br><span class="line">UUID=98f0eb66-3d90-4bc5-a1f0-d3117de87809 /boot           ext4    defaults        0       2</span><br><span class="line"><span class="comment"># /home was on /dev/sdb6 during installation</span></span><br><span class="line">UUID=76ad5dc1-37b7-4624-830b-d923dac8ac48 /home           ext4    defaults        0       2</span><br><span class="line"><span class="comment"># swap was on /dev/sdc5 during installation</span></span><br><span class="line"><span class="comment">#UUID=a99b0d98-9282-4e52-8f49-74b9b1f2ed8e none            swap    sw              0       0</span></span><br><span class="line"></span><br><span class="line">UUID=AE5CA91F5CA8E2F7                     /media/extra    ntfs   defaults         0       0</span><br><span class="line">UUID=E2D84A6BD84A3E53                     /media/extra_2    ntfs   defaults         0       0</span><br></pre></td></tr></table></figure><p>查看到 <strong>76ad5dc1-37b7-4624-830b-d923dac8ac48</strong> 对应挂载的 <code>/home</code> 目录</p><p>后面的 pass 写的是 2 ，就是说开机进行磁盘检查，并且数值越小，越先检查</p><p>这里有个临时的解决方式就是将 <code>/home</code> 的 pass 改为 0 ，也就是开机不进行检查，该分区有问题并不代表分区不可用</p><p>改完后依然可以访问 <code>/home</code> 目录</p><h2 id="磁盘修复"><a href="#磁盘修复" class="headerlink" title="磁盘修复"></a>磁盘修复</h2><p>强迫症让我不能就这么将就<br>我觉得修复这个磁盘错误<br>使用命令修复这个错误如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsck -y /dev/sdb6</span><br></pre></td></tr></table></figure><p>结果提示 分区已挂载，操作被终止</p><p>修改 fstab 将 sdb6 挂载的那行注释<br>重启<br>进入紧急模式<br>运行 <code>fsck -y /dev/sdb6</code><br>这时会打印很多日志<br>重复执行，直到没有日志打印</p><p>这时在修改 fstab, 去掉注释，pass 改为 2<br>重启<br>解决 </p>]]></content>
    
    <summary type="html">
    
      记录一次 Ubuntu 因磁盘问题导致开机进入紧急模式的情况
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 启动报错： Error starting daemon： Error initializing network controller： list bridge addresses failed： no available network</title>
    <link href="http://blog.joylau.cn/2019/04/08/Docker-Start-Error/"/>
    <id>http://blog.joylau.cn/2019/04/08/Docker-Start-Error/</id>
    <published>2019-04-08T09:15:06.000Z</published>
    <updated>2019-04-08T09:25:25.379Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Docker 启动报错： Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</p><h2 id="错误详情"><a href="#错误详情" class="headerlink" title="错误详情"></a>错误详情</h2><p>查看错误日志： <code>journalctl -xe | grep docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@lenovo docker]<span class="comment"># journalctl -xe | grep docker</span></span><br><span class="line">-- Subject: Unit docker.socket has begun start-up</span><br><span class="line">-- Unit docker.socket has begun starting up.</span><br><span class="line">-- Subject: Unit docker.socket has finished start-up</span><br><span class="line">-- Unit docker.socket has finished starting up.</span><br><span class="line">-- Subject: Unit docker.service has begun start-up</span><br><span class="line">-- Unit docker.service has begun starting up.</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.909025064+08:00"</span> level=info msg=<span class="string">"parsed scheme: \"unix\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.909923898+08:00"</span> level=info msg=<span class="string">"scheme \"unix\" not registered, fallback to default scheme"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.910865280+08:00"</span> level=info msg=<span class="string">"parsed scheme: \"unix\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.910909267+08:00"</span> level=info msg=<span class="string">"scheme \"unix\" not registered, fallback to default scheme"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.928785984+08:00"</span> level=info msg=<span class="string">"ccResolverWrapper: sending new addresses to cc: [&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;]"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.928902169+08:00"</span> level=info msg=<span class="string">"ClientConn switching balancer to \"pick_first\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.929039549+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc420606e00, CONNECTING"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937533340+08:00"</span> level=info msg=<span class="string">"ccResolverWrapper: sending new addresses to cc: [&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;]"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937601232+08:00"</span> level=info msg=<span class="string">"ClientConn switching balancer to \"pick_first\""</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.937707487+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc42015bf00, CONNECTING"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.950807950+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc42015bf00, READY"</span> module=grpc</span><br><span class="line">4月 08 16:42:09 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:09.952160247+08:00"</span> level=info msg=<span class="string">"pickfirstBalancer: HandleSubConnStateChange: 0xc420606e00, READY"</span> module=grpc</span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:10.216864045+08:00"</span> level=info msg=<span class="string">"Graph migration to content-addressability took 0.00 seconds"</span></span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: time=<span class="string">"2019-04-08T16:42:10.218710988+08:00"</span> level=info msg=<span class="string">"Loading containers: start."</span></span><br><span class="line">4月 08 16:42:10 lenovo dockerd[1742]: Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">-- Subject: Unit docker.service has failed</span><br><span class="line">-- Unit docker.service has failed.</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">4月 08 16:42:10 lenovo systemd[1]: docker.service failed.</span><br><span class="line">4月 08 16:42:13 lenovo systemd[1]: docker.service holdoff time over, scheduling restart.</span><br><span class="line">-- Subject: Unit docker.socket has begun shutting down</span><br><span class="line">-- Unit docker.socket has begun shutting down.</span><br><span class="line">-- Subject: Unit docker.socket has begun start-up</span><br><span class="line">-- Unit docker.socket has begun starting up.</span><br><span class="line">-- Subject: Unit docker.socket has finished start-up</span><br><span class="line">-- Unit docker.socket has finished starting up.</span><br><span class="line">-- Subject: Unit docker.service has begun start-up</span><br><span class="line">-- Unit docker.service has begun starting up.</span><br></pre></td></tr></table></figure><p>看到这样一句话： <strong>Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</strong></p><p>查看本机网络： <code>ip a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@lenovo docker]<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp7s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000</span><br><span class="line">    link/ether b8:70:f4:24:61:a7 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: wlp8s0b1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether cc:af:78:25:31:51 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.145/24 brd 192.168.10.255 scope global noprefixroute wlp8s0b1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::8de1:5b7d:b7d7:2788/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100</span><br><span class="line">    link/none </span><br><span class="line">    inet 192.168.255.10 peer 192.168.255.9/32 scope global tun0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::e41d:195:f566:33e1/64 scope link flags 800 </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>没有 docker0 的桥接网络</p><p>手动添加一个即可</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link add name docker0 <span class="built_in">type</span> bridge</span><br><span class="line">ip addr add dev docker0 172.17.0.1/16</span><br></pre></td></tr></table></figure><p>再看一下，多了一个 docker0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5: docker0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether a6:7d:d7:94:ab:f3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>重启 docker 即可</p>]]></content>
    
    <summary type="html">
    
      Error starting daemon： Error initializing network controller： list bridge addresses failed： no available network
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 读取数据流图片</title>
    <link href="http://blog.joylau.cn/2019/04/03/OpenCV-ByteImage/"/>
    <id>http://blog.joylau.cn/2019/04/03/OpenCV-ByteImage/</id>
    <published>2019-04-03T02:54:28.000Z</published>
    <updated>2019-04-03T08:18:19.104Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>OpenCV 提供的 API 是直接根据路径读取图片的, 在实际生产环境中,可能大部分情况下都是直接读取网络图片</p><p>在内存就完成图片和 opencv 的 Mat 对象的转换</p><p>那么该如何读取 byte[] 的图片呢?</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>openCV 提供的 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat src = Imgcodecs.imread(<span class="string">"/static/img/17.png"</span>);</span><br></pre></td></tr></table></figure><p>很简单的就转化为 Mat 对象</p><p>而 该方法后面还有一个参数, flags, 该参数可选项有:</p><ul><li><strong>IMREAD_UNCHANGED</strong> = -1,</li><li><strong>IMREAD_GRAYSCALE</strong> = 0,</li><li><strong>IMREAD_COLOR</strong> = 1,</li><li><strong>IMREAD_ANYDEPTH</strong> = 2,</li><li><strong>IMREAD_ANYCOLOR</strong> = 4,</li><li><strong>IMREAD_LOAD_GDAL</strong> = 8,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_2</strong> = 16,</li><li><strong>IMREAD_REDUCED_COLOR_2</strong> = 17,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_4</strong> = 32,</li><li><strong>IMREAD_REDUCED_COLOR_4</strong> = 33,</li><li><strong>IMREAD_REDUCED_GRAYSCALE_8</strong> = 64,</li><li><strong>IMREAD_REDUCED_COLOR_8</strong> = 65,</li><li><strong>IMREAD_IGNORE_ORIENTATION</strong> = 128;</li></ul><p>IMREAD_UNCHANGED: 以图片原有的方式读入,不进行任何改变<br>IMREAD_GRAYSCALE: 以灰度图读取<br>IMREAD_COLOR: 以彩色图读取</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>为了支持 OpenCV 读取 byte[] 的图片,为此我查找了很多资料做了大量的实验,有很多失败报错了,也有读取成功的,下面我将一一列举出来….</p><h3 id="读取失败"><a href="#读取失败" class="headerlink" title="读取失败"></a>读取失败</h3><h4 id="Converters-类"><a href="#Converters-类" class="headerlink" title="Converters 类"></a>Converters 类</h4><p>我留意到 opencv 提供的 api 里有一个 <code>utils</code> 包, 里面有个转换类 <code>Converters</code>, 可以将 Mat 和 一些 java 的基本数据类型进行互相转换,其中有这样 2 个方法: <code>vector_uchar_to_Mat</code> 和 <code>vector_char_to_Mat</code><br>参数是 <code>List&lt;Byte&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testConvertChar2Mat</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;Byte&gt; bs = CollectionUtils.arrayToList(bytes);</span><br><span class="line">        <span class="keyword">return</span> Converters.vector_uchar_to_Mat(bs);</span><br><span class="line"><span class="comment">//        return Converters.vector_char_to_Mat(bs);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>vector_uchar_to_Mat</code>  指有符号</p><p>转换出来的图片是一个像素的竖直线,读取失败</p><h4 id="new-Mat"><a href="#new-Mat" class="headerlink" title="new Mat"></a>new Mat</h4><p>Mat 对象除了转化得到,还可以 new , 再利用 Mat 的 put 方法,来创建 Mat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">    data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换出来的图片也不对,一些花花绿绿的像素点</p><h4 id="new-BufferByte"><a href="#new-BufferByte" class="headerlink" title="new BufferByte"></a>new BufferByte</h4><p>Mat 对象还有个构造方法,最后一个参数是传入 BufferByte,这时只需要在上述步骤中再将 byte[] 转化为 BufferByte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewBuffer</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3,byteBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出异常: <strong>CvException [org.opencv.core.CvException: cv::Exception: OpenCV(4.1.0-pre) /Users/joylau/opencv4/opencv/modules/core/include/opencv2/core/mat.inl.hpp:548: error: (-215:Assertion failed) total() == 0 || data != NULL in function ‘Mat’</strong></p><h3 id="读取成功"><a href="#读取成功" class="headerlink" title="读取成功"></a>读取成功</h3><h4 id="BufferedImage-转换"><a href="#BufferedImage-转换" class="headerlink" title="BufferedImage 转换"></a>BufferedImage 转换</h4><p>一次我在调试代码时 发现<code>HighGui.waitKey();</code> 的实现是将 Mat 对象转化为 BufferedImage 的逻辑,于是我明白了,OpenCV 里操作的 Mat 在显示的时候也需要转化为 BufferedImage<br>源码里有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">toBufferedImage</span><span class="params">(Mat m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type = BufferedImage.TYPE_BYTE_GRAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m.channels() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        type = BufferedImage.TYPE_3BYTE_BGR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bufferSize = m.channels() * m.cols() * m.rows();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">    m.get(<span class="number">0</span>, <span class="number">0</span>, b); <span class="comment">// get all the pixels</span></span><br><span class="line">    BufferedImage image = <span class="keyword">new</span> BufferedImage(m.cols(), m.rows(), type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();</span><br><span class="line">    System.arraycopy(b, <span class="number">0</span>, targetPixels, <span class="number">0</span>, b.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,我逆向转化,将 byte[] 转 BufferedImage ,BufferedImage 再转 Mat 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getBufferedImageByte(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    BufferedImage bImage = ImageIO.read(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">    <span class="keyword">return</span> ((DataBufferByte) bImage.getRaster().getDataBuffer()).getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再将从 BufferedImage 得到的 byte[] 使用 new Mat 对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">    data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法成功读取显示了图片</p><p>于是又引发了我的思考: 为什么直接从文件读取的 byte[] 无法被转化,而 BufferedImage 中得到的 byte[] 却可以被转化</p><p>于是我将 BufferedImage 中得到的 byte[] 在使用,调用 <code>Converters.vector_char_to_Mat</code> 方法</p><p>可惜却失败了…..</p><h4 id="imdecode"><a href="#imdecode" class="headerlink" title="imdecode"></a>imdecode</h4><p>Imgcodecs 类中有一个编码的方法 <code>Imgcodecs.imdecode(Mat buf, int flags)</code><br>Mat 还有个子类 MatOfByte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testImdecode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Imgcodecs.imdecode(<span class="keyword">new</span> MatOfByte(bytes), Imgcodecs.IMREAD_COLOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法可成功转化</p><p>而且比上一个方法的优势是:</p><ol><li>byte[] 不需要再通过 BufferedImage 转化</li><li>不需要初始化 Mat 的长和宽</li></ol><p>为此还可以逆向得出 Mat 转换成 byte[] 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mat转换成byte数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix        要转换的Mat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileExtension 格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] mat2Byte(Mat matrix, String fileExtension) &#123;</span><br><span class="line">    MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">    Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">    <span class="keyword">return</span> mob.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以下是全部测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liuf on 2019-04-01.</span></span><br><span class="line"><span class="comment"> * cn.joylau.code</span></span><br><span class="line"><span class="comment"> * liuf@ahtsoft.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Byte2Mat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testImdecode(getImageByte());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testConvertChar2Mat(getBufferedImageByte(getImageByte()));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testNewBuffer(480,480,getImageByte());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Mat mat = testNewMat(480,480,getImageByte());</span></span><br><span class="line"></span><br><span class="line">        Mat mat = testNewMat(<span class="number">480</span>,<span class="number">480</span>,getBufferedImageByte(getImageByte()));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;,&#123;&#125;"</span>,mat.rows(),mat.cols());</span><br><span class="line">        HighGui.imshow(<span class="string">"byte2mat"</span>,mat);</span><br><span class="line">        HighGui.waitKey();</span><br><span class="line">        HighGui.destroyAllWindows();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getImageByte() <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        Resource resource = <span class="keyword">new</span> FileSystemResource(<span class="string">"/Users/joylau/work/anhui-project/traffic-service-layer/src/main/resources/static/img/1.jpg"</span>);</span><br><span class="line">        <span class="keyword">return</span> IOUtils.toByteArray(resource.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getBufferedImageByte(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        BufferedImage bImage = ImageIO.read(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">        <span class="keyword">return</span> ((DataBufferByte) bImage.getRaster().getDataBuffer()).getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewMat</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Mat data = <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3);</span><br><span class="line">        data.put(<span class="number">0</span>, <span class="number">0</span>, bytes);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testNewBuffer</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Mat(height, width, CvType.CV_8UC3,byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testConvertChar2Mat</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;Byte&gt; bs = CollectionUtils.arrayToList(bytes);</span><br><span class="line">        <span class="keyword">return</span> Converters.vector_uchar_to_Mat(bs);</span><br><span class="line"><span class="comment">//        return Converters.vector_char_to_Mat(bs);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mat <span class="title">testImdecode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Imgcodecs.imdecode(<span class="keyword">new</span> MatOfByte(bytes), Imgcodecs.IMREAD_COLOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mat转换成byte数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix        要转换的Mat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileExtension 格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] mat2Byte(Mat matrix, String fileExtension) &#123;</span><br><span class="line">        MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">        Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">        <span class="keyword">return</span> mob.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      OpenCV 提供的 API 是直接根据路径读取图片的,那么该如何读取 byte[] 的图片呢?
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 基础知识与概念</title>
    <link href="http://blog.joylau.cn/2019/03/28/OpenCV-Basic/"/>
    <id>http://blog.joylau.cn/2019/03/28/OpenCV-Basic/</id>
    <published>2019-03-28T08:10:51.000Z</published>
    <updated>2019-04-03T02:48:24.772Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><h3 id="数字图像"><a href="#数字图像" class="headerlink" title="数字图像"></a>数字图像</h3><p>数字图像指的是现在的图像都是以二维数字表示，每个像素的灰度值均由一个数字表示，范围为0-255(2^8)</p><h3 id="二值图像"><a href="#二值图像" class="headerlink" title="二值图像"></a>二值图像</h3><p>图像中每个像素的灰度值仅可取0或1，即不是取黑，就是取白，二值图像可理解为黑白图像</p><h3 id="灰度图像"><a href="#灰度图像" class="headerlink" title="灰度图像"></a>灰度图像</h3><p>图像中每个像素可以由0-255的灰度值表示，具体表现为从全黑到全白中间有255个介于中间的灰色值可以取</p><h3 id="彩色图像"><a href="#彩色图像" class="headerlink" title="彩色图像"></a>彩色图像</h3><p>每幅图像是由三幅灰度图像组合而成，依次表示红绿蓝三通道的灰度值，即我们熟知的RGB，此时彩色图像要视为三维的 <code>[height，width, 3]</code></p><h2 id="CvType"><a href="#CvType" class="headerlink" title="CvType"></a>CvType</h2><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>OpenCV 中，图像可以分别为1，2，3，4 通道</p><ul><li>通道为灰度图；</li><li>通道的图像是RGB555和RGB565。2通道图在程序处理中会用到，如傅里叶变换，可能会用到，一个通道为实数，一个通道为虚数，主要是编程方便。RGB555是16位的，2个字节，5+6+5，第一字节的前5位是R，后三位+第二字节是G，第二字节后5位是B，可见对原图像进行压缩了</li><li>通道为彩色图（RGB）；</li><li>通道为 RGBA ，是RGB加上一个A通道，也叫alpha通道，表示透明度，PNG图像是一种典型的4通道图像。alpha通道可以赋值0到1，或者0到255，表示透明到不透明</li></ul><p>常使用的是1，3，4通道； 2通道不常见</p><h3 id="组合规则"><a href="#组合规则" class="headerlink" title="组合规则"></a>组合规则</h3><p><code>CV_[bite](U|S|F)C[channels]</code></p><p>bite : 比特数，位数。 有 8bite，16bite，32bite，64bite,对应在 Mat 中，每个像素的所占的空间大小，8位即 CV_8</p><p>U|S|F ：</p><pre><code>- U : unsigned int , 无符号整形- S : signed int , 有符号整形- F : float , 单精度浮点型,float类型本身即有符号</code></pre><p>这里的有符号、无符号是针对图像二进制编码来讲的。我在写的过程中大多数情况下都是使用的无符号，即 CV_8U ,CV_16U，当有计算时可能会介入有符号（存在负数），没学过 C++，对底层也一知半解，望高手解答。</p><p>C (channels)：图像的通道数</p><p>比如: <code>CV_8UC3</code> 即 8位无符号的3通道（RGB 彩色）图像</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>8U</p><pre><code>- 说明：无符号的8位图- 值：CV_8UC1,CV_8UC2,CV_8UC3,CV_8UC4- 通道取值范围：0~255</code></pre><p>8S</p><pre><code>- 说明：有符号的8位图- 值：CV_8SC1,CV_8SC2,CV_8SC3,CV_8SC4- 通道取值范围：-128~127</code></pre><p>16U</p><pre><code>- 说明：无符号的16位图- 值：CV_16UC1,CV_16UC2,CV_16UC3,CV_16UC4- 通道取值范围：0~65535</code></pre><p>16S</p><pre><code>- 说明：有符号的16位图- 值：CV_16SC1,CV_16SC2,CV_16SC3,CV_16SC4- 通道取值范围：-32768~32767</code></pre><p>32S</p><pre><code>- 说明：无符号的32位图- 值：CV_32SC1,CV_32SC2,CV_32SC3,CV_32SC4- 通道取值范围：2147483648~2147483647</code></pre><p>32F</p><pre><code>- 说明：浮点型32位图- 值：CV_32FC1,CV_32FC2,CV_32FC3,CV_32FC4- 通道取值范围：1.18*(10(-38次方))~3.40*(10(38次方))</code></pre><p>64F</p><pre><code>- 说明：浮点型64位图-值：CV_64FC1,CV_64FC2,CV_64FC3,CV_64FC4- 通道取值范围：2.23*(10(-308次方))~1.79*(10(308次方))</code></pre><p>1U</p><pre><code>- 说明：1位- 值：IPL_DEPTH_1U- 通道取值范围：0~1</code></pre><h2 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h2><h3 id="常见的色彩空间"><a href="#常见的色彩空间" class="headerlink" title="常见的色彩空间"></a>常见的色彩空间</h3><ul><li>RGB</li><li>HSV</li><li>HIS</li><li>YCRCB</li><li>YUV</li></ul><h3 id="HSV"><a href="#HSV" class="headerlink" title="HSV"></a>HSV</h3><p>HSV分别是色调（Hue），饱和度（Saturation）和亮度（Value）</p><p>H调整颜色；S越大，图像色彩越丰富，颜色越鲜艳；V越大，图像越亮</p><h4 id="HSV颜色取值范围"><a href="#HSV颜色取值范围" class="headerlink" title="HSV颜色取值范围"></a>HSV颜色取值范围</h4><ol><li><p>H:0— 180 : 之所以不是 360,是因为 8 位图 最大是 255,360 已经超出范围,以 180 为限定</p></li><li><p>S: 0— 255</p></li><li><p>V: 0— 255</p></li></ol><p>记住下面这张图, 可使用这张图中的范围来查找某种颜色</p><p><img src="http://image.joylau.cn/blog/OpenCV-HSV.png" alt="HSV"></p><h4 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h4><p><code>Imgproc.cvtColor(src,det,Imgproc.COLOR_BGR2HSV);</code></p>]]></content>
    
    <summary type="html">
    
      记录一下一些学习数字图像处理的基础知识与概念
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器挂载宿主机上的目录时出现 Permission denied</title>
    <link href="http://blog.joylau.cn/2019/03/21/Docker-MountVolumes/"/>
    <id>http://blog.joylau.cn/2019/03/21/Docker-MountVolumes/</id>
    <published>2019-03-21T08:27:48.000Z</published>
    <updated>2019-03-21T10:17:43.109Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>启动 docker 容器时挂载容器以前存在的数据文件时出现了 Permission denied 的错误</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>首先以为是挂载的文件夹有读写数据的权限问题 <code>chmod -R 777 xxxx</code> , 没有解决，依然报错</li><li>再分析是文件目录的所属者的问题： <code>chown -R gname:uname xxxx</code> , 没有解决，依然报错</li><li>这时我们进入容器之后 使用 ll 查看挂载的目录的所属者，发现组名和户名跟宿主机的组名和用户名不一致</li><li>原因在于，操作系统判断用户组和用户其实并不是根据名称来的，而是根据名称对应的 id 来的</li><li>查看用户组和用户名对象的 id, 可查看 <code>/etc/passwd</code></li><li>此时，我们需要将宿主机的用户组用户的 ID 和 容器内挂在目录所需的用户组和用户的 ID 对应起来，写一直即可</li><li>举个例子</li><li>redis 镜像产生的数据文件在 <code>/var/lib/redis</code> 中，并且该目录的用户组和用户都为 <code>redis</code>， 此时我们查看容器的 <code>redis:redis</code> 的 id , 假如是 <code>102:103</code></li><li>此时我们宿主机挂载目录是 <code>/opt/docker/redis/data</code> ,我们改变这个目录的所属者 <code>chown -R 102:103 /opt/docker/redis/data</code></li><li>不要管 <code>102:103</code> 在宿主机系统中有没有该用户组和用户</li><li>再次进入容器就可以看到 <code>/var/lib/redis</code> 目录的所属者是正确的了</li></ol><h3 id="mysql-和-mariaDB-的问题"><a href="#mysql-和-mariaDB-的问题" class="headerlink" title="mysql 和 mariaDB 的问题"></a>mysql 和 mariaDB 的问题</h3><p>这样的情况也发生在 mysql 和 mariaDB 上<br>按照上述的方法似乎没有奏效，确切的说奏效一半<br>因为 <code>/var/lib/mysql</code> 目录中文件夹可以看到，文件却没有权限看到<br>类似这样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">190321 06:02:13 mysqld_safe Logging to '/var/lib/mysql/d240623581db.err'.</span><br><span class="line">190321 06:02:13 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.err: Permission denied</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.pid: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log.00000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log_control: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_buffer_pool: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibdata1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile0: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibtmp1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/multi-master.info: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000002: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000003: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000004: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000005: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000006: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000007: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000008: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000009: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.index: Permission denied</span><br><span class="line">chown: /var/lib/mysql/owncloud: Permission denied</span><br><span class="line">chown: /var/lib/mysql/performance_schema: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">190321 06:02:14 mysqld_safe Logging to '/var/lib/mysql/d240623581db.err'.</span><br><span class="line">190321 06:02:14 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.err: Permission denied</span><br><span class="line">chown: /var/lib/mysql/60689c28e4a1.pid: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log.00000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/aria_log_control: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_buffer_pool: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibdata1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile0: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ib_logfile1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/ibtmp1: Permission denied</span><br><span class="line">chown: /var/lib/mysql/multi-master.info: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000001: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000002: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000003: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000004: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000005: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000006: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000007: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000008: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.000009: Permission denied</span><br><span class="line">chown: /var/lib/mysql/mysql-bin.index: Permission denied</span><br><span class="line">chown: /var/lib/mysql/owncloud: Permission denied</span><br><span class="line">chown: /var/lib/mysql/performance_schema: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br><span class="line">chown: /var/lib/mysql: Permission denied</span><br></pre></td></tr></table></figure><p>原因分析是：<br>SELinux 造成的<br>有以下 4 中解决方法：</p><ol><li><code>setenforce 0</code> : 临时关闭 </li><li><code>vi /etc/selinux/config</code> ： 将 <code>SELINUX=enforcing</code> 改为 <code>SELINUX=disabled</code> ，重启</li><li>在docker run 中加入 <code>--privileged=true</code> 给容器加上特定权限</li><li>修改 SELinux 规则 <code>chcon -t mysqld_db_t  -R /opt/docker/mysql/data</code></li></ol>]]></content>
    
    <summary type="html">
    
      解决 Docker 容器挂载宿主机上的目录时出现 Permission denied 的错误
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA (WebStorm) 识别 @ 作为别名进行导包</title>
    <link href="http://blog.joylau.cn/2019/03/20/IntelliJIDEA-Support-@-Alias/"/>
    <id>http://blog.joylau.cn/2019/03/20/IntelliJIDEA-Support-@-Alias/</id>
    <published>2019-03-20T02:35:28.000Z</published>
    <updated>2019-03-20T02:45:57.784Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="配置前"><a href="#配置前" class="headerlink" title="配置前"></a>配置前</h3><p><img src="http://image.joylau.cn/blog/idea-support-alas-1.png" alt="配置前"></p><p>@ 导包的类无法点击跳转,也不识别</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录添加配置文件 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不是真实的 webpack 配置，仅为兼容 webstorm 和 intellij idea 代码跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: <span class="built_in">require</span>(<span class="string">'path'</span>).resolve(__dirname, <span class="string">'src'</span>), <span class="comment">// eslint-disable-line</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后,在 idea 的 preference -&gt; language &amp; frameworks -&gt; javascript -&gt; webpack 路径到更目录下的webpack.config.js</p><p>完成</p>]]></content>
    
    <summary type="html">
    
      IntelliJ IDEA 或者 WebStorm 识别 @ 作为别名进行导包
    
    </summary>
    
      <category term="IntelliJ IDEA篇" scheme="http://blog.joylau.cn/categories/IntelliJ-IDEA%E7%AF%87/"/>
    
    
      <category term="IntelliJ IDEA" scheme="http://blog.joylau.cn/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>CentOS , Ubuntu 和 Mac OS 上编译安装 OpenCV4 及 SpringBoot 的结合使用</title>
    <link href="http://blog.joylau.cn/2019/03/15/OpenCV-Build/"/>
    <id>http://blog.joylau.cn/2019/03/15/OpenCV-Build/</id>
    <published>2019-03-15T07:41:23.000Z</published>
    <updated>2019-03-26T09:22:57.786Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="为什么没有-Windows-下的编译安装"><a href="#为什么没有-Windows-下的编译安装" class="headerlink" title="为什么没有 Windows 下的编译安装"></a>为什么没有 Windows 下的编译安装</h3><p>因为官网已经提供的编译好的 exe 包,双击运行就会解压到特定的目录了,除此之外官网还提供了 ios 版和 安卓版<br>这里着重记录下 CentOS , Ubuntu 和 Mac OS 下的安装,因为官网没有提供编译好的包</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>GCC 4.4.x or later</li><li>CMake 2.8.7 or higher</li><li>Git</li><li>GTK+2.x or higher, including headers (libgtk2.0-dev)</li><li>pkg-config</li><li>Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)</li><li>ffmpeg or libav development packages: libavcodec-dev, libavformat-dev, libswscale-dev</li><li>[optional] libtbb2 libtbb-dev</li><li>[optional] libdc1394 2.x</li><li>[optional] libjpeg-dev, libpng-dev, libtiff-dev, libjasper-dev, libdc1394-22-dev</li><li>[optional] CUDA Toolkit 6.5 or higher</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>安装常用的开发编译工具包, Centos 的命令为: yum groupinstall “Development Tools”, Ubuntu 的命令为: apt-get install build-essential</li><li>安装 cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</li><li>mkdir opencv4; cd opencv4</li><li>git clone <a href="https://github.com/opencv/opencv.git" target="_blank" rel="noopener">https://github.com/opencv/opencv.git</a></li><li>git clone <a href="https://github.com/opencv/opencv_contrib.git" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib.git</a></li><li>cd opencv</li><li>mkdir build</li><li>cd build</li><li>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  (如果不工作的话,删除 -D的空格,cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..)</li><li>make -j7 # runs 7 jobs in parallel 使用7个并行任务来编译</li><li>生成文档 cd ~/opencv/build/doc/; make -j7 doxygen</li><li>make install</li></ol><h3 id="编译好的包"><a href="#编译好的包" class="headerlink" title="编译好的包"></a>编译好的包</h3><ol><li>centos7 版: <a href="http://cloud.joylau.cn:1194/s/kUoNelmj1SX810K" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/kUoNelmj1SX810K</a> 或者  <a href="https://pan.baidu.com/s/1qaZ-TbF0xP0DxaEJKbdt-A" target="_blank" rel="noopener">https://pan.baidu.com/s/1qaZ-TbF0xP0DxaEJKbdt-A</a> 提取码: jkir</li><li>Ubuntu 16.04 版: <a href="http://cloud.joylau.cn:1194/s/TsNRKwxJhM0v0HE" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/TsNRKwxJhM0v0HE</a>  或者  <a href="https://pan.baidu.com/s/1ha6nATLrSt5WPL1iQlmWSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ha6nATLrSt5WPL1iQlmWSg</a> 提取码: gduu</li><li>java 调用所需 opencv-410.jar 包: <a href="http://image.joylau.cn/blog/opencv-410.jar" target="_blank" rel="noopener">http://image.joylau.cn/blog/opencv-410.jar</a></li></ol><h3 id="Mac-OS-上"><a href="#Mac-OS-上" class="headerlink" title="Mac OS 上"></a>Mac OS 上</h3><ol><li>AppStore 上安装 XCode, 安装完成打开 XCode , 同意 license</li><li>安装 HomeBrew</li><li>安装必要依赖: Python 3, CMake and Qt 5</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br><span class="line">brew install cmake</span><br><span class="line">brew install qt5</span><br></pre></td></tr></table></figure><ol start="4"><li>安装环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/opencv4</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量定义</span></span><br><span class="line">cwd=$(<span class="built_in">pwd</span>)</span><br><span class="line">cvVersion=<span class="string">"master"</span></span><br><span class="line">QT5PATH=/usr/<span class="built_in">local</span>/Cellar/qt/5.12.2</span><br><span class="line"></span><br><span class="line">rm -rf opencv/build</span><br><span class="line">rm -rf opencv_contrib/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create directory for installation</span></span><br><span class="line">mkdir -p installation/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span></span><br><span class="line"></span><br><span class="line">sudo -H pip3 install -U pip numpy</span><br><span class="line"><span class="comment"># Install virtual environment</span></span><br><span class="line">sudo -H python3 -m pip install virtualenv virtualenvwrapper</span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# Virtual Environment Wrapper"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$cwd</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment">############ For Python 3 ############</span></span><br><span class="line"><span class="comment"># create virtual environment 由于 mac OS 本身使用的是 Python 2.7 , 而一些本身的应用依赖于 Python 2 ,为了不影响原来的环境,这里创建一个 Python3 的虚拟环境来进行编译</span></span><br><span class="line">mkvirtualenv OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3 -p python3</span><br><span class="line">workon OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3</span><br><span class="line">  </span><br><span class="line"><span class="comment"># now install python libraries within this virtual environment</span></span><br><span class="line">pip install cmake numpy scipy matplotlib scikit-image scikit-learn ipython dlib</span><br><span class="line">  </span><br><span class="line"><span class="comment"># quit virtual environment</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">            -D CMAKE_INSTALL_PREFIX=<span class="variable">$cwd</span>/installation/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span> \</span><br><span class="line">            -D INSTALL_C_EXAMPLES=ON \</span><br><span class="line">            -D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">            -D WITH_TBB=ON \</span><br><span class="line">            -D WITH_V4L=ON \</span><br><span class="line">            -D OPENCV_SKIP_PYTHON_LOADER=ON \</span><br><span class="line">            -D CMAKE_PREFIX_PATH=<span class="variable">$QT5PATH</span> \</span><br><span class="line">            -D CMAKE_MODULE_PATH=<span class="string">"<span class="variable">$QT5PATH</span>"</span>/lib/cmake \</span><br><span class="line">            -D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/OpenCV-<span class="string">"<span class="variable">$cvVersion</span>"</span>-py3/lib/python3.7/site-packages \</span><br><span class="line">        -D WITH_QT=ON \</span><br><span class="line">        -D WITH_OPENGL=ON \</span><br><span class="line">        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \</span><br><span class="line">        -D BUILD_EXAMPLES=ON ..</span><br><span class="line"></span><br><span class="line">make -j$(sysctl -n hw.physicalcpu)</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="5"><li>cmake 后输出如下:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">--   OpenCV modules:</span><br><span class="line">--     To be built:                 aruco bgsegm bioinspired calib3d ccalib core cvv datasets dnn dnn_objdetect dpm face features2d flann freetype fuzzy gapi hfs highgui img_hash imgcodecs imgproc java java_bindings_generator line_descriptor ml objdetect optflow phase_unwrapping photo plot python2 python3 python_bindings_generator quality reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab xfeatures2d ximgproc xobjdetect xphoto</span><br><span class="line">--     Disabled:                    world</span><br><span class="line">--     Disabled by dependency:      -</span><br><span class="line">--     Unavailable:                 cnn_3dobj cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev hdf js matlab ovis sfm viz</span><br><span class="line">--     Applications:                tests perf_tests examples apps</span><br><span class="line">--     Documentation:               NO</span><br><span class="line">--     Non-free algorithms:         NO</span><br><span class="line">-- </span><br><span class="line">--   GUI: </span><br><span class="line">--     QT:                          YES (ver 5.12.2)</span><br><span class="line">--       QT OpenGL support:         YES (Qt5::OpenGL 5.12.2)</span><br><span class="line">--     Cocoa:                       YES</span><br><span class="line">--     OpenGL support:              YES (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/OpenGL.framework /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/OpenGL.framework)</span><br><span class="line">--     VTK support:                 NO</span><br><span class="line">-- </span><br><span class="line">--   Media I/O: </span><br><span class="line">--     ZLib:                        build (ver 1.2.11)</span><br><span class="line">--     JPEG:                        build-libjpeg-turbo (ver 2.0.2-62)</span><br><span class="line">--     WEBP:                        build (ver encoder: 0x020e)</span><br><span class="line">--     PNG:                         build (ver 1.6.36)</span><br><span class="line">--     TIFF:                        build (ver 42 - 4.0.10)</span><br><span class="line">--     JPEG 2000:                   build (ver 1.900.1)</span><br><span class="line">--     OpenEXR:                     build (ver 1.7.1)</span><br><span class="line">--     HDR:                         YES</span><br><span class="line">--     SUNRASTER:                   YES</span><br><span class="line">--     PXM:                         YES</span><br><span class="line">--     PFM:                         YES</span><br><span class="line">-- </span><br><span class="line">--   Video I/O:</span><br><span class="line">--     DC1394:                      NO</span><br><span class="line">--     FFMPEG:                      YES</span><br><span class="line">--       avcodec:                   YES (58.35.100)</span><br><span class="line">--       avformat:                  YES (58.20.100)</span><br><span class="line">--       avutil:                    YES (56.22.100)</span><br><span class="line">--       swscale:                   YES (5.3.100)</span><br><span class="line">--       avresample:                YES (4.0.0)</span><br><span class="line">--     GStreamer:                   NO</span><br><span class="line">--     AVFoundation:                YES</span><br><span class="line">--     v4l/v4l2:                    NO</span><br><span class="line">-- </span><br><span class="line">--   Parallel framework:            GCD</span><br><span class="line">-- </span><br><span class="line">--   Trace:                         YES (with Intel ITT)</span><br><span class="line">-- </span><br><span class="line">--   Other third-party libraries:</span><br><span class="line">--     Intel IPP:                   2019.0.0 Gold [2019.0.0]</span><br><span class="line">--            at:                   /Users/joylau/opencv4/opencv/build/3rdparty/ippicv/ippicv_mac/icv</span><br><span class="line">--     Intel IPP IW:                sources (2019.0.0)</span><br><span class="line">--               at:                /Users/joylau/opencv4/opencv/build/3rdparty/ippicv/ippicv_mac/iw</span><br><span class="line">--     Lapack:                      YES (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Accelerate.framework)</span><br><span class="line">--     Eigen:                       NO</span><br><span class="line">--     Custom HAL:                  NO</span><br><span class="line">--     Protobuf:                    build (3.5.1)</span><br><span class="line">-- </span><br><span class="line">--   OpenCL:                        YES (no extra features)</span><br><span class="line">--     Include path:                NO</span><br><span class="line">--     Link libraries:              -framework OpenCL</span><br><span class="line">-- </span><br><span class="line">--   Python 2:</span><br><span class="line">--     Interpreter:                 /usr/bin/python2.7 (ver 2.7.10)</span><br><span class="line">--     Libraries:                   /usr/lib/libpython2.7.dylib (ver 2.7.10)</span><br><span class="line">--     numpy:                       /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/core/include (ver 1.8.0rc1)</span><br><span class="line">--     install path:                lib/python2.7/site-packages</span><br><span class="line">-- </span><br><span class="line">--   Python 3:</span><br><span class="line">--     Interpreter:                 /usr/<span class="built_in">local</span>/bin/python3 (ver 3.7.2)</span><br><span class="line">--     Libraries:                   /usr/<span class="built_in">local</span>/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib (ver 3.7.2)</span><br><span class="line">--     numpy:                       /usr/<span class="built_in">local</span>/lib/python3.7/site-packages/numpy/core/include (ver 1.16.2)</span><br><span class="line">--     install path:                /Users/joylau/.virtualenvs/OpenCV-master-py3/lib/python3.7/site-packages</span><br><span class="line">-- </span><br><span class="line">--   Python (<span class="keyword">for</span> build):            /usr/bin/python2.7</span><br><span class="line">-- </span><br><span class="line">--   Java:                          </span><br><span class="line">--     ant:                         /Users/joylau/dev/apache-ant-1.10.5/bin/ant (ver 1.10.5)</span><br><span class="line">--     JNI:                         /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/JavaVM.framework/Headers</span><br><span class="line">--     Java wrappers:               YES</span><br><span class="line">--     Java tests:                  YES</span><br><span class="line">-- </span><br><span class="line">--   Install to:                    /Users/joylau/opencv4/installation/OpenCV-master</span><br><span class="line">-- -----------------------------------------------------------------</span><br><span class="line">-- </span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /Users/joylau/opencv4/opencv/build</span><br></pre></td></tr></table></figure><ol start="6"><li>编译好的安装包: <a href="http://cloud.joylau.cn:1194/s/6GMLl09ZAYNAUMU" target="_blank" rel="noopener">http://cloud.joylau.cn:1194/s/6GMLl09ZAYNAUMU</a> 或者: <a href="https://pan.baidu.com/s/1YBxUD_vB1zKOcxHeAtn6Xw" target="_blank" rel="noopener">https://pan.baidu.com/s/1YBxUD_vB1zKOcxHeAtn6Xw</a> 提取码: twsq </li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="CentOS-上-CMake-版本太低的解决方法"><a href="#CentOS-上-CMake-版本太低的解决方法" class="headerlink" title="CentOS 上 CMake 版本太低的解决方法"></a>CentOS 上 CMake 版本太低的解决方法</h4><ol><li>yum 上安装的版本太低,先卸载掉版本低的,yum remove cmake</li><li><p>cd /opt<br>tar zxvf cmake-3.10.2-Linux-x86_64.tar.gz</p></li><li><p>vim /etc/profile<br>export CMAKE_HOME=/opt/cmake-3.10.2-Linux-x86_64<br>export PATH=$PATH:$CMAKE_HOME/bin</p></li><li><p>source /etc/profile </p></li></ol><h4 id="没有生成-opencv-410-jar"><a href="#没有生成-opencv-410-jar" class="headerlink" title="没有生成 opencv-410.jar"></a>没有生成 opencv-410.jar</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java:                          </span><br><span class="line">--     ant:                         /bin/ant (ver 1.9.4)</span><br><span class="line">--     JNI:                         /usr/lib/jvm/java-1.8.0-openjdk/include /usr/lib/jvm/java-1.8.0-openjdk/include/linux /usr/lib/jvm/java-1.8.0-openjdk/include</span><br><span class="line">--     Java wrappers:               YES</span><br><span class="line">--     Java tests:                  NO</span><br></pre></td></tr></table></figure><p>需要 ant 环境,安装后即可, java 即可进行调用</p><h3 id="IDEA-及-Spring-Boot-项目中的使用"><a href="#IDEA-及-Spring-Boot-项目中的使用" class="headerlink" title="IDEA 及 Spring Boot 项目中的使用"></a>IDEA 及 Spring Boot 项目中的使用</h3><ol><li>下载 opencv-410.jar 包,引入到项目中</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line"></span><br><span class="line">    compile fileTree(<span class="string">dir:</span><span class="string">'libs'</span>,<span class="string">include:</span>[<span class="string">'*.jar'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置动态库路径, vm options: -Djava.library.path=/home/joylau/opencv4/opencv/build/lib</li></ol><p><img src="http://image.joylau.cn/blog/vm_options_config.jpg" alt="vm options"></p><p>mac os 下路径为: -Djava.library.path=/Users/joylau/opencv4/installation/OpenCV-master/share/java/opencv4</p><ol start="3"><li>加载动态库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpencvTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">        System.out.println(Core.VERSION);</span><br><span class="line">        SpringApplication.run(OpencvTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>脸部识别 demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">        CascadeClassifier facebook = <span class="keyword">new</span> CascadeClassifier(<span class="string">"/home/joylau/opencv4/opencv/data/haarcascades/haarcascade_frontalface_alt.xml"</span>);</span><br><span class="line">        <span class="comment">// 2 读取测试图片</span></span><br><span class="line">        Mat image = Imgcodecs.imread(<span class="string">"/home/joylau/图片/image-test-4.jpg"</span>);</span><br><span class="line">        <span class="comment">// 3 特征匹配</span></span><br><span class="line">        MatOfRect face = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        facebook.detectMultiScale(image, face);</span><br><span class="line">        <span class="comment">// 4 匹配 Rect 矩阵 数组</span></span><br><span class="line">        Rect[] rects = face.toArray();</span><br><span class="line">        System.out.println(<span class="string">"匹配到 "</span> + rects.length + <span class="string">" 个人脸"</span>);</span><br><span class="line">        <span class="comment">// 5 为每张识别到的人脸画一个框</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rects.length; i++) &#123;</span><br><span class="line">            Imgproc.rectangle(image,<span class="keyword">new</span> Point(rects[i].x, rects[i].y), <span class="keyword">new</span> Point(rects[i].x + rects[i].width, rects[i].y + rects[i].height), <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">            Imgproc.putText(image,<span class="string">"face-"</span> + i, <span class="keyword">new</span> Point(rects[i].x, rects[i].y),Imgproc.FONT_HERSHEY_SIMPLEX, <span class="number">1.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),<span class="number">1</span>,Imgproc.LINE_AA,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6 展示图片</span></span><br><span class="line">        HighGui.imshow(<span class="string">"人脸-匹配"</span>, image);</span><br><span class="line">        HighGui.waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.joylau.cn/blog/opencv_test_face.jpg" alt="test_face"></p><blockquote><p>注: 图片来自微博</p></blockquote><ol start="5"><li>边缘检测 demo</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testContours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取原图</span></span><br><span class="line">        Mat src = Imgcodecs.imread(<span class="string">"/home/joylau/图片/image-test.jpg"</span>);</span><br><span class="line">        <span class="comment">//2 图片灰度化</span></span><br><span class="line">        Mat gary = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.cvtColor(src, gary, Imgproc.COLOR_RGB2GRAY);</span><br><span class="line">        <span class="comment">//3 图像边缘处理</span></span><br><span class="line">        Mat edges = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.Canny(gary, edges, <span class="number">200</span>, <span class="number">500</span>, <span class="number">3</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//4 发现轮廓</span></span><br><span class="line">        List&lt;MatOfPoint&gt; list = <span class="keyword">new</span> ArrayList&lt;MatOfPoint&gt;();</span><br><span class="line">        Mat hierarchy = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.findContours(edges, list, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);</span><br><span class="line">        <span class="comment">//5 绘制轮廓</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = list.size(); i &lt; len; i++) &#123;</span><br><span class="line">            Imgproc.drawContours(src, list, i, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA);</span><br><span class="line">        &#125;</span><br><span class="line">        HighGui.imshow(<span class="string">"边缘检测"</span>, src);</span><br><span class="line">        HighGui.waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.joylau.cn/blog/image-test.jpg" alt="test_source"><br><img src="http://image.joylau.cn/blog/test_contours.jpg" alt="test_contours"></p><ol start="6"><li>实时人脸识别</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OpenCV-4.0.0 实时人脸识别</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">videoFace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        VideoCapture capture=<span class="keyword">new</span> VideoCapture(<span class="number">0</span>);</span><br><span class="line">        Mat image=<span class="keyword">new</span> Mat();</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (capture.isOpened()) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                capture.read(image);</span><br><span class="line">                HighGui.imshow(<span class="string">"实时人脸识别"</span>, getFace(image));</span><br><span class="line">                index = HighGui.waitKey(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">while</span> (index != <span class="number">27</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OpenCV-4.0.0 人脸识别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> image 待处理Mat图片(视频中的某一帧)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">getFace</span><span class="params">(Mat image)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">        CascadeClassifier facebook=<span class="keyword">new</span> CascadeClassifier(<span class="string">"/Users/joylau/opencv4/opencv/data/haarcascades/haarcascade_frontalface_alt.xml"</span>);</span><br><span class="line">        <span class="comment">// 2  特征匹配类</span></span><br><span class="line">        MatOfRect face = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        <span class="comment">// 3 特征匹配</span></span><br><span class="line">        facebook.detectMultiScale(image, face);</span><br><span class="line">        Rect[] rects=face.toArray();</span><br><span class="line">        log.info(<span class="string">"匹配到 "</span>+rects.length+<span class="string">" 个人脸"</span>);</span><br><span class="line">        <span class="comment">// 4 为每张识别到的人脸画一个圈</span></span><br><span class="line">        <span class="keyword">for</span> (Rect rect : rects) &#123;</span><br><span class="line">            Imgproc.rectangle(image, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height), <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">            Imgproc.putText(image, <span class="string">"Human"</span>, <span class="keyword">new</span> Point(rect.x, rect.y), Imgproc.FONT_HERSHEY_SIMPLEX, <span class="number">2.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//Mat dst=image.clone();</span></span><br><span class="line">            <span class="comment">//Imgproc.resize(image, image, new Size(300,300));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><center><video src="http://image.joylau.cn/blog/opencv-video-face.mp4" loop="true" controls="controls">您的浏览器版本太低，无法观看本视频</video></center>]]></content>
    
    <summary type="html">
    
      记录下 CentOS , Ubuntu 和 Mac OS 上编译安装 OpenCV
    
    </summary>
    
      <category term="OpenCV篇" scheme="http://blog.joylau.cn/categories/OpenCV%E7%AF%87/"/>
    
    
      <category term="OpenCV" scheme="http://blog.joylau.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Swarm 自定义服务部署的节点</title>
    <link href="http://blog.joylau.cn/2019/03/01/Docker-Swarm-Choice-Node/"/>
    <id>http://blog.joylau.cn/2019/03/01/Docker-Swarm-Choice-Node/</id>
    <published>2019-03-01T01:19:00.000Z</published>
    <updated>2019-03-01T16:01:05.148Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用 docker stack 部署一组服务时,docker 会根据集群的每个节点的资源的情况来进行分配,作为使用者无法参与其中的分配,该怎么解决呢?</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>docker 1.13.0+</li><li>compose version 3+</li></ol><h3 id="deploy-mode"><a href="#deploy-mode" class="headerlink" title="deploy mode"></a>deploy mode</h3><ol><li><code>replicated</code> 默认模式,可自定义服务的副本数,此模式不能决定服务部署到哪个节点上</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">replicated</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>global</code> 定义每个节点均部署一个服务的副本</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">global</span></span><br></pre></td></tr></table></figure><h3 id="node-labels"><a href="#node-labels" class="headerlink" title="node labels"></a>node labels</h3><p>该方法是通过给节点添加标签,然后在 yaml 文件里通过配置标签来决定服务部署到哪些节点</p><ol><li>docker node ls 查看节点</li><li>docker node update –label-add role=service-1 nodeId 给 nodeId 的节点添加 label role=service-1, label 的形式是 map 的键值对形式</li><li>docker node inspect nodeId 查看节点的 labels 信息</li><li>docker node update –label-rm role=service-1 nodeId 删除 label</li></ol><h4 id="service-部署"><a href="#service-部署" class="headerlink" title="service 部署"></a>service 部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name nginx \</span><br><span class="line">  --constraint <span class="string">'node.labels.role == service-1'</span> \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><h4 id="stack-部署"><a href="#stack-部署" class="headerlink" title="stack 部署"></a>stack 部署</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node.labels.role</span> <span class="string">==</span> <span class="string">service-2</span></span><br></pre></td></tr></table></figure><p>constraints 填写多个时，它们之间的关系是 AND;constraints 可以匹配 node 标签和  engine 标签<br>例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">engine.labels.operatingsystem</span> <span class="string">==</span> <span class="string">ubuntu</span> <span class="number">14.04</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用 docker stack 部署一组服务时,docker 会根据集群的每个节点的资源的情况来进行分配,作为使用者无法参与其中的分配,该怎么解决呢?
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="Docker Swarm" scheme="http://blog.joylau.cn/tags/Docker-Swarm/"/>
    
  </entry>
  
</feed>
