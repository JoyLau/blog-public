<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyLau&#39;s Blog | JoyLau</title>
  
  <subtitle>刘法的技术学习与思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.joylau.cn/"/>
  <updated>2018-12-13T09:11:00.057Z</updated>
  <id>http://blog.joylau.cn/</id>
  
  <author>
    <name>JoyLau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 定时删除 10 天前的日志文件</title>
    <link href="http://blog.joylau.cn/2018/12/13/Linux-Cron/"/>
    <id>http://blog.joylau.cn/2018/12/13/Linux-Cron/</id>
    <published>2018-12-13T07:23:09.000Z</published>
    <updated>2018-12-13T09:11:00.057Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置一个定时清理的任务"><a href="#配置一个定时清理的任务" class="headerlink" title="配置一个定时清理的任务"></a>配置一个定时清理的任务</h3><ol><li><code>crontab -e</code> , 添加一个定时任务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 * * * * /home/liufa/app/cron/del_log.sh</span><br></pre></td></tr></table></figure><p>每天 0 点 10 分运行上述命令文件</p><ol start="2"><li><p>创建文件: del_log.sh</p></li><li><p>删除 10 天的日志文件 </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">find /home/liufa/app/node/logs -mtime +10 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动定时任务, <code>systemctl start crond</code></li></ol>]]></content>
    
    <summary type="html">
    
      我们的程序在 Linux 上运行会产生大量日志文件,这些日志文件如果不定时清理的话会很快将磁盘沾满
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="Crond" scheme="http://blog.joylau.cn/tags/Crond/"/>
    
  </entry>
  
  <entry>
    <title>Docker Build Image 问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/13/Docker-Build/"/>
    <id>http://blog.joylau.cn/2018/12/13/Docker-Build/</id>
    <published>2018-12-13T06:49:18.000Z</published>
    <updated>2018-12-13T09:11:00.057Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><p>时区的配置在 <code>/etc/localtime</code></p><p>localtime 文件会指向 <code>/usr/share/zoneinfo/Asia/</code> 目录下的某个文件</p><p>我们只需要将其指向 ShangHai 即可</p><p>Dockerfile 可以这样配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN rm -rf /etc/localtime &amp;&amp; \</span><br><span class="line">    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>先删除,在创建一个软连接即可</p><h3 id="pm2-web-命令错误问题"><a href="#pm2-web-命令错误问题" class="headerlink" title="pm2-web 命令错误问题"></a>pm2-web 命令错误问题</h3><p>通常我们都是将 node_modules 文件夹直接复制到镜像中</p><p>有时候会出现问题,就比如 pm2-web ,构建成镜像后,命令无法使用</p><p>原因在于开发的机器的操作系统和镜像的操作系统不一致,会导致一些包出问题</p><p>解决的方式就是重新 <code>nmp install</code></p><p>Dockerfile 如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN rm -rf ./node_modules &amp;&amp; \</span><br><span class="line">    rm -rf ./package-lock.json &amp;&amp; \</span><br><span class="line">    npm install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这里记录下日常 docker build 遇到的问题,现在记录整理如下
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Yum 私服搭建记录</title>
    <link href="http://blog.joylau.cn/2018/12/08/Linux-Private-Yum/"/>
    <id>http://blog.joylau.cn/2018/12/08/Linux-Private-Yum/</id>
    <published>2018-12-08T05:48:34.000Z</published>
    <updated>2018-12-08T06:28:38.030Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有时我们的服务器网络并不允许连接互联网,这时候 yum 安装软件就有很多麻烦事情了, 我们也许会通过 yumdownloader 来从可以连接互联网的机器上下载好 rpm 安装包,<br>然后再拷贝到 服务器上.<br>命令 : <code>yumdownloader  --resolve mariadb-server</code> , 所有依赖下载到当前文件夹下</p><p>这样做会存在很多问题:</p><ol><li>虽然上述命令已经加上了 <code>--resolve</code> 来解决依赖,但是一些基础的依赖包仍然没有下载到,这时安装就有问题了</li><li>下载的很多依赖包都有安装的先后顺序,包太多的话,根本无法搞清楚顺序</li></ol><h2 id="rsync-同步科大的源"><a href="#rsync-同步科大的源" class="headerlink" title="rsync 同步科大的源"></a>rsync 同步科大的源</h2><ol><li><code>yum install rsync</code></li><li><code>df -h</code> 查看磁盘上目录的存储的空间情况</li><li>找到最大的磁盘的空间目录,最好准备好 50 GB 以上的空间</li><li>新建目录如下:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./yum_data/centos/7/os/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/extras/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/updates/x86_64</span><br><span class="line">mkdir -p ./yum_data/centos/7/epel/x86_64</span><br></pre></td></tr></table></figure><ol start="5"><li>开始同步 base extras updates epel 源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yum_data</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/os/x86_64/ ./centos/7/os/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/extras/x86_64/ ./centos/7/extras/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/centos/7/updates/x86_64/ ./7/updates/x86_64/</span><br><span class="line">rsync -av rsync://rsync.mirrors.ustc.edu.cn/epel/7/x86_64/ ./epel/7/x86_64/</span><br></pre></td></tr></table></figure><ol start="6"><li>开始漫长的等待……</li><li>等待全部同步完毕, <code>tar -czf yum_data.tar.gz ./yum_data</code> ,压缩目录</li><li>压缩包拷贝到服务器上</li></ol><h2 id="配置本地-yum-源"><a href="#配置本地-yum-源" class="headerlink" title="配置本地 yum 源"></a>配置本地 yum 源</h2><ol><li>找到一个空间大的目录下,解压包: <code>tar -xvf yum_data.tar.gz</code></li><li>创建一个新的源配置: <code>touch /etc/yum.repos.d/private.repo</code></li><li>插入一下内容:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">local</span>-base]</span><br><span class="line">name=Base Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/os/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line">[<span class="built_in">local</span>-extras]</span><br><span class="line">name=Extras Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/extras/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=2</span><br><span class="line">[<span class="built_in">local</span>-updates]</span><br><span class="line">name=Updates Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/updates/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=3</span><br><span class="line">[<span class="built_in">local</span>-epel]</span><br><span class="line">name=Epel Server Repository</span><br><span class="line">baseurl=file:///home/liufa/yum_data/centos/7/epel/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=4</span><br></pre></td></tr></table></figure><ol start="4"><li>禁用原来的 Base Extras Updates 源: <code>yum-config-manager --disable Base,Extras,Updates</code></li><li><code>yum clean all</code></li><li><code>yum makecache</code></li><li><code>yum repolist</code> 查看源信息</li></ol><h2 id="配置网络-yum-源"><a href="#配置网络-yum-源" class="headerlink" title="配置网络 yum 源"></a>配置网络 yum 源</h2><p>有时候我们搭建的私有 yum 还需要提供给其他的机器使用,这时候再做一个网络的 yum 即可,用 Apache 或者 Nginx 搭建个服务即可</p><ol><li><code>yum install nginx</code></li><li><code>vim /etc/nginx/nginx.conf</code> 修改</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /home/liufa/yum_data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>这时 private.repo 里的 baseurl 全改为网络地址即可</li></ol>]]></content>
    
    <summary type="html">
    
      有时我们的服务器网络并不允许连接互联网,这时候 yum 安装软件就有很多麻烦事情了
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
      <category term="YUM" scheme="http://blog.joylau.cn/tags/YUM/"/>
    
  </entry>
  
  <entry>
    <title>$.post() 和 $.ajax() 的问题记录</title>
    <link href="http://blog.joylau.cn/2018/12/04/Jquery-Post/"/>
    <id>http://blog.joylau.cn/2018/12/04/Jquery-Post/</id>
    <published>2018-12-04T03:02:40.000Z</published>
    <updated>2018-12-08T06:32:50.248Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>想着写个 demo, 用个简单的 jq 的 post 请求传递数组,却发现遇到了不少问题…<br>一顿研究,总结如下:</p><h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3><p>语法:<br>$.post(url,data,success(data, textStatus, jqXHR),dataType)</p><p>url    必需。规定把请求发送到哪个 URL。<br>data    可选。映射或字符串值。规定连同请求发送到服务器的数据。<br>success(data, textStatus, jqXHR)    可选。请求成功时执行的回调函数。<br>dataType    可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script 或 html</p><p>总结需要注意的是: </p><ul><li>请求的 Content-Type 是 <code>application/x-www-form-urlencoded; charset=UTF-8</code> 就是表单提交的,dataType值得是规定服务器的响应方式</li><li>第二个参数 data 的类型是键值对的对象,不能为 JSON.stringify 后的 json 字符串,序列化后也是 key 的数据</li><li>传数组会有问题,会将数组中每个对象的拆开然后堆到一起作为键值对传输数据, 可以通过 <code>jQuery.ajaxSettings.traditional = true;</code> 在 post 请求之前设置,防止这样的情况发生,但是对象不会被序列化,会变成 Object 这样的格式,这也不是我们想要的结果</li></ul><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>很传统的使用方式了:<br>发送 post 请求<br>我们的 points 的是数组,里面是多个对象<br>数据传输使用 Request Payload 方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    url: location.origin + <span class="string">"/trafficService/pixelToLngLat"</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(points),</span><br><span class="line">    contentType: <span class="string">"application/json; charset=UTF-8"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res, status</span>) </span>&#123;</span><br><span class="line">        res.map(<span class="function"><span class="params">point</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(point)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台使用方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/pixelToLngLat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">pixelToLngLat</span><span class="params">(@RequestBody JSONArray points)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(baiduApi.getNodeService() + <span class="string">"/traffic/pixelToLngLat"</span>,points,JSONArray.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很传统的使用方式</p><h3 id="强行使用-post"><a href="#强行使用-post" class="headerlink" title="强行使用 $.post()"></a>强行使用 $.post()</h3><p>这个时候我们参数还是传输的键值对方式,只不过将值转化为 json 字符串进行传输</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajaxSettings.traditional = <span class="literal">true</span>;</span><br><span class="line">$.post(location.origin + <span class="string">"/trafficService/pixelToLngLat"</span>, &#123;<span class="attr">points</span>:<span class="built_in">JSON</span>.stringify(points)&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">res, status</span>) </span>&#123;</span><br><span class="line">    res.map(<span class="function"><span class="params">point</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(point)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><p>后台使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/pixelToLngLat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">pixelToLngLat</span><span class="params">(@RequestParam(<span class="string">"points"</span>)</span> String points)</span>&#123;</span><br><span class="line">    JSONArray array = JSONArray.parseArray(points);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(baiduApi.getNodeService() + <span class="string">"/traffic/pixelToLngLat"</span>,array,JSONArray.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>表单提交方式,如果后台有相应的对象的来接受参数的话,直接在方法是使用对象即可,不需要再通过 JSONObject 将字符串转数组了,这种方式 $.ajax() 同样也适用</p></blockquote>]]></content>
    
    <summary type="html">
    
      想着写个 demo, 用个简单的 jq 的 post 请求传递数组,却发现遇到了不少问题...
    
    </summary>
    
      <category term="前端篇" scheme="http://blog.joylau.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
      <category term="Jquery" scheme="http://blog.joylau.cn/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>关于Jdk 8 Stream 的使用记录</title>
    <link href="http://blog.joylau.cn/2018/11/29/JDK8-Stream-Use/"/>
    <id>http://blog.joylau.cn/2018/11/29/JDK8-Stream-Use/</id>
    <published>2018-11-29T09:43:00.000Z</published>
    <updated>2018-12-08T06:28:38.030Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="reduce-使用记录"><a href="#reduce-使用记录" class="headerlink" title="reduce() 使用记录"></a>reduce() 使用记录</h2><p>reduce 有三种方法可以使用:</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code></li></ul><p>第一种传入二元运算表达式,第二种是带初始值的二元运算表达式,这里着重记录下第三种的使用方式</p><p>第三种第一个参数方法的返回值类型,<br>第二个参数是一个二元运算表达式,这个表达式的第一个参数是方法的返回值,也就是方法的第一个参数,第二个参数是 Stream 里的值<br>第三个参数也是一个二元运算表达式,表达式的2个参数都是方法返回值的类型,用于对返回值类型的操作</p><p>第三个参数在非并发的情况下返回任何类型(甚至是 null)都没有影响,因为在非并发情况下,第三个二元表达式根本不会执行</p><p>那么第三个二元表达式用在并发的情况下,在并发的情况下,第二个二元表达式的第一个参数始终是方法的第一个类型,第三个三元表达式用于将不同线程操作的结果汇总起来</p><h2 id="map-和-flatMap"><a href="#map-和-flatMap" class="headerlink" title="map() 和 flatMap()"></a>map() 和 flatMap()</h2><p>区别在于, map() 返回自定义对象, 而 flatMap() 返回 Stream 流对象</p><h2 id="distinct-使用记录"><a href="#distinct-使用记录" class="headerlink" title="distinct() 使用记录"></a>distinct() 使用记录</h2><p>最近在 lamda 的 stream 进行 list 去重复的时候，发现没有生效<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;FollowAnalysisPojo&gt;&gt;&gt; maps = allList</span><br><span class="line">            .parallelStream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect(Collectors.groupingBy(FollowAnalysisPojo::getMainPlateNum,Collectors.groupingBy(FollowAnalysisPojo::getPlateNum)));</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被跟车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String mainPlateNum;</span><br><span class="line">    <span class="comment">/*跟踪车牌*/</span></span><br><span class="line">    <span class="keyword">private</span> String plateNum;</span><br><span class="line">    <span class="keyword">private</span> String vehicleType;</span><br><span class="line">    <span class="keyword">private</span> String siteName;</span><br><span class="line">    <span class="keyword">private</span> String directionName;</span><br><span class="line">    <span class="comment">/*车主时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeMain;</span><br><span class="line">    <span class="comment">/*伴随时间*/</span></span><br><span class="line">    <span class="keyword">private</span> String passTimeSub;</span><br><span class="line">    <span class="comment">/*跟踪次数*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer trackCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录被跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer mainRowSpan = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*该条记录跟踪车占据的行数，用于在前端合并单元格*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowSpan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key = UUID.randomUUID().toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码是想做 先对查询出来的数据进行去重复的操作，然后在按照被跟车牌和跟踪车牌进行分组操作<br>有点需要说明的是 <code>parallelStream()</code> 比我们常用的 <code>stream()</code> 是并行多管操作，速度上更快</p><p>然后发现的问题是并没有去重复，当时也在奇怪 distinct() 里并没有任何参数来指定如何使用规则来去重复</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>重写List中实体类的 <code>equals()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当车主时间,伴随时间都相同时，则认为是一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> FollowAnalysisPojo))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        FollowAnalysisPojo followAnalysisPojo = (FollowAnalysisPojo)obj;</span><br><span class="line">        <span class="keyword">return</span> passTimeMain.equals(followAnalysisPojo.passTimeMain) &amp;&amp; passTimeSub.equals(followAnalysisPojo.passTimeSub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就按照我自定义的规则进行去重复了<br>运行了一下，发现还是不起作用<br>debug了一下，发现根本没有执行重写的 equals 方法<br>原来还需要重写 <code>hashCode()</code> 方法<br>在 <code>equals()</code> 方法 执行前会先执行 <code>hashCode()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowAnalysisPojo</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新 equals 方法必须重新 hashCode方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = passTimeMain.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + passTimeMain.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以了。</p><h3 id="2018-9-13-更新"><a href="#2018-9-13-更新" class="headerlink" title="2018-9-13 更新"></a>2018-9-13 更新</h3><p>如果我们不重写方法，有没有办法按照List中bean的某个属性来去重复呢？答案是有的，利用的是 stream 的 reduce，用一个set 来存放 key,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;JSONObject&gt; result = trails.stream()</span><br><span class="line">            .filter(distinctByKey(VehicleTrail::getPlateNbr))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; seen = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.add(keyExtractor.apply(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java 8 lamda 表达式的 stream 有很多实用的方法，这里记录下日常的使用记录
    
    </summary>
    
      <category term="Java篇" scheme="http://blog.joylau.cn/categories/Java%E7%AF%87/"/>
    
    
      <category term="java" scheme="http://blog.joylau.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重剑无锋,大巧不工 SpringBoot --- 理解 ThreadPoolTaskExecutor</title>
    <link href="http://blog.joylau.cn/2018/11/24/SpringBoot-ThreadPoolTaskExecutor/"/>
    <id>http://blog.joylau.cn/2018/11/24/SpringBoot-ThreadPoolTaskExecutor/</id>
    <published>2018-11-24T06:35:07.000Z</published>
    <updated>2018-11-24T07:12:51.572Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="spring-的线程池-ThreadPoolTaskExecutor"><a href="#spring-的线程池-ThreadPoolTaskExecutor" class="headerlink" title="spring 的线程池 ThreadPoolTaskExecutor"></a>spring 的线程池 ThreadPoolTaskExecutor</h3><p>spring 为我们实现了一个基于 ThreadPoolExecutor 线程池</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>yml </li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">traffic:</span></span><br><span class="line"><span class="attr">  executor:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"trafficServiceExecutor"</span></span><br><span class="line"><span class="attr">    core-pool-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    max-pool-size:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    queue-capacity:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    thread-name-prefix:</span> <span class="string">"traffic-service-"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Configuration</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"traffic.executor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer maxPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer queueCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String threadNamePrefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(Executor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">trafficServiceExecutor</span><span class="params">(@Autowired Executor executor)</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        threadPoolTaskExecutor.setCorePoolSize(executor.getCorePoolSize());</span><br><span class="line">        threadPoolTaskExecutor.setMaxPoolSize(executor.getMaxPoolSize());</span><br><span class="line">        threadPoolTaskExecutor.setQueueCapacity(executor.getQueueCapacity());</span><br><span class="line">        threadPoolTaskExecutor.setThreadNamePrefix(executor.getThreadNamePrefix());</span><br><span class="line">        threadPoolTaskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        threadPoolTaskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> threadPoolTaskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅此步骤,我们在使用的时候,只需要注解 @Async(“trafficServiceExecutor”) 配置好 name 即可</p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>理解图<br><img src="http://image.joylau.cn/blog/springboot-ThreadPoolTaskExecutor.jpg" alt=""></p><h3 id="看点数据"><a href="#看点数据" class="headerlink" title="看点数据"></a>看点数据</h3><p>在线程池整个运作过程中,想看下运行状态的话可以这么做:<br>常用状态：</p><ul><li><code>taskCount</code>：线程需要执行的任务个数。</li><li><code>completedTaskCount</code>：线程池在运行过程中已完成的任务数。</li><li><code>largestPoolSize</code>：线程池曾经创建过的最大线程数量。</li><li><code>getPoolSize</code>: 获取当前线程池的线程数量。</li><li><code>getActiveCount</code>：获取活动的线程的数量</li></ul><p>通过继承线程池，重写beforeExecute，afterExecute和terminated方法来在线程执行任务前，线程执行任务结束，和线程终结前获取线程的运行情况，根据具体情况调整线程池的线程数量</p><h3 id="重写一波"><a href="#重写一波" class="headerlink" title="重写一波"></a>重写一波</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExecutor</span> <span class="keyword">extends</span> <span class="title">ExecutorConfigurationSupport</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AsyncListenableTaskExecutor</span>, <span class="title">SchedulingTaskExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object poolSizeMonitor = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> TaskDecorator taskDecorator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Runnable decorator to user-level FutureTask, if different</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, Object&gt; decoratedTaskMap =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">16</span>, ConcurrentReferenceHashMap.ReferenceType.WEAK);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCorePoolSize</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setCorePoolSize(corePoolSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCorePoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxPoolSize</span><span class="params">(<span class="keyword">int</span> maxPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.maxPoolSize = maxPoolSize;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setMaximumPoolSize(maxPoolSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.maxPoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeepAliveSeconds</span><span class="params">(<span class="keyword">int</span> keepAliveSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.keepAliveSeconds = keepAliveSeconds;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.threadPoolExecutor.setKeepAliveTime(keepAliveSeconds, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKeepAliveSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.poolSizeMonitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.keepAliveSeconds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueueCapacity</span><span class="params">(<span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queueCapacity = queueCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowCoreThreadTimeOut</span><span class="params">(<span class="keyword">boolean</span> allowCoreThreadTimeOut)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allowCoreThreadTimeOut = allowCoreThreadTimeOut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskDecorator</span><span class="params">(TaskDecorator taskDecorator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskDecorator = taskDecorator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ExecutorService <span class="title">initializeExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; queue = createQueue(<span class="keyword">this</span>.queueCapacity);</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.taskDecorator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                    <span class="keyword">this</span>.corePoolSize, <span class="keyword">this</span>.maxPoolSize, <span class="keyword">this</span>.keepAliveSeconds, TimeUnit.SECONDS,</span><br><span class="line">                    queue, threadFactory, rejectedExecutionHandler) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">                    Runnable decorated = taskDecorator.decorate(command);</span><br><span class="line">                    <span class="keyword">if</span> (decorated != command) &#123;</span><br><span class="line">                        decoratedTaskMap.put(decorated, command);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">super</span>.execute(decorated);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                    <span class="keyword">this</span>.corePoolSize, <span class="keyword">this</span>.maxPoolSize, <span class="keyword">this</span>.keepAliveSeconds, TimeUnit.SECONDS,</span><br><span class="line">                    queue, threadFactory, rejectedExecutionHandler)&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                    log.error("线程开始......");</span></span><br><span class="line"><span class="comment">//                    log.error("当前线程池的线程数量:&#123;&#125;",MyExecutor.this.getPoolSize());</span></span><br><span class="line"><span class="comment">//                    log.error("活动的线程的数量:&#123;&#125;",MyExecutor.this.getActiveCount());</span></span><br><span class="line"><span class="comment">//                    log.error("线程需要执行的任务个数:&#123;&#125;",getTaskCount());</span></span><br><span class="line"><span class="comment">//                    log.error("线程池在运行过程中已完成的任务数:&#123;&#125;",getCompletedTaskCount());</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class="line">                    log.error(<span class="string">"线程池在运行过程中已完成的任务数:&#123;&#125;"</span>,getCompletedTaskCount());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.allowCoreThreadTimeOut) &#123;</span><br><span class="line">            executor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.threadPoolExecutor = executor;</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> BlockingQueue&lt;Runnable&gt; <span class="title">createQueue</span><span class="params">(<span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(queueCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">getThreadPoolExecutor</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        Assert.state(<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>, <span class="string">"ThreadPoolTaskExecutor not initialized"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Not initialized yet: assume core pool size.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.corePoolSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor.getPoolSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.threadPoolExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Not initialized yet: assume no active threads.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor.getActiveCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        Executor executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</span><br><span class="line">        execute(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListenableFuture&lt;?&gt; submitListenable(Runnable task) &#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListenableFutureTask&lt;Object&gt; future = <span class="keyword">new</span> ListenableFutureTask&lt;&gt;(task, <span class="keyword">null</span>);</span><br><span class="line">            executor.execute(future);</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ListenableFuture&lt;T&gt; <span class="title">submitListenable</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = getThreadPoolExecutor();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListenableFutureTask&lt;T&gt; future = <span class="keyword">new</span> ListenableFutureTask&lt;&gt;(task);</span><br><span class="line">            executor.execute(future);</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cancelRemainingTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.cancelRemainingTask(task);</span><br><span class="line">        <span class="comment">// Cancel associated user-level Future handle as well</span></span><br><span class="line">        Object original = <span class="keyword">this</span>.decoratedTaskMap.get(task);</span><br><span class="line">        <span class="keyword">if</span> (original <span class="keyword">instanceof</span> Future) &#123;</span><br><span class="line">            ((Future&lt;?&gt;) original).cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看 <code>initializeExecutor</code> 方法,我重写了 <code>ThreadPoolExecutor</code> 的 <code>beforeExecute</code> 和 <code>afterExecute</code> 打印了一些信息,可以帮助理解整个过程</p><h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><ul><li>如果是CPU密集型任务，那么线程池的线程个数应该尽量少一些，一般为CPU的个数+1条线程。 linux 查看 CPU 信息 : <code>cat /proc/cpuinfo</code></li><li>如果是IO密集型任务，那么线程池的线程可以放的很大，如2*CPU的个数。</li><li>对于混合型任务，如果可以拆分的话，通过拆分成CPU密集型和IO密集型两种来提高执行效率；如果不能拆分的的话就可以根据实际情况来调整线程池中线程的个数。</li></ul>]]></content>
    
    <summary type="html">
    
      在我们日常开发中难免要使用多线程去执行任务,使用多线程的话我们通常会使用线程池
    
    </summary>
    
      <category term="SpringBoot篇" scheme="http://blog.joylau.cn/categories/SpringBoot%E7%AF%87/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.joylau.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker OpenVPN 服务搭建记录</title>
    <link href="http://blog.joylau.cn/2018/11/21/Docker-OpenVPN/"/>
    <id>http://blog.joylau.cn/2018/11/21/Docker-OpenVPN/</id>
    <published>2018-11-20T16:29:23.000Z</published>
    <updated>2018-11-21T02:25:44.960Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>出差在外或者在家工作都需要连接公司网络,没有 VPN 怎么能行</p><h2 id="OpenVPN-服务端部署"><a href="#OpenVPN-服务端部署" class="headerlink" title="OpenVPN 服务端部署"></a>OpenVPN 服务端部署</h2><ol><li>全局变量配置: OVPN_DATA=”/home/joylau/ovpn-data”</li><li><code>mkdir ${OVPN_DATA}</code> , <code>cd ${OVPN_DATA}</code></li><li>这里我使用的是 tcp, udp 的好像没映射, 我用起来有问题,后来换的 tcp 方式, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://公网 IP</code></li><li>初始化,这里的密码我们都设置为 123456, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</code></li><li>创建用户 liufa , 不使用密码的话在最后面加上 nopass, 使用密码就键入密码,这里我们使用 123456, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full liufa</code></li><li>为用户 liufa 生成秘钥, <code>docker run -v ${OVPN_DATA}:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient liufa &gt; ${OVPN_DATA}/liufa.ovpn</code></li><li>创建的文件中端口默认使用的是 1194, 而我用的是 6001,那我们还得修改下 liufa.ovpn 文件的端口</li><li>运行容器,这里我的宿主机端口为 6001, <code>docker run --name openvpn -v ${OVPN_DATA}:/etc/openvpn -d -p 6001:1194 --privileged kylemanna/openvpn</code></li></ol><h2 id="OpenVPN-客户端使用说明"><a href="#OpenVPN-客户端使用说明" class="headerlink" title="OpenVPN 客户端使用说明"></a>OpenVPN 客户端使用说明</h2><p><img src="https://img.shields.io/badge/author-joylau-green.svg" alt="">    <img src="https://img.shields.io/badge/date-2018--11--20-yellow.svg" alt="">    <img src="https://img.shields.io/badge/version-1.0-blue.svg" alt=""></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li>安装 openVPN windows 客户端，地址：<a href="https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.6-I602.exe" target="_blank" rel="noopener">https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.6-I602.exe</a> , 该地址需要梯子</li><li>启动客户端，右键，选择 import file, 导入 ovpn 文件，文件请 联系管理员发给你</li><li>右键 connect,如果弹出框提示输入密码，输入默认密码 123456 ，等待连接成功即可</li></ol><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol><li>安装 openvpn：<code>sudo yum install openvpn</code> 或者 <code>sudo apt install openvpn</code></li><li>找到 ovpn 文件所在目录： <code>sudo openvpn --config ./liufa.ovpn</code>, 看到成功信息时即连接成功</li><li>可以用 nohup 以守护进程运行</li></ol><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><ol><li>安装 Tunnelblick，地址：<a href="https://tunnelblick.net/" target="_blank" rel="noopener">https://tunnelblick.net/</a></li><li>导入 ovpn文件</li><li>状态栏上点击连接VPN</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>连接上 VPN 后,默认所有流量都⾛的 VPN,但事实上我们并不想这么做. </li><li>⽐如公司内⽹的⽹段为 192.168.10.0 ⽹段,我们先删除 2 个 0.0.0.0 的路由: <code>route delete 0.0.0.0</code></li><li>然后添加 0.0.0.0 到本机的⽹段 <code>route add 0.0.0.0 mask 255.255.255.0 本机内⽹网关</code> </li><li>再指定 10 ⽹段⾛ VPN 通道 <code>route add 192.168.10.0 mask 255.255.255.0 VPN 网关</code></li><li>以上路由添加默认是临时的,重启失效,⽤久保存可加 -p 参数</li></ul>]]></content>
    
    <summary type="html">
    
      出差在外或者在家工作都需要连接公司网络,没有 VPN 怎么能行
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="OpenVPN" scheme="http://blog.joylau.cn/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>Docker 私服搭建记录</title>
    <link href="http://blog.joylau.cn/2018/11/19/Docker-PrivateRepo/"/>
    <id>http://blog.joylau.cn/2018/11/19/Docker-PrivateRepo/</id>
    <published>2018-11-19T14:51:33.000Z</published>
    <updated>2018-12-13T09:11:00.057Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>docker pull registry</li><li><p>docker run -itd -v /data/registry:/var/lib/registry -p 5000:5000 –restart=always –privileged=true –name registry registry:latest<br> 参数说明<br> -itd：在容器中打开一个伪终端进行交互操作，并在后台运行；<br> -v：把宿主机的/data/registry目录绑定 到 容器/var/lib/registry目录(这个目录是registry容器中存放镜像文件的目录)，来实现数据的持久化；<br> -p：映射端口；访问宿主机的5000端口就访问到registry容器的服务了；<br> –restart=always：这是重启的策略，假如这个容器异常退出会自动重启容器；<br> –privileged=true 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加特权，不加上传镜像会报权限错误OSError: [Errno 13] Permission denied: ‘/tmp/registry/repositories/liibrary’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误<br> –name registry：创建容器命名为registry，你可以随便命名；<br> registry:latest：这个是刚才pull下来的镜像；</p></li><li><p>测试是否成功: curl <a href="http://127.0.0.1:5000/v2/_catalog" target="_blank" rel="noopener">http://127.0.0.1:5000/v2/_catalog</a>, 返回仓库的镜像列表</p></li><li>在中央仓库下载一个镜像: docker pull openjdk</li><li>更改这个镜像的标签: docker tag imageId domain:5000/openjdk 或者 docker tag imageName:tag domain:5000/openjdk</li><li>上传镜像到私服: docker push domain:5000/openjdk</li></ol><p>报错: Get <a href="https://172.18.18.90:5000/v2/" target="_blank" rel="noopener">https://172.18.18.90:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>解决: 需要https的方法才能上传，我们可以修改下daemon.json<br>      vim /etc/docker/daemon.json<br>      {<br>        “insecure-registries”: [ “domain:5000”]<br>      }</p><h3 id="无网络搭建"><a href="#无网络搭建" class="headerlink" title="无网络搭建"></a>无网络搭建</h3><ol><li>在有网络的机器上 <code>docker pull registry</code></li><li><code>docker save registry &gt; registry.tar</code> 保存到个 tar 包</li><li>拷贝到服务器上, <code>docker load -i registry.tar</code> 导入镜像</li><li><code>docker images</code> 查看镜像</li><li>再继续上面的操作</li></ol><h3 id="docker-开启-tcp-端口"><a href="#docker-开启-tcp-端口" class="headerlink" title="docker 开启 tcp 端口"></a>docker 开启 tcp 端口</h3><ul><li><code>vim /usr/lib/systemd/system/docker.service</code></li></ul><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd-current -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock \</span><br></pre></td></tr></table></figure><p>重启即可,之后 idea 可输入 tcp://ip:2375 连接</p>]]></content>
    
    <summary type="html">
    
      国内的网络环境不好,在 docker build 的时候经常因为网络的问题失败,很是苦恼
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>记录 -- Docker 三种方式部署 ownCloud</title>
    <link href="http://blog.joylau.cn/2018/10/26/Docker-ownCloud/"/>
    <id>http://blog.joylau.cn/2018/10/26/Docker-ownCloud/</id>
    <published>2018-10-26T01:15:55.000Z</published>
    <updated>2018-10-26T03:28:19.392Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>ownCloud 除了传统的部署方式,在如今 docker 大行其道的环境下,使用 docker 部署 ownCloud 才是最方便的</p><h3 id="第一种-owncloud-镜像直接安装"><a href="#第一种-owncloud-镜像直接安装" class="headerlink" title="第一种 owncloud 镜像直接安装"></a>第一种 owncloud 镜像直接安装</h3><p>直接部署 owncloud 镜像,该镜像地址: <a href="https://hub.docker.com/r/_/owncloud/" target="_blank" rel="noopener">https://hub.docker.com/r/_/owncloud/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull owncloud</span><br><span class="line">docker run -d -p 80:80 owncloud</span><br></pre></td></tr></table></figure><p>这种方式的需要你提前装好 MariaDb 数据库,在启动完成后打开页面会按照流程填写数据库的链接信息,之后就可以使用 ownCloud 了</p><h3 id="第二种-分别安装"><a href="#第二种-分别安装" class="headerlink" title="第二种 分别安装"></a>第二种 分别安装</h3><p>分别先后使用 docker 按照 redis,mariadb,ownCloud<br>安装 redis 的 mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker volume create owncloud_redis</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name redis \</span><br><span class="line">  -e REDIS_DATABASES=1 \</span><br><span class="line">  --volume owncloud_redis:/var/lib/redis \</span><br><span class="line">  webhippie/redis:latest</span><br><span class="line"></span><br><span class="line">docker volume create owncloud_mysql</span><br><span class="line">docker volume create owncloud_backup</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mariadb \</span><br><span class="line">  -e MARIADB_ROOT_PASSWORD=owncloud \</span><br><span class="line">  -e MARIADB_USERNAME=owncloud \</span><br><span class="line">  -e MARIADB_PASSWORD=owncloud \</span><br><span class="line">  -e MARIADB_DATABASE=owncloud \</span><br><span class="line">  --volume owncloud_mysql:/var/lib/mysql \</span><br><span class="line">  --volume owncloud_backup:/var/lib/backup \</span><br><span class="line">  webhippie/mariadb:latest</span><br></pre></td></tr></table></figure><p>接着我们配置一些 ownCloud web 服务的环境变量,并在启动容器时使用这些变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export OWNCLOUD_VERSION=10.0</span><br><span class="line">export OWNCLOUD_DOMAIN=localhost</span><br><span class="line">export ADMIN_USERNAME=admin</span><br><span class="line">export ADMIN_PASSWORD=admin</span><br><span class="line">export HTTP_PORT=80</span><br><span class="line"></span><br><span class="line">docker volume create owncloud_files</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name owncloud \</span><br><span class="line">  --link mariadb:db \</span><br><span class="line">  --link redis:redis \</span><br><span class="line">  -p $&#123;HTTP_PORT&#125;:8080 \</span><br><span class="line">  -e OWNCLOUD_DOMAIN=$&#123;OWNCLOUD_DOMAIN&#125; \</span><br><span class="line">  -e OWNCLOUD_DB_TYPE=mysql \</span><br><span class="line">  -e OWNCLOUD_DB_NAME=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_USERNAME=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_PASSWORD=owncloud \</span><br><span class="line">  -e OWNCLOUD_DB_HOST=db \</span><br><span class="line">  -e OWNCLOUD_ADMIN_USERNAME=$&#123;ADMIN_USERNAME&#125; \</span><br><span class="line">  -e OWNCLOUD_ADMIN_PASSWORD=$&#123;ADMIN_PASSWORD&#125; \</span><br><span class="line">  -e OWNCLOUD_REDIS_ENABLED=true \</span><br><span class="line">  -e OWNCLOUD_REDIS_HOST=redis \</span><br><span class="line">  --volume owncloud_files:/mnt/data \</span><br><span class="line">  owncloud/server:$&#123;OWNCLOUD_VERSION&#125;</span><br></pre></td></tr></table></figure><p>之后稍等片刻,打开网页即可</p><h3 id="第三种-docker-compose-部署"><a href="#第三种-docker-compose-部署" class="headerlink" title="第三种 docker-compose 部署"></a>第三种 docker-compose 部署</h3><p>首先保证 docker-compose 的版本在 1.12.0+ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个新的目录</span><br><span class="line">mkdir owncloud-docker-server</span><br><span class="line"></span><br><span class="line">cd owncloud-docker-server</span><br><span class="line"></span><br><span class="line"># 下载 docker-compose.yml 文件</span><br><span class="line">wget https://raw.githubusercontent.com/owncloud-docker/server/master/docker-compose.yml</span><br><span class="line"></span><br><span class="line"># 配置环境变量文件</span><br><span class="line">cat &lt;&lt; EOF &gt; .env</span><br><span class="line">OWNCLOUD_VERSION=10.0</span><br><span class="line">OWNCLOUD_DOMAIN=localhost</span><br><span class="line">ADMIN_USERNAME=admin</span><br><span class="line">ADMIN_PASSWORD=admin</span><br><span class="line">HTTP_PORT=80</span><br><span class="line">HTTPS_PORT=443</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 构建并启动容器</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>当上面的流程都完成时，通过运行 <code>docker-compose ps</code> 检查所有容器是否已成功启动<br>还可以使用 <code>docker-compose logs --follow owncloud</code> 来查看日志<br><code>docker-compose stop</code> 停止容器<br><code>docker-compose down</code> 停止和删除容器</p><h4 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h4><ol><li>进入 .yaml 或 .env 目录</li><li>将 ownCloud 设置维护模式,<code>docker-compose exec server occ maintenance:mode --on</code></li><li>停止容器, <code>docker-compose down</code></li><li>修改. env 文件的版本号,手动或者 <code>sed -i &#39;s/^OWNCLOUD_VERSION=.*$/OWNCLOUD_VERSION=&lt;newVersion&gt;/&#39; /compose/*/.env</code></li><li>重新构建并启动, <code>docker-compose up -d</code></li></ol><p>配置说明<br>OWNCLOUD_VERSION:  ownCloud 版本<br>OWNCLOUD_DOMAIN: ownCloud 可访问的域<br>ADMIN_USERNAME: 管理员用户名<br>ADMIN_PASSWORD: 管理员密码<br>HTTP_PORT: 使用的端口<br>HTTPS_PORT: SSL使用的端口</p><p>总结来说,推荐使用第三种方式来部署.</p>]]></content>
    
    <summary type="html">
    
      ownCloud 除了传统的部署方式,在如今 docker 大行其道的环境下,使用 docker 部署 ownCloud 才是最方便的
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
      <category term="ownCloud" scheme="http://blog.joylau.cn/tags/ownCloud/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 关键字自动补全的实现</title>
    <link href="http://blog.joylau.cn/2018/08/13/Elasticsearch-AutoComplete/"/>
    <id>http://blog.joylau.cn/2018/08/13/Elasticsearch-AutoComplete/</id>
    <published>2018-08-13T03:01:12.000Z</published>
    <updated>2018-10-26T07:01:31.187Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们经常能看到在各大电商网站搜索关键字的时候,底下下拉框会补全你要搜索的商品,或者类似的商品,有时候甚至连错别字也能纠正过来,其实ElasticSearch也能实现这样的功能</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>首先,能够被自动补全的需要设置索引类型为”completion”,其次,还可以设置自动提示为中文分词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"analysis"</span>: &#123;</span><br><span class="line">      <span class="attr">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="attr">"ik"</span>: &#123;</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ngram_analyzer"</span>: &#123;</span><br><span class="line">          <span class="attr">"tokenizer"</span>: <span class="string">"ngram_tokenizer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"tokenizer"</span>: &#123;</span><br><span class="line">        <span class="attr">"ngram_tokenizer"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"ngram"</span>,</span><br><span class="line">          <span class="attr">"min_gram"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"max_gram"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"token_chars"</span>: [</span><br><span class="line">            <span class="string">"letter"</span>,</span><br><span class="line">            <span class="string">"digit"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"knowledge_info"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"infoId"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoTitle"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoKeywords"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoSummary"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">30</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"wordCloud"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">              <span class="attr">"fielddata"</span>:<span class="string">"true"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoContent"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyAuthor"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyIssueUnit"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyStandardCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLiteratureCategory"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLcCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"propertyLiteratureCode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"data"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"attachment.content"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"auditState"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoType"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoFileUrl"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infoFileName"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">          <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"suggest"</span>: &#123;</span><br><span class="line">              <span class="attr">"max_input_length"</span>: <span class="number">60</span>,</span><br><span class="line">              <span class="attr">"preserve_position_increments"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"completion"</span>,</span><br><span class="line">              <span class="attr">"preserve_separators"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"createTime"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 elasticsearch 需要安装中文分词 ik 插件和附件处理插件 ingest-attachment</p><h3 id="Java-API-调用"><a href="#Java-API-调用" class="headerlink" title="Java API 调用"></a>Java API 调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动完成提示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> search search</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MessageBody</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBody <span class="title">autoCompleteKnowledgeInfo</span><span class="params">(KnowledgeSearch search)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置搜索建议</span></span><br><span class="line">    CompletionSuggestionBuilder infoTitleSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoTitle.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoKeywordsSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoKeywords.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoSummarySuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoSummary.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    CompletionSuggestionBuilder infoFileNameSuggestion = <span class="keyword">new</span> CompletionSuggestionBuilder(<span class="string">"infoFileName.suggest"</span>)</span><br><span class="line">            .text(search.getQuery())</span><br><span class="line">            .size(<span class="number">6</span>);</span><br><span class="line">    SuggestBuilder suggestBuilder = <span class="keyword">new</span> SuggestBuilder()</span><br><span class="line">            .addSuggestion(<span class="string">"标题"</span>, infoTitleSuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"关键字"</span>, infoKeywordsSuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"摘要"</span>, infoSummarySuggestion)</span><br><span class="line">            .addSuggestion(<span class="string">"附件"</span>,infoFileNameSuggestion);</span><br><span class="line">    SearchRequestBuilder searchRequest = client.prepareSearch(ES_KNOWLEDGE_INDEX)</span><br><span class="line">            .setFetchSource(<span class="keyword">false</span>)</span><br><span class="line">            .suggest(suggestBuilder);</span><br><span class="line">    List&lt;JSONObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询结果</span></span><br><span class="line">    SearchResponse searchResponse = searchRequest.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*没查到结果*/</span></span><br><span class="line">    <span class="keyword">if</span> (searchResponse.getSuggest() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageBody.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">    searchResponse.getSuggest().forEach(entries -&gt; &#123;</span><br><span class="line">        String name = entries.getName();</span><br><span class="line">        <span class="keyword">for</span> (Suggest.Suggestion.Entry&lt;? extends Suggest.Suggestion.Entry.Option&gt; entry : entries) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Suggest.Suggestion.Entry.Option option : entry.getOptions()) &#123;</span><br><span class="line">                JSONObject object = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                object.put(<span class="string">"name"</span>,name);</span><br><span class="line">                object.put(<span class="string">"text"</span>,option.getText().string());</span><br><span class="line">                list.add(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> MessageBody.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码摘取自项目中的部分, 另外前端还可以配合自动完成的插件,最终来实现效果.</p>]]></content>
    
    <summary type="html">
    
      我们经常能看到在各大电商网站搜索关键字的时候,底下下拉框会补全你要搜索的商品,或者类似的商品,有时候甚至连错别字也能纠正过来,其实ElasticSearch也能实现这样的功能
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 查询全部数据</title>
    <link href="http://blog.joylau.cn/2018/08/09/Elasticsearch-SearchAll/"/>
    <id>http://blog.joylau.cn/2018/08/09/Elasticsearch-SearchAll/</id>
    <published>2018-08-09T07:27:16.000Z</published>
    <updated>2018-08-13T02:51:53.682Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有时我们希望查询 固定条件下的全部数据<br>ES 默认的策略是返回10条数据<br>虽然可以 setSize()<br>但是默认上限是 10 万还是 100 万条数据,这不够优雅,一般不这么干</p><h3 id="TransportClient-方法"><a href="#TransportClient-方法" class="headerlink" title="TransportClient 方法"></a>TransportClient 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TimeValue keepAlive = TimeValue.timeValueMinutes(<span class="number">30</span>);</span><br><span class="line">    SearchRequestBuilder searchRequest = client.prepareSearch(ES_KNOWLEDGE_INDEX)</span><br><span class="line">            .setScroll(keepAlive)</span><br><span class="line">            .setSize(<span class="number">10000</span>);</span><br><span class="line">    SearchResponse searchResponse = searchRequest.get();</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//处理的业务 saveIds(searchResponse);</span></span><br><span class="line">        searchResponse = client.prepareSearchScroll(searchResponse.getScrollId()).setScroll(keepAlive).execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">    &#125; <span class="keyword">while</span> (searchResponse.getHits().getHits().length != <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录下 ES 查询全部数据的 API 使用用法
    
    </summary>
    
      <category term="大数据篇" scheme="http://blog.joylau.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AF%87/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.joylau.cn/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>$(...).autocomplete is not a function 问题的解决</title>
    <link href="http://blog.joylau.cn/2018/08/09/Jquery-Load-Plugins/"/>
    <id>http://blog.joylau.cn/2018/08/09/Jquery-Load-Plugins/</id>
    <published>2018-08-09T02:04:52.000Z</published>
    <updated>2018-08-09T02:29:19.757Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>因项目需求,需要一个自动提示的功能,想到之前有 jquery 的 jQuery-Autocomplete 插件,于是就直接拿来用了,<br>直接在github 上找到了一个 starts 最多的项目 <a href="https://github.com/devbridge/jQuery-Autocomplete.git" target="_blank" rel="noopener">jQuery-Autocomplete</a><br>看了下插件的 API 可配置项很多,有一个 appendTo 配置,是我想要的,于是就决定使用这个差价</p><p>直接把 插件下载下来 放到项目中去,直接 $(…).autocomplete is not a function<br>……</p><p>项目中我写的只是其中的一个模块,页面的代码是纯 html 页面写的,然后通过 panel 引入 html 代码片段<br>很奇怪,为什么插件无法加载</p><p>于是就就把官方的demo跑了一下,没有问题</p><p>又怀疑是 jQuery 版本的问题,<br>官方的demo jQuery 版本是 1.8.2,项目使用的是1.11.1,<br>于是又在官方的 demo 下替换jQuery的版本<br>发现使用没有问题</p><p>又怀疑是插件的版本过高,于是再 GitHub 的 release 上找了个2014年发布的1.2.2的版本,这已经是能找到的最低版本了<br>发现还是不行</p><p>这就奇怪了,我之前也引入过其他的插件,正常使用都没有问题,偏偏使用这个有问题<br>于是想着插件的引入方式有问题,打开一看,jQuery插件的引入方式都是大同小异的<br>本人前端不擅长,也不知道怎么改…..</p><p>于是又在 GitHub上找了其他的插件,有的能用,但是没有我想要的功能….</p><p>一直这么来来回回的测试,已经晚上 10 点了…..<br>从吃完晚饭一直研究到现在还是没有解决<br>心里好气啊!!!!!<br>空调一关,直接回家了!!!!</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>今天早上来又差了点资料,找到了个不太靠谱,但又想尝试了下的方法<br><a href="https://blog.verysu.com/article/328" target="_blank" rel="noopener">TypeError: $(…).autocomplete is not a function</a></p><p>试一下吧,没想到真的可以</p><p>发一张对比图</p><p><img src="http://image.joylau.cn/blog/Jquery-Load-Plugins.md.png" alt="query-Load-Plugins"></p>]]></content>
    
    <summary type="html">
    
      因项目需求,需要一个自动提示的功能,想到之前有 jquery 的 jQuery-Autocomplete 插件,于是就直接拿来用了,但是使用情况却不是如此
    
    </summary>
    
      <category term="前端篇" scheme="http://blog.joylau.cn/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
      <category term="Jquery" scheme="http://blog.joylau.cn/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用 ss 代理和 Ubuntu 使用 ss 全局代理</title>
    <link href="http://blog.joylau.cn/2018/08/07/Git-Proxy-And-Ubuntu-Global-Proxy/"/>
    <id>http://blog.joylau.cn/2018/08/07/Git-Proxy-And-Ubuntu-Global-Proxy/</id>
    <published>2018-08-07T08:12:53.000Z</published>
    <updated>2018-08-07T08:38:59.790Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这一段时间 GitHub 在国内的访问又出问题,代码提交不上去,需要在 Git 上走代理了</p><h2 id="Git-使用-ss-代理配置"><a href="#Git-使用-ss-代理配置" class="headerlink" title="Git 使用 ss 代理配置"></a>Git 使用 ss 代理配置</h2><ol><li>需要全局 git 都走代理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure><p>取消</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>但是有时候我们并不需要所有的 git 仓库都走代理,可以去掉上述的命令中的 <code>--global</code>,然后到你需要走代理的那个 git 仓库下执行命令,或者添加配置:</p><ol start="2"><li>单独配置 git 走代理<br>在 .git =&gt; config 文件中加入配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[https]</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br><span class="line">[http]</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>其实,也就是上述命令执行后添加的配置.配置后就可以愉快的 clone push 了.</p><h2 id="Ubuntu-使用全局代理"><a href="#Ubuntu-使用全局代理" class="headerlink" title="Ubuntu 使用全局代理"></a>Ubuntu 使用全局代理</h2><p>Windows 和 MacOS 下的 ss 全局代理很方便,点击切换下就可以了,而 Ubuntu 下需要多点操作:</p><ol><li>启动 shadowsocks-qt5，并连接上</li><li>生成 pac 文件,如果有现成的 pac 文件,直接进入第四步</li><li>生成 pac 文件</li></ol><p>安装 pip </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install genpac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade genpac</span></span><br></pre></td></tr></table></figure><p>创建 user-rules.txt 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir vpnPAC</span><br><span class="line">cd vpnPAC</span><br><span class="line">touch user-rules.txt</span><br></pre></td></tr></table></figure><p>生成 autoproxy.pac 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genpac -p "SOCKS5 127.0.0.1:1080" --gfwlist-proxy="SOCKS5 127.0.0.1:1080" --output="autoproxy.pac" --gfwlist-url="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" --user-rule-from="user-rules.txt"</span><br></pre></td></tr></table></figure><p>github 上的 gfwlist.txt 文件可能读取不到,多试几次</p><ol start="4"><li>配置使用</li></ol><p><img src="http://image.joylau.cn/blog/ubuntu-global-proxy.png" alt="配置使用"></p>]]></content>
    
    <summary type="html">
    
      这一段时间 GitHub 在国内的访问又出问题,代码提交不上去,需要在 Git 上走代理了
    
    </summary>
    
      <category term="Git篇" scheme="http://blog.joylau.cn/categories/Git%E7%AF%87/"/>
    
    
      <category term="Git" scheme="http://blog.joylau.cn/tags/Git/"/>
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>宽带速率转换</title>
    <link href="http://blog.joylau.cn/2018/08/03/BroadbandSpeedConversion/"/>
    <id>http://blog.joylau.cn/2018/08/03/BroadbandSpeedConversion/</id>
    <published>2018-08-03T00:51:16.000Z</published>
    <updated>2018-08-03T01:06:00.890Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>昨天和别人吃饭谈起了家里宽带的问题，办了多少兆的宽带，网速能有多少等云云，对方是个小白，和他说了半天，但是有些深层次的原理我也弄不清楚，后来我上网科普了一下，现在整理如下</p><h3 id="什么是宽带速率？"><a href="#什么是宽带速率？" class="headerlink" title="什么是宽带速率？"></a>什么是宽带速率？</h3><p>宽带速率是指技术上所能达到的理论最高信息传送比特率，一般是上传和下载的速度，速率越高，上传和下载的越快。用户申请的宽带业务速率指技术上所能达到的最大理论速率值。但用户上网时还受到用户电脑软硬件的配置、所浏览网站的地址、终端网站带宽等情况的影响。因此，用户上网时的速率通常低于理论速率值。</p><p>理论上，2M，即2Mb/s，宽带理论速率是 256KB/S。实际速率大约为103–200KB/S。（其原因是受用户计算机性能、网络设备质量、资源使用情况、网络高峰期、网站服务能力、线路衰耗、信号衰减等多因素的影响而造成的）。4M，即4Mb/s宽带理论速率是 512KB/S 实际速率大约为200—440KB/S。</p><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p>在计算机科学中，bit是表示信息的最小单位，叫做二进制位；一般用0和1表示。Byte叫做字节，由8个位（8bit）组成一个字节(1Byte)，用于表示计算机中的一个字符。bit与Byte之间可以进行换算，其换算关系为：1Byte=8bit（或简写为：1B=8b）；在实际应用中一般用简称，即1bit简写为1b(注意是小写英文字母b)，1Byte简写为1B（注意是大写英文字母B）。</p><p>在计算机网络或者是网络运营商中，一般，宽带速率的单位用bps(或b/s)表示；bps表示比特每秒即表示每秒钟传输多少位信息，是bit per second的缩写。在实际所说的1M带宽的意思是1Mbps（是兆比特每秒Mbps不是兆字节每秒MBps）。</p><p>换算公式：<code>1B=8b 1B/s=8b/s(或1Bps=8bps)</code></p><p>规范提示：实际书写规范中B应表示Byte(字节)，b应表示bit(比特)，但在平时的实际书写中有的把bit和Byte都混写为b ，如把Mb/s和MB/s都混写为Mb/s，导致人们在实际计算中因单位的混淆而出错。</p><p>实例： 在我们实际上网应用中，下载软件时常常看到诸如下载速度显示为128KBps（KB/s），103KB/s等等宽带速率大小字样，因为ISP提供的线路带宽使用的单位是比特，而一般下载软件显示的是字节（1字节=8比特），所以要通过换算，才能得实际值。然而我们可以按照换算公式换算一下：</p><p><code>1Mb/s = 1024Kb/s = 128×8(Kb/s) = 128KB/s</code></p><p><code>即 1Mb/s = 128KB/s</code></p><h3 id="宽带速率对照表"><a href="#宽带速率对照表" class="headerlink" title="宽带速率对照表"></a>宽带速率对照表</h3><table><thead><tr><th>常见宽带</th><th>理论最高速率（Mbps）</th><th>理论最高速率（KB/S）</th><th>常见下载速率（供参考）</th></tr></thead><tbody><tr><td>1M</td><td>1 Mbps</td><td>128 KB/S</td><td>77~128 KB/S</td></tr><tr><td>2M</td><td>2 Mbps</td><td>256 KB/S</td><td>154~256 KB/S</td></tr><tr><td>3M</td><td>3 Mbps</td><td>384 KB/S</td><td>231~384 KB/S</td></tr><tr><td>4M</td><td>4 Mbps</td><td>512 KB/S</td><td>307~512 KB/S</td></tr><tr><td>6M</td><td>6 Mbps</td><td>620 KB/S</td><td>462~620 KB/S</td></tr><tr><td>8M</td><td>8 Mbps</td><td>1024 KB/S</td><td>614~1024 KB/S</td></tr><tr><td>10M</td><td>10 Mbps</td><td>1280 KB/S</td><td>768~1280 KB/S</td></tr><tr><td>12M</td><td>12 Mbps</td><td>1536 KB/S</td><td>922~1536 KB/S</td></tr><tr><td>20M</td><td>20 Mbps</td><td>2560 KB/S</td><td>1536~2560 KB/S</td></tr><tr><td>30M</td><td>30 Mbps</td><td>3840 KB/S</td><td>2560~3840 KB/S</td></tr><tr><td>50M</td><td>50 Mbps</td><td>6400 KB/S</td><td>3840~6400 KB/S</td></tr><tr><td>100M</td><td>100 Mbps</td><td>12800 KB/S</td><td>7680~12800 KB/S</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      昨天和别人吃饭谈起了家里宽带的问题，办了多少兆的宽带，网速能有多少等云云，对方是个小白，和他说了半天，但是有些深层次的原理我也弄不清楚，后来我上网科普了一下，现在整理如下
    
    </summary>
    
      <category term="其他篇" scheme="http://blog.joylau.cn/categories/%E5%85%B6%E4%BB%96%E7%AF%87/"/>
    
    
      <category term="技能" scheme="http://blog.joylau.cn/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>NamedParameterJdbcTemplate 使用具名参数记录</title>
    <link href="http://blog.joylau.cn/2018/07/30/Spring-NamedParameterJdbcTemplate/"/>
    <id>http://blog.joylau.cn/2018/07/30/Spring-NamedParameterJdbcTemplate/</id>
    <published>2018-07-30T01:18:05.000Z</published>
    <updated>2018-07-30T02:10:59.578Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近维护了一个比较老的项目，操作数据库直接用的 Spring 的 JdbcTemplate，有很多地方我们传入的参数都是不确定的<br>简单的还好，复杂的 sql 语句在代码里用字符串拼接起来简直不能忍，<br>又不想对原来的项目有什么大的改动，就想这能不能在现在的基础上优化一下<br>还好有 NamedParameterJdbcTemplate</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>具名参数: SQL 按名称(以冒号开头)而不是按位置进行指定. 具名参数更易于维护, 也提升了可读性. 具名参数由框架类在运行时用占位符取代<br>具名参数只在 NamedParameterJdbcTemplate 中得到支持。NamedParameterJdbcTemplate可以使用全部jdbcTemplate方法</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>该类位于 <code>org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate</code></li><li>有2个构造方法，参数分别是 DataSource 和 JdbcOperations</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new NamedParameterJdbcTemplate for the given &#123;<span class="doctag">@link</span> DataSource&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Creates a classic Spring &#123;<span class="doctag">@link</span> org.springframework.jdbc.core.JdbcTemplate&#125; and wraps it.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataSource the JDBC DataSource to access</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NamedParameterJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(dataSource, <span class="string">"DataSource must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.classicJdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new NamedParameterJdbcTemplate for the given classic</span></span><br><span class="line"><span class="comment"> * Spring &#123;<span class="doctag">@link</span> org.springframework.jdbc.core.JdbcTemplate&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classicJdbcTemplate the classic Spring JdbcTemplate to wrap</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NamedParameterJdbcTemplate</span><span class="params">(JdbcOperations classicJdbcTemplate)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(classicJdbcTemplate, <span class="string">"JdbcTemplate must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.classicJdbcTemplate = classicJdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实例化 bean 只要将 dataSource 或者 JdbcTemplate 传入到构造参数即可</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"namedParameterJdbcTemplate"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>注入 namedParameterJdbcTemplate</li></ol><h3 id="参数的传入"><a href="#参数的传入" class="headerlink" title="参数的传入"></a>参数的传入</h3><p>namedParameterJdbcTemplate 参数传入有 2 中方法：</p><ol><li><code>Map&lt;String, ?&gt; paramMap</code> 我们熟知的 map</li><li><p><code>SqlParameterSource paramSource</code><br> 该接口默认的实现有三个类：</p><p> <code>MapSqlParameterSource</code> 实现非常简单，只是封装了java.util.Map；<br> 当 Map&lt;String, ?&gt; paramMap 用吧 或者 new MapSqlParameterSource(paramMap) 参数为 map</p><p> <code>BeanPropertySqlParameterSource</code> 封装了一个JavaBean对象，通过JavaBean对象属性来决定命名参数的值。<br>  new BeanPropertySqlParameterSource(dto) new 出一个 BeanPropertySqlParameterSource 对象，构造方法传入实体类即可，绝大部分情况下我们都使用这种方式</p><p> <code>EmptySqlParameterSource</code> 一个空的SqlParameterSource ，常用来占位使用<br>  没用过</p></li></ol><h3 id="数据返回"><a href="#数据返回" class="headerlink" title="数据返回"></a>数据返回</h3><ol><li>返回 Map</li><li><p>返回 RowMapper 包装好的实体类，该类有2中实现<br> SingleColumnRowMapper ，sql结果为一个单列的数据，如List<string> , List<integer>,String,Integer等</integer></string></p><p> BeanPropertyRowMapper， sql结果匹配到对象 List&lt; XxxVO&gt; , XxxVO</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KnowledgeInfo info = <span class="keyword">new</span> KnowledgeInfo();</span><br><span class="line">info.setAuditState(<span class="string">"1"</span>);</span><br><span class="line">List&lt;KnowledgeInfo&gt; infos = namedParameterJdbcTemplate.query(</span><br><span class="line">        sql,</span><br><span class="line">        <span class="keyword">new</span> BeanPropertySqlParameterSource(info),</span><br><span class="line">        <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(KnowledgeInfo.class)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意： sql 语句中的参数使用 <code>:参数名</code> 进行占位</p>]]></content>
    
    <summary type="html">
    
      最近维护了一个比较老的项目，操作数据库直接用的 Spring 的 JdbcTemplate.....
    
    </summary>
    
      <category term="Spring" scheme="http://blog.joylau.cn/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.joylau.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 里 number 类型对应 JdbcType bean 类型记录</title>
    <link href="http://blog.joylau.cn/2018/07/29/OracleNubmer-JdbcType/"/>
    <id>http://blog.joylau.cn/2018/07/29/OracleNubmer-JdbcType/</id>
    <published>2018-07-29T02:31:44.000Z</published>
    <updated>2018-07-30T01:16:30.911Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><table><thead><tr><th>number长度</th><th>Java类型</th></tr></thead><tbody><tr><td>1~4</td><td>Short</td></tr><tr><td>5~9</td><td>Integer</td></tr><tr><td>10~18</td><td>Long</td></tr><tr><td>18+</td><td>BigDecimal</td></tr></tbody></table><p>须指定number类型的大小。</p>]]></content>
    
    <summary type="html">
    
      Oracle 里 number 类型对应 JdbcType bean 类型记录
    
    </summary>
    
      <category term="Java" scheme="http://blog.joylau.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.joylau.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>DenyHosts 清除黑名单 IP 地址</title>
    <link href="http://blog.joylau.cn/2018/07/19/Linux-Cancel-DenyHosts/"/>
    <id>http://blog.joylau.cn/2018/07/19/Linux-Cancel-DenyHosts/</id>
    <published>2018-07-19T02:47:25.000Z</published>
    <updated>2018-07-19T03:32:00.283Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天连接远程服务器发生了以下的错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset</span><br></pre></td></tr></table></figure></p><p>我想应该是我当前的 IP 地址被 DenyHosts 加入了黑名单<br>本来想只要将当前的 ip 地址在黑名单中去掉就可以了<br>没想到事实并不是如此,为此还查资料花费了一点功夫<br>现记录下来</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>停用 DenyHosts : <code>systemctl stop denyhosts.service</code></li><li>删除黑名单中当前的ip地址: <code>vim /etc/hosts.deny</code></li><li>进入  <code>/var/lib/denyhosts</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root    39 2月  16 2015 allowed-hosts</span><br><span class="line">-rw-r--r-- 1 root root 71451 7月  19 10:58 hosts</span><br><span class="line">-rw-r--r-- 1 root root 71270 7月  19 10:58 hosts-restricted</span><br><span class="line">-rw-r--r-- 1 root root 71433 7月  19 10:58 hosts-root</span><br><span class="line">-rw-r--r-- 1 root root 71280 7月  19 10:58 hosts-valid</span><br><span class="line">-rw-r--r-- 1 root root   105 7月  19 10:58 offset</span><br><span class="line">-rw-r--r-- 1 root root     0 7月  19 10:58 suspicious-logins</span><br><span class="line">-rw-r--r-- 1 root root 44731 7月  19 10:58 users-hosts</span><br><span class="line">-rw-r--r-- 1 root root 50925 7月  19 10:58 users-invalid</span><br><span class="line">-rw-r--r-- 1 root root   643 7月  19 10:58 users-valid</span><br></pre></td></tr></table></figure><ol start="4"><li>依次在上面各个文件中移除自己当前的IP地址</li><li>如果要将当前的IP地址添加到白名单中,可以在 /etc/hosts.allow 添加<br>sshd: ip地址<br>allowed-hosts 添加 IP地址</li><li>重启 DenyHosts</li></ol><blockquote><p>注意: 这些文件里有很多被拉入黑名单的IP地址,vim编辑的时候可以在命令行模式下使用 <code>/ip地址</code> 来查找, n 和 N 上下翻动,再在命令行模式下 <code>:noh</code> 取消查找</p></blockquote>]]></content>
    
    <summary type="html">
    
      今天连接远程服务器发生了错误,我想应该是我当前的 IP 地址被 DenyHosts 加入了黑名单,想取消的话还是花了一点的功夫
    
    </summary>
    
      <category term="Linux篇" scheme="http://blog.joylau.cn/categories/Linux%E7%AF%87/"/>
    
    
      <category term="Linux" scheme="http://blog.joylau.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 最佳编程字体 Monaco 的优化显示</title>
    <link href="http://blog.joylau.cn/2018/07/13/Ubuntu-Fonts-Monaco/"/>
    <id>http://blog.joylau.cn/2018/07/13/Ubuntu-Fonts-Monaco/</id>
    <published>2018-07-13T03:03:44.000Z</published>
    <updated>2018-07-18T06:22:55.427Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自从入了 MBP 后就被其默认的字体显示效果吸引了，在编辑器里写代码更是舒服，于是想着把 Mac 下的字体也移植到 Ubuntu 下，但是显示效果并不是特别的好，尤其是粗体字的显示</p><h2 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a>前后对比</h2><p>左侧使用前，右侧使用后</p><figure class="half"><img src="http://image.joylau.cn/blog/Monaco1.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco4.png" width="50%"></figure><figure class="half"><img src="http://image.joylau.cn/blog/Monaco2.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco5.png" width="50%"></figure><figure class="half"><img src="http://image.joylau.cn/blog/Monaco3.png" width="50%"><img src="http://image.joylau.cn/blog/Monaco6.png" width="50%"></figure><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>该字体为开源字体，字体地址： <a href="https://github.com/vjpr/monaco-bold" target="_blank" rel="noopener">https://github.com/vjpr/monaco-bold</a></li><li>复制到 <code>/usr/share/fonts</code></li><li><code>fc-cache -fv</code> 生成字体缓存</li></ol><p>我的 1080P 分辨率，我的配置如下：<br><img src="http://image.joylau.cn/blog/Monaco7.png" alt="MonacoB2"></p><h2 id="2018-07-18-14-22-05-更新"><a href="#2018-07-18-14-22-05-更新" class="headerlink" title="2018-07-18 14:22:05 更新"></a>2018-07-18 14:22:05 更新</h2><p>看到一篇关于 Ubuntu 字体渲染问题的文章: 修复 Ubuntu 中文字体渲染  <a href="https://i-meto.com/fix-chinese-font-display/" target="_blank" rel="noopener">https://i-meto.com/fix-chinese-font-display/</a></p>]]></content>
    
    <summary type="html">
    
      自从入了 MBP 后就被其默认的字体显示效果吸引了，在编辑器里写代码更是舒服，于是想着把 Mac 下的字体也移植到 Ubuntu 下，但是显示效果并不是特别的好，尤其是粗体字的显示
    
    </summary>
    
      <category term="Ubuntu篇" scheme="http://blog.joylau.cn/categories/Ubuntu%E7%AF%87/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.joylau.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用阿里云个人专属加速器</title>
    <link href="http://blog.joylau.cn/2018/07/12/Docker-AliAccelerator/"/>
    <id>http://blog.joylau.cn/2018/07/12/Docker-AliAccelerator/</id>
    <published>2018-07-12T01:48:38.000Z</published>
    <updated>2018-07-12T01:53:22.650Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol start="0"><li>原来阿里云给每个账户都有分配专属的加速器地址</li><li>登录阿里云控制台</li><li>进入容器镜像服务，点击最下方的镜像加速器，会出现个人的专属加速器地址，我的是： <a href="https://0ppztvl0.mirror.aliyuncs.com" target="_blank" rel="noopener">https://0ppztvl0.mirror.aliyuncs.com</a></li><li><p>Docker客户端版本大于1.10.0的用户，创建 <code>/etc/docker/daemon.json</code><br> {<br>   “registry-mirrors”: [“<a href="https://0ppztvl0.mirror.aliyuncs.com&quot;]" target="_blank" rel="noopener">https://0ppztvl0.mirror.aliyuncs.com&quot;]</a><br> }</p><p> sudo systemctl daemon-reload<br> sudo systemctl restart docker</p></li></ol>]]></content>
    
    <summary type="html">
    
      原来阿里云给每个账户都有分配专属的加速器地址
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>以非 root 用户身份管理 Docker</title>
    <link href="http://blog.joylau.cn/2018/07/05/Docker-Manager-NonRoot/"/>
    <id>http://blog.joylau.cn/2018/07/05/Docker-Manager-NonRoot/</id>
    <published>2018-07-05T08:51:49.000Z</published>
    <updated>2018-07-05T08:59:34.722Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>docker 安装完成后，其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行，这样每次在使用命令时都需要在前面加上sudo,这很不方便。<br>有没有什么方式能够解决？<br>官方文档地址： <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/linux-postinstall/</a></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>docker 守护进程绑定至 Unix 套接字，而不是 TCP 端口。默认情况下，该 Unix 套接字由用户 root 所有，而其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行。</p><p>在使用 docker 命令时，如果您不想使用 sudo，请创建名为 docker 的 Unix 组并向其中添加用户。docker 守护进程启动时，它将使 Unix 套接字的所有权可由 docker 组进行读取/写入。</p><blockquote><blockquote><blockquote><p>警告： docker 组将授予等同于 root 用户的特权。如需有关此操作如何影响系统安全性的详细信息，请参阅 Docker 守护进程攻击面。</p></blockquote></blockquote></blockquote><p>如需创建 docker 组并添加您的用户，请执行下列操作：</p><ol><li>创建 docker 组。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker</span></span><br></pre></td></tr></table></figure><p>向 docker 组中添加您的用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -aG docker <span class="variable">$USER</span></span></span><br></pre></td></tr></table></figure><p>注销并重新登录，以便对您的组成员资格进行重新评估。</p><p>如果在虚拟机上进行测试，可能必须重启此虚拟机才能使更改生效。</p><p>在桌面 Linux 环境（例如，X Windows）中，彻底从您的会话中注销，然后重新登录。</p><p>验证您是否可以在不使用 sudo 的情况下运行 docker 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br></pre></td></tr></table></figure><p>此命令将下载一个测试镜像并在容器中运行它。容器运行时，它将输出一条参考消息并退出。</p><p>经过实测，Ubuntu通过源添加安装最新版 Docker 时，已经自动添加了 docker 组，只需要将 当前用户添加到组里面在重新登录就可以了。</p>]]></content>
    
    <summary type="html">
    
      docker 安装完成后，其他用户只能使用 sudo 访问它。docker 守护进程始终以 root 用户身份运行，这样每次在使用命令时都需要在前面加上sudo,这很不方便。
    
    </summary>
    
      <category term="Docker篇" scheme="http://blog.joylau.cn/categories/Docker%E7%AF%87/"/>
    
    
      <category term="Docker" scheme="http://blog.joylau.cn/tags/Docker/"/>
    
  </entry>
  
</feed>
